Index.PACKAGES = {"com.github.agourlay.cornichon.http.client" : [{"name" : "com.github.agourlay.cornichon.http.client.AkkaHttpClient", "shortDescription" : "", "members_class" : [{"label" : "paramsFromUrl", "tail" : "(url: String): Either[CornichonError, Seq[(String, String)]]", "member" : "com.github.agourlay.cornichon.http.client.AkkaHttpClient.paramsFromUrl", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html#paramsFromUrl(url:String):Either[com.github.agourlay.cornichon.core.CornichonError,Seq[(String,String)]]", "kind" : "def"}, {"label" : "shutdown", "tail" : "(): Future[Done.type]", "member" : "com.github.agourlay.cornichon.http.client.AkkaHttpClient.shutdown", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html#shutdown():scala.concurrent.Future[com.github.agourlay.cornichon.core.Done.type]", "kind" : "def"}, {"label" : "openSSE", "tail" : "(req: HttpStreamedRequest, connectionTimeout: FiniteDuration): EitherT[Future, CornichonError, CornichonHttpResponse]", "member" : "com.github.agourlay.cornichon.http.client.AkkaHttpClient.openSSE", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html#openSSE(req:com.github.agourlay.cornichon.http.HttpStreamedRequest,connectionTimeout:scala.concurrent.duration.FiniteDuration):cats.data.EitherT[scala.concurrent.Future,com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.http.CornichonHttpResponse]", "kind" : "def"}, {"label" : "openStream", "tail" : "(req: HttpStreamedRequest, t: FiniteDuration): Future[Either[CornichonError, CornichonHttpResponse]]", "member" : "com.github.agourlay.cornichon.http.client.AkkaHttpClient.openStream", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html#openStream(req:com.github.agourlay.cornichon.http.HttpStreamedRequest,t:scala.concurrent.duration.FiniteDuration):scala.concurrent.Future[Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.http.CornichonHttpResponse]]", "kind" : "def"}, {"label" : "JsonMarshaller", "tail" : "(): ToEntityMarshaller[Json]", "member" : "com.github.agourlay.cornichon.http.client.AkkaHttpClient.JsonMarshaller", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html#JsonMarshaller:akka.http.scaladsl.marshalling.ToEntityMarshaller[io.circe.Json]", "kind" : "implicit def"}, {"label" : "runRequest", "tail" : "(req: HttpRequest[Json], t: FiniteDuration): EitherT[Future, CornichonError, CornichonHttpResponse]", "member" : "com.github.agourlay.cornichon.http.client.AkkaHttpClient.runRequest", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html#runRequest(req:com.github.agourlay.cornichon.http.HttpRequest[io.circe.Json],t:scala.concurrent.duration.FiniteDuration):cats.data.EitherT[scala.concurrent.Future,com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.http.CornichonHttpResponse]", "kind" : "def"}, {"label" : "parseHttpHeaders", "tail" : "(headers: Seq[(String, String)]): Either[MalformedHeadersError, Seq[HttpHeader]]", "member" : "com.github.agourlay.cornichon.http.client.AkkaHttpClient.parseHttpHeaders", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html#parseHttpHeaders(headers:Seq[(String,String)]):Either[com.github.agourlay.cornichon.http.MalformedHeadersError,Seq[akka.http.scaladsl.model.HttpHeader]]", "kind" : "def"}, {"label" : "httpMethodMapper", "tail" : "(method: HttpMethod): akka.http.scaladsl.client.RequestBuilding.RequestBuilder", "member" : "com.github.agourlay.cornichon.http.client.AkkaHttpClient.httpMethodMapper", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html#httpMethodMapper(method:com.github.agourlay.cornichon.http.HttpMethod):akka.http.scaladsl.client.RequestBuilding.RequestBuilder", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.http.client.AkkaHttpClient#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/github\/agourlay\/cornichon\/http\/client\/AkkaHttpClient.html", "kind" : "class"}, {"name" : "com.github.agourlay.cornichon.http.client.Http4sClient", "shortDescription" : "", "members_class" : [{"label" : "paramsFromUrl", "tail" : "(url: String): Either[CornichonError, Seq[(String, String)]]", "member" : "com.github.agourlay.cornichon.http.client.Http4sClient.paramsFromUrl", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#paramsFromUrl(url:String):Either[com.github.agourlay.cornichon.core.CornichonError,Seq[(String,String)]]", "kind" : "def"}, {"label" : "shutdown", "tail" : "(): Future[Done.type]", "member" : "com.github.agourlay.cornichon.http.client.Http4sClient.shutdown", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#shutdown():scala.concurrent.Future[com.github.agourlay.cornichon.core.Done.type]", "kind" : "def"}, {"label" : "openStream", "tail" : "(req: HttpStreamedRequest, t: FiniteDuration): Nothing", "member" : "com.github.agourlay.cornichon.http.client.Http4sClient.openStream", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#openStream(req:com.github.agourlay.cornichon.http.HttpStreamedRequest,t:scala.concurrent.duration.FiniteDuration):Nothing", "kind" : "def"}, {"label" : "runRequest", "tail" : "(cReq: HttpRequest[Json], t: FiniteDuration): EitherT[Future, CornichonError, CornichonHttpResponse]", "member" : "com.github.agourlay.cornichon.http.client.Http4sClient.runRequest", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#runRequest(cReq:com.github.agourlay.cornichon.http.HttpRequest[io.circe.Json],t:scala.concurrent.duration.FiniteDuration):cats.data.EitherT[scala.concurrent.Future,com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.http.CornichonHttpResponse]", "kind" : "def"}, {"label" : "handleResponse", "tail" : "(response: Response): Task[CornichonHttpResponse]", "member" : "com.github.agourlay.cornichon.http.client.Http4sClient.handleResponse", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#handleResponse[A](response:org.http4s.Response):fs2.Task[com.github.agourlay.cornichon.http.CornichonHttpResponse]", "kind" : "def"}, {"label" : "addQueryParams", "tail" : "(uri: Uri, moreParams: Seq[(String, String)]): Uri", "member" : "com.github.agourlay.cornichon.http.client.Http4sClient.addQueryParams", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#addQueryParams(uri:org.http4s.Uri,moreParams:Seq[(String,String)]):org.http4s.Uri", "kind" : "def"}, {"label" : "buildHeaders", "tail" : "(headers: Seq[(String, String)]): Headers", "member" : "com.github.agourlay.cornichon.http.client.Http4sClient.buildHeaders", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#buildHeaders(headers:Seq[(String,String)]):org.http4s.Headers", "kind" : "def"}, {"label" : "httpMethodMapper", "tail" : "(method: HttpMethod): Method", "member" : "com.github.agourlay.cornichon.http.client.Http4sClient.httpMethodMapper", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#httpMethodMapper(method:com.github.agourlay.cornichon.http.HttpMethod):org.http4s.Method", "kind" : "def"}, {"label" : "scheduler", "tail" : ": Scheduler", "member" : "com.github.agourlay.cornichon.http.client.Http4sClient.scheduler", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#scheduler:fs2.Scheduler", "kind" : "implicit val"}, {"label" : "strategy", "tail" : ": Strategy", "member" : "com.github.agourlay.cornichon.http.client.Http4sClient.strategy", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#strategy:fs2.Strategy", "kind" : "implicit val"}, {"member" : "com.github.agourlay.cornichon.http.client.Http4sClient#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/github\/agourlay\/cornichon\/http\/client\/Http4sClient.html", "kind" : "class"}, {"name" : "com.github.agourlay.cornichon.http.client.HttpClient", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/HttpClient.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/HttpClient.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/HttpClient.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/HttpClient.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/HttpClient.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/HttpClient.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/HttpClient.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/HttpClient.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/HttpClient.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/HttpClient.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/HttpClient.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/HttpClient.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/HttpClient.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/HttpClient.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/HttpClient.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/HttpClient.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/HttpClient.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/HttpClient.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/HttpClient.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "paramsFromUrl", "tail" : "(url: String): Either[CornichonError, Seq[(String, String)]]", "member" : "com.github.agourlay.cornichon.http.client.HttpClient.paramsFromUrl", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/HttpClient.html#paramsFromUrl(url:String):Either[com.github.agourlay.cornichon.core.CornichonError,Seq[(String,String)]]", "kind" : "abstract def"}, {"label" : "shutdown", "tail" : "(): Future[Done]", "member" : "com.github.agourlay.cornichon.http.client.HttpClient.shutdown", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/HttpClient.html#shutdown():scala.concurrent.Future[com.github.agourlay.cornichon.core.Done]", "kind" : "abstract def"}, {"label" : "openStream", "tail" : "(req: HttpStreamedRequest, t: FiniteDuration): Future[Either[CornichonError, CornichonHttpResponse]]", "member" : "com.github.agourlay.cornichon.http.client.HttpClient.openStream", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/HttpClient.html#openStream(req:com.github.agourlay.cornichon.http.HttpStreamedRequest,t:scala.concurrent.duration.FiniteDuration):scala.concurrent.Future[Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.http.CornichonHttpResponse]]", "kind" : "abstract def"}, {"label" : "runRequest", "tail" : "(req: HttpRequest[Json], t: FiniteDuration): EitherT[Future, CornichonError, CornichonHttpResponse]", "member" : "com.github.agourlay.cornichon.http.client.HttpClient.runRequest", "link" : "com\/github\/agourlay\/cornichon\/http\/client\/HttpClient.html#runRequest(req:com.github.agourlay.cornichon.http.HttpRequest[io.circe.Json],t:scala.concurrent.duration.FiniteDuration):cats.data.EitherT[scala.concurrent.Future,com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.http.CornichonHttpResponse]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/github\/agourlay\/cornichon\/http\/client\/HttpClient.html", "kind" : "trait"}], "com.github.agourlay.cornichon.json" : [{"name" : "com.github.agourlay.cornichon.json.ArrayFieldProjection", "shortDescription" : "", "members_case class" : [{"label" : "projection", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.json.ArrayFieldProjection.projection", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldProjection.html#projection:Boolean", "kind" : "val"}, {"label" : "pretty", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.ArrayFieldProjection.pretty", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldProjection.html#pretty:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.json.ArrayFieldProjection#<init>", "error" : "unsupported entity"}, {"label" : "field", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.ArrayFieldProjection.field", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldProjection.html#field:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldProjection.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldProjection.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldProjection.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldProjection.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldProjection.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldProjection.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldProjection.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldProjection.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldProjection.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldProjection.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldProjection.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldProjection.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldProjection.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldProjection.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldProjection.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldProjection.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldProjection.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.json.ArrayFieldSelection", "shortDescription" : "", "members_case class" : [{"label" : "pretty", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.ArrayFieldSelection.pretty", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldSelection.html#pretty:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.json.ArrayFieldSelection#<init>", "error" : "unsupported entity"}, {"label" : "indice", "tail" : ": Int", "member" : "com.github.agourlay.cornichon.json.ArrayFieldSelection.indice", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldSelection.html#indice:Int", "kind" : "val"}, {"label" : "field", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.ArrayFieldSelection.field", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldSelection.html#field:String", "kind" : "val"}, {"label" : "projection", "tail" : "(): Boolean", "member" : "com.github.agourlay.cornichon.json.JsonPathOperation.projection", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldSelection.html#projection:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldSelection.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldSelection.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldSelection.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldSelection.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldSelection.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldSelection.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldSelection.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldSelection.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldSelection.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldSelection.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldSelection.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldSelection.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldSelection.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldSelection.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldSelection.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldSelection.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/json\/ArrayFieldSelection.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.json.ArrayProjectionSegment", "shortDescription" : "", "members_case class" : [{"member" : "com.github.agourlay.cornichon.json.ArrayProjectionSegment#<init>", "error" : "unsupported entity"}, {"label" : "field", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.ArrayProjectionSegment.field", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayProjectionSegment.html#field:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayProjectionSegment.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayProjectionSegment.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayProjectionSegment.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayProjectionSegment.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayProjectionSegment.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayProjectionSegment.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayProjectionSegment.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayProjectionSegment.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayProjectionSegment.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayProjectionSegment.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayProjectionSegment.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayProjectionSegment.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayProjectionSegment.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayProjectionSegment.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayProjectionSegment.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/ArrayProjectionSegment.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/json\/ArrayProjectionSegment.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.json.CornichonJson", "members_trait" : [{"label" : "findAllJsonWithValue", "tail" : "(values: List[String], json: Json): Vector[JsonPath]", "member" : "com.github.agourlay.cornichon.json.CornichonJson.findAllJsonWithValue", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#findAllJsonWithValue(values:List[String],json:io.circe.Json):Vector[com.github.agourlay.cornichon.json.JsonPath]", "kind" : "def"}, {"label" : "whitelistingValue", "tail" : "(first: Json, second: Json): Either[WhitelistingError, Json]", "member" : "com.github.agourlay.cornichon.json.CornichonJson.whitelistingValue", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#whitelistingValue(first:io.circe.Json,second:io.circe.Json):Either[com.github.agourlay.cornichon.json.WhitelistingError,io.circe.Json]", "kind" : "def"}, {"label" : "diffPatch", "tail" : "(first: Json, second: Json): gnieh.diffson.circe.JsonPatch", "member" : "com.github.agourlay.cornichon.json.CornichonJson.diffPatch", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#diffPatch(first:io.circe.Json,second:io.circe.Json):gnieh.diffson.circe.JsonPatch", "kind" : "def"}, {"label" : "prettyPrint", "tail" : "(json: Json): String", "member" : "com.github.agourlay.cornichon.json.CornichonJson.prettyPrint", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#prettyPrint(json:io.circe.Json):String", "kind" : "def"}, {"label" : "extract", "tail" : "(json: Json, path: String): Either[CornichonError, Json]", "member" : "com.github.agourlay.cornichon.json.CornichonJson.extract", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#extract(json:io.circe.Json,path:String):scala.util.Either[com.github.agourlay.cornichon.core.CornichonError,io.circe.Json]", "kind" : "def"}, {"label" : "jsonStringValue", "tail" : "(j: Json): String", "member" : "com.github.agourlay.cornichon.json.CornichonJson.jsonStringValue", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#jsonStringValue(j:io.circe.Json):String", "kind" : "def"}, {"label" : "removeFieldsByPath", "tail" : "(input: Json, paths: Seq[JsonPath]): Json", "member" : "com.github.agourlay.cornichon.json.CornichonJson.removeFieldsByPath", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#removeFieldsByPath(input:io.circe.Json,paths:Seq[com.github.agourlay.cornichon.json.JsonPath]):io.circe.Json", "kind" : "def"}, {"label" : "selectArrayJsonPath", "tail" : "(path: JsonPath, json: String): Either[CornichonError, Vector[Json]]", "member" : "com.github.agourlay.cornichon.json.CornichonJson.selectArrayJsonPath", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#selectArrayJsonPath(path:com.github.agourlay.cornichon.json.JsonPath,json:String):Either[com.github.agourlay.cornichon.core.CornichonError,Vector[io.circe.Json]]", "kind" : "def"}, {"label" : "parseArray", "tail" : "(input: String): Either[CornichonError, Vector[Json]]", "member" : "com.github.agourlay.cornichon.json.CornichonJson.parseArray", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#parseArray(input:String):Either[com.github.agourlay.cornichon.core.CornichonError,Vector[io.circe.Json]]", "kind" : "def"}, {"label" : "jsonArrayValues", "tail" : "(json: Json): Either[CornichonError, Vector[Json]]", "member" : "com.github.agourlay.cornichon.json.CornichonJson.jsonArrayValues", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#jsonArrayValues(json:io.circe.Json):Either[com.github.agourlay.cornichon.core.CornichonError,Vector[io.circe.Json]]", "kind" : "def"}, {"label" : "parseGraphQLJson", "tail" : "(input: String): Either[MalformedGraphQLJsonError[String], Json]", "member" : "com.github.agourlay.cornichon.json.CornichonJson.parseGraphQLJson", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#parseGraphQLJson(input:String):scala.util.Either[com.github.agourlay.cornichon.json.MalformedGraphQLJsonError[String],io.circe.Json]", "kind" : "def"}, {"label" : "parseDataTableRaw", "tail" : "(table: String): Either[CornichonError, List[Map[String, String]]]", "member" : "com.github.agourlay.cornichon.json.CornichonJson.parseDataTableRaw", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#parseDataTableRaw(table:String):Either[com.github.agourlay.cornichon.core.CornichonError,List[Map[String,String]]]", "kind" : "def"}, {"label" : "parseDataTable", "tail" : "(table: String): Either[CornichonError, List[JsonObject]]", "member" : "com.github.agourlay.cornichon.json.CornichonJson.parseDataTable", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#parseDataTable(table:String):Either[com.github.agourlay.cornichon.core.CornichonError,List[io.circe.JsonObject]]", "kind" : "def"}, {"label" : "parseString", "tail" : "(s: String): Either[MalformedJsonError[String], Json]", "member" : "com.github.agourlay.cornichon.json.CornichonJson.parseString", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#parseString(s:String):Either[com.github.agourlay.cornichon.json.MalformedJsonError[String],io.circe.Json]", "kind" : "def"}, {"label" : "parseJsonUnsafe", "tail" : "(input: A)(arg0: Encoder[A], arg1: Show[A]): Json", "member" : "com.github.agourlay.cornichon.json.CornichonJson.parseJsonUnsafe", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#parseJsonUnsafe[A](input:A)(implicitevidence$3:io.circe.Encoder[A],implicitevidence$4:cats.Show[A]):io.circe.Json", "kind" : "def"}, {"label" : "parseJson", "tail" : "(input: A)(arg0: Encoder[A], arg1: Show[A]): Either[CornichonError, Json]", "member" : "com.github.agourlay.cornichon.json.CornichonJson.parseJson", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#parseJson[A](input:A)(implicitevidence$1:io.circe.Encoder[A],implicitevidence$2:cats.Show[A]):Either[com.github.agourlay.cornichon.core.CornichonError,io.circe.Json]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html", "members_object" : [{"label" : "GqlHelper", "tail" : "", "member" : "com.github.agourlay.cornichon.json.CornichonJson.GqlHelper", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#GqlHelperextendsAnyVal", "kind" : "implicit final class"}, {"label" : "sessionJson", "tail" : "", "member" : "com.github.agourlay.cornichon.json.CornichonJson.sessionJson", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#sessionJsonextendsAnyRef", "kind" : "implicit class"}, {"label" : "findAllJsonWithValue", "tail" : "(values: List[String], json: Json): Vector[JsonPath]", "member" : "com.github.agourlay.cornichon.json.CornichonJson.findAllJsonWithValue", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#findAllJsonWithValue(values:List[String],json:io.circe.Json):Vector[com.github.agourlay.cornichon.json.JsonPath]", "kind" : "def"}, {"label" : "whitelistingValue", "tail" : "(first: Json, second: Json): Either[WhitelistingError, Json]", "member" : "com.github.agourlay.cornichon.json.CornichonJson.whitelistingValue", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#whitelistingValue(first:io.circe.Json,second:io.circe.Json):Either[com.github.agourlay.cornichon.json.WhitelistingError,io.circe.Json]", "kind" : "def"}, {"label" : "diffPatch", "tail" : "(first: Json, second: Json): gnieh.diffson.circe.JsonPatch", "member" : "com.github.agourlay.cornichon.json.CornichonJson.diffPatch", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#diffPatch(first:io.circe.Json,second:io.circe.Json):gnieh.diffson.circe.JsonPatch", "kind" : "def"}, {"label" : "prettyPrint", "tail" : "(json: Json): String", "member" : "com.github.agourlay.cornichon.json.CornichonJson.prettyPrint", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#prettyPrint(json:io.circe.Json):String", "kind" : "def"}, {"label" : "extract", "tail" : "(json: Json, path: String): Either[CornichonError, Json]", "member" : "com.github.agourlay.cornichon.json.CornichonJson.extract", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#extract(json:io.circe.Json,path:String):scala.util.Either[com.github.agourlay.cornichon.core.CornichonError,io.circe.Json]", "kind" : "def"}, {"label" : "jsonStringValue", "tail" : "(j: Json): String", "member" : "com.github.agourlay.cornichon.json.CornichonJson.jsonStringValue", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#jsonStringValue(j:io.circe.Json):String", "kind" : "def"}, {"label" : "removeFieldsByPath", "tail" : "(input: Json, paths: Seq[JsonPath]): Json", "member" : "com.github.agourlay.cornichon.json.CornichonJson.removeFieldsByPath", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#removeFieldsByPath(input:io.circe.Json,paths:Seq[com.github.agourlay.cornichon.json.JsonPath]):io.circe.Json", "kind" : "def"}, {"label" : "selectArrayJsonPath", "tail" : "(path: JsonPath, json: String): Either[CornichonError, Vector[Json]]", "member" : "com.github.agourlay.cornichon.json.CornichonJson.selectArrayJsonPath", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#selectArrayJsonPath(path:com.github.agourlay.cornichon.json.JsonPath,json:String):Either[com.github.agourlay.cornichon.core.CornichonError,Vector[io.circe.Json]]", "kind" : "def"}, {"label" : "parseArray", "tail" : "(input: String): Either[CornichonError, Vector[Json]]", "member" : "com.github.agourlay.cornichon.json.CornichonJson.parseArray", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#parseArray(input:String):Either[com.github.agourlay.cornichon.core.CornichonError,Vector[io.circe.Json]]", "kind" : "def"}, {"label" : "jsonArrayValues", "tail" : "(json: Json): Either[CornichonError, Vector[Json]]", "member" : "com.github.agourlay.cornichon.json.CornichonJson.jsonArrayValues", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#jsonArrayValues(json:io.circe.Json):Either[com.github.agourlay.cornichon.core.CornichonError,Vector[io.circe.Json]]", "kind" : "def"}, {"label" : "parseGraphQLJson", "tail" : "(input: String): Either[MalformedGraphQLJsonError[String], Json]", "member" : "com.github.agourlay.cornichon.json.CornichonJson.parseGraphQLJson", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#parseGraphQLJson(input:String):scala.util.Either[com.github.agourlay.cornichon.json.MalformedGraphQLJsonError[String],io.circe.Json]", "kind" : "def"}, {"label" : "parseDataTableRaw", "tail" : "(table: String): Either[CornichonError, List[Map[String, String]]]", "member" : "com.github.agourlay.cornichon.json.CornichonJson.parseDataTableRaw", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#parseDataTableRaw(table:String):Either[com.github.agourlay.cornichon.core.CornichonError,List[Map[String,String]]]", "kind" : "def"}, {"label" : "parseDataTable", "tail" : "(table: String): Either[CornichonError, List[JsonObject]]", "member" : "com.github.agourlay.cornichon.json.CornichonJson.parseDataTable", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#parseDataTable(table:String):Either[com.github.agourlay.cornichon.core.CornichonError,List[io.circe.JsonObject]]", "kind" : "def"}, {"label" : "parseString", "tail" : "(s: String): Either[MalformedJsonError[String], Json]", "member" : "com.github.agourlay.cornichon.json.CornichonJson.parseString", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#parseString(s:String):Either[com.github.agourlay.cornichon.json.MalformedJsonError[String],io.circe.Json]", "kind" : "def"}, {"label" : "parseJsonUnsafe", "tail" : "(input: A)(arg0: Encoder[A], arg1: Show[A]): Json", "member" : "com.github.agourlay.cornichon.json.CornichonJson.parseJsonUnsafe", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#parseJsonUnsafe[A](input:A)(implicitevidence$3:io.circe.Encoder[A],implicitevidence$4:cats.Show[A]):io.circe.Json", "kind" : "def"}, {"label" : "parseJson", "tail" : "(input: A)(arg0: Encoder[A], arg1: Show[A]): Either[CornichonError, Json]", "member" : "com.github.agourlay.cornichon.json.CornichonJson.parseJson", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#parseJson[A](input:A)(implicitevidence$1:io.circe.Encoder[A],implicitevidence$2:cats.Show[A]):Either[com.github.agourlay.cornichon.core.CornichonError,io.circe.Json]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/github\/agourlay\/cornichon\/json\/CornichonJson.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.json.FieldSegment", "shortDescription" : "", "members_case class" : [{"member" : "com.github.agourlay.cornichon.json.FieldSegment#<init>", "error" : "unsupported entity"}, {"label" : "index", "tail" : ": Option[Int]", "member" : "com.github.agourlay.cornichon.json.FieldSegment.index", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSegment.html#index:Option[Int]", "kind" : "val"}, {"label" : "field", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.FieldSegment.field", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSegment.html#field:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSegment.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSegment.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSegment.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSegment.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSegment.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSegment.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSegment.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSegment.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSegment.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSegment.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSegment.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSegment.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSegment.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSegment.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSegment.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSegment.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/json\/FieldSegment.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.json.FieldSelection", "shortDescription" : "", "members_case class" : [{"label" : "pretty", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.FieldSelection.pretty", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSelection.html#pretty:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.json.FieldSelection#<init>", "error" : "unsupported entity"}, {"label" : "field", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.FieldSelection.field", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSelection.html#field:String", "kind" : "val"}, {"label" : "projection", "tail" : "(): Boolean", "member" : "com.github.agourlay.cornichon.json.JsonPathOperation.projection", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSelection.html#projection:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSelection.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSelection.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSelection.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSelection.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSelection.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSelection.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSelection.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSelection.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSelection.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSelection.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSelection.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSelection.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSelection.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSelection.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSelection.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/FieldSelection.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/json\/FieldSelection.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.json.GqlString", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/json\/GqlString$.html", "members_object" : [{"label" : "gqlEncode", "tail" : ": Encoder[GqlString]", "member" : "com.github.agourlay.cornichon.json.GqlString.gqlEncode", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString$.html#gqlEncode:io.circe.Encoder[com.github.agourlay.cornichon.json.GqlString]", "kind" : "implicit val"}, {"label" : "gqlShow", "tail" : ": Show[GqlString]", "member" : "com.github.agourlay.cornichon.json.GqlString.gqlShow", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString$.html#gqlShow:cats.Show[com.github.agourlay.cornichon.json.GqlString]", "kind" : "implicit val"}, {"label" : "gqlResolvableForm", "tail" : ": Resolvable[GqlString]", "member" : "com.github.agourlay.cornichon.json.GqlString.gqlResolvableForm", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString$.html#gqlResolvableForm:com.github.agourlay.cornichon.resolver.Resolvable[com.github.agourlay.cornichon.json.GqlString]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "com.github.agourlay.cornichon.json.GqlString#<init>", "error" : "unsupported entity"}, {"label" : "input", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.GqlString.input", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString.html#input:String", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "com\/github\/agourlay\/cornichon\/json\/GqlString.html#==(x$1:Any):Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/json\/GqlString.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.json.JsonAssertionErrors", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/json\/JsonAssertionErrors$.html", "members_object" : [{"label" : "arrayContainsError", "tail" : "(expected: Seq[String], sourceArray: String, contains: Boolean): (Boolean) â‡’ String", "member" : "com.github.agourlay.cornichon.json.JsonAssertionErrors.arrayContainsError", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonAssertionErrors$.html#arrayContainsError(expected:Seq[String],sourceArray:String,contains:Boolean):Boolean=>String", "kind" : "def"}, {"label" : "jsonArrayNotEmptyError", "tail" : "(jsonArray: Json): (Boolean) â‡’ String", "member" : "com.github.agourlay.cornichon.json.JsonAssertionErrors.jsonArrayNotEmptyError", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonAssertionErrors$.html#jsonArrayNotEmptyError(jsonArray:io.circe.Json):Boolean=>String", "kind" : "def"}, {"label" : "arraySizeError", "tail" : "(expected: Int, sourceArray: String): (Int) â‡’ String", "member" : "com.github.agourlay.cornichon.json.JsonAssertionErrors.arraySizeError", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonAssertionErrors$.html#arraySizeError(expected:Int,sourceArray:String):Int=>String", "kind" : "def"}, {"label" : "UseIgnoringEach", "tail" : "", "member" : "com.github.agourlay.cornichon.json.JsonAssertionErrors.UseIgnoringEach", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonAssertionErrors$.html#UseIgnoringEach", "kind" : "object"}, {"label" : "InvalidIgnoringConfigError", "tail" : "", "member" : "com.github.agourlay.cornichon.json.JsonAssertionErrors.InvalidIgnoringConfigError", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonAssertionErrors$.html#InvalidIgnoringConfigError", "kind" : "object"}, {"label" : "keyIsAbsentError", "tail" : "(keyName: String, source: String): (Boolean) â‡’ String", "member" : "com.github.agourlay.cornichon.json.JsonAssertionErrors.keyIsAbsentError", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonAssertionErrors$.html#keyIsAbsentError(keyName:String,source:String):Boolean=>String", "kind" : "def"}, {"label" : "keyIsPresentError", "tail" : "(keyName: String, source: String): (Boolean) â‡’ String", "member" : "com.github.agourlay.cornichon.json.JsonAssertionErrors.keyIsPresentError", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonAssertionErrors$.html#keyIsPresentError(keyName:String,source:String):Boolean=>String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonAssertionErrors$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonAssertionErrors$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonAssertionErrors$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonAssertionErrors$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonAssertionErrors$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonAssertionErrors$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonAssertionErrors$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonAssertionErrors$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonAssertionErrors$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonAssertionErrors$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonAssertionErrors$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonAssertionErrors$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonAssertionErrors$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonAssertionErrors$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonAssertionErrors$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonAssertionErrors$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonAssertionErrors$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonAssertionErrors$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonAssertionErrors$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.agourlay.cornichon.json.JsonDsl", "members_trait" : [{"label" : "session_json_values", "tail" : "(k1: String, k2: String): JsonValuesStepBuilder", "member" : "com.github.agourlay.cornichon.json.JsonDsl.session_json_values", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonDsl.html#session_json_values(k1:String,k2:String):com.github.agourlay.cornichon.json.JsonSteps.JsonValuesStepBuilder", "kind" : "def"}, {"label" : "show_key_as_json", "tail" : "(key: String, indice: Option[Int]): DebugStep", "member" : "com.github.agourlay.cornichon.json.JsonDsl.show_key_as_json", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonDsl.html#show_key_as_json(key:String,indice:Option[Int]):com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "root", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.JsonDsl.root", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonDsl.html#root:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonDsl.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonDsl.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonDsl.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonDsl.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonDsl.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonDsl.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonDsl.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonDsl.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonDsl.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonDsl.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonDsl.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonDsl.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonDsl.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonDsl.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonDsl.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonDsl.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonDsl.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonDsl.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonDsl.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/github\/agourlay\/cornichon\/json\/JsonDsl.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.json.JsonError", "members_trait" : [{"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonError.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonError.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonError.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonError.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonError.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "baseErrorMessage", "tail" : "(): String", "member" : "com.github.agourlay.cornichon.core.CornichonError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonError.html#baseErrorMessage:String", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/github\/agourlay\/cornichon\/json\/JsonError.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.json.JsonPath", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/json\/JsonPath$.html", "members_object" : [{"label" : "fromSegments", "tail" : "(segments: List[JsonPathSegment]): JsonPath", "member" : "com.github.agourlay.cornichon.json.JsonPath.fromSegments", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath$.html#fromSegments(segments:List[com.github.agourlay.cornichon.json.JsonPathSegment]):com.github.agourlay.cornichon.json.JsonPath", "kind" : "def"}, {"label" : "run", "tail" : "(path: String, json: String): Either[CornichonError, Json]", "member" : "com.github.agourlay.cornichon.json.JsonPath.run", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath$.html#run(path:String,json:String):scala.util.Either[com.github.agourlay.cornichon.core.CornichonError,io.circe.Json]", "kind" : "def"}, {"label" : "run", "tail" : "(path: String, json: Json): Either[CornichonError, Json]", "member" : "com.github.agourlay.cornichon.json.JsonPath.run", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath$.html#run(path:String,json:io.circe.Json):scala.util.Either[com.github.agourlay.cornichon.core.CornichonError,io.circe.Json]", "kind" : "def"}, {"label" : "parse", "tail" : "(path: String): Either[CornichonError, JsonPath]", "member" : "com.github.agourlay.cornichon.json.JsonPath.parse", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath$.html#parse(path:String):scala.util.Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.json.JsonPath]", "kind" : "def"}, {"label" : "showJsonPath", "tail" : ": Show[JsonPath]", "member" : "com.github.agourlay.cornichon.json.JsonPath.showJsonPath", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath$.html#showJsonPath:cats.Show[com.github.agourlay.cornichon.json.JsonPath]", "kind" : "implicit val"}, {"label" : "root", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.JsonPath.root", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath$.html#root:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "removeFromJson", "tail" : "(input: Json): Json", "member" : "com.github.agourlay.cornichon.json.JsonPath.removeFromJson", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath.html#removeFromJson(input:io.circe.Json):io.circe.Json", "kind" : "def"}, {"label" : "cursors", "tail" : "(input: Json): (List[ACursor], Boolean)", "member" : "com.github.agourlay.cornichon.json.JsonPath.cursors", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath.html#cursors(input:io.circe.Json):(List[io.circe.ACursor],Boolean)", "kind" : "def"}, {"label" : "run", "tail" : "(json: String): Either[CornichonError, Json]", "member" : "com.github.agourlay.cornichon.json.JsonPath.run", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath.html#run(json:String):Either[com.github.agourlay.cornichon.core.CornichonError,io.circe.Json]", "kind" : "def"}, {"label" : "run", "tail" : "(superSet: Json): Json", "member" : "com.github.agourlay.cornichon.json.JsonPath.run", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath.html#run(superSet:io.circe.Json):io.circe.Json", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.json.JsonPath#<init>", "error" : "unsupported entity"}, {"label" : "operations", "tail" : ": List[JsonPathOperation]", "member" : "com.github.agourlay.cornichon.json.JsonPath.operations", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath.html#operations:List[com.github.agourlay.cornichon.json.JsonPathOperation]", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPath.html#==(x$1:Any):Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/json\/JsonPath.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.json.JsonPathError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.JsonPathError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.json.JsonPathError#<init>", "error" : "unsupported entity"}, {"label" : "error", "tail" : ": Throwable", "member" : "com.github.agourlay.cornichon.json.JsonPathError.error", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathError.html#error:Throwable", "kind" : "val"}, {"label" : "input", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.JsonPathError.input", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathError.html#input:String", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/json\/JsonPathError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.json.JsonPathOperation", "members_trait" : [{"label" : "projection", "tail" : "(): Boolean", "member" : "com.github.agourlay.cornichon.json.JsonPathOperation.projection", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathOperation.html#projection:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathOperation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathOperation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathOperation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathOperation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathOperation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathOperation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathOperation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathOperation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathOperation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathOperation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathOperation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathOperation.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathOperation.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathOperation.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathOperation.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathOperation.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathOperation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathOperation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathOperation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "pretty", "tail" : "(): String", "member" : "com.github.agourlay.cornichon.json.JsonPathOperation.pretty", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathOperation.html#pretty:String", "kind" : "abstract def"}, {"label" : "field", "tail" : "(): String", "member" : "com.github.agourlay.cornichon.json.JsonPathOperation.field", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathOperation.html#field:String", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/github\/agourlay\/cornichon\/json\/JsonPathOperation.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.json.JsonPathParser", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser$.html", "members_class" : [{"label" : "__SubParserInput", "tail" : "", "member" : "org.parboiled2.Parser.__SubParserInput", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#__SubParserInputextendsParserInput", "kind" : "class"}, {"label" : "TracingBubbleException", "tail" : "", "member" : "org.parboiled2.Parser.TracingBubbleException", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#TracingBubbleExceptionextendsRuntimeExceptionwithNoStackTrace", "kind" : "class"}, {"label" : "ActionOperator", "tail" : "", "member" : "org.parboiled2.RuleDSLActions.ActionOperator", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#ActionOperator[I<:<?>,O<:<?>,Ops<:<?>]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "WithSeparatedBy", "tail" : "", "member" : "org.parboiled2.RuleDSLCombinators.WithSeparatedBy", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#WithSeparatedBy[I<:<?>,O<:<?>]extendsAnyRef", "kind" : "trait"}, {"label" : "NTimes", "tail" : "", "member" : "org.parboiled2.RuleDSLCombinators.NTimes", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#NTimesextendsAnyRef", "kind" : "sealed trait"}, {"label" : "CharRangeSupport", "tail" : "", "member" : "org.parboiled2.RuleDSLBasics.CharRangeSupport", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#CharRangeSupportextendsAnyRef", "kind" : "sealed trait"}, {"label" : "Digits", "tail" : "(): Rule[HNil, HNil]", "member" : "com.github.agourlay.cornichon.json.JsonPathParser.Digits", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#Digits:org.parboiled2.Rule[shapeless.HNil,shapeless.HNil]", "kind" : "def"}, {"label" : "Number", "tail" : "(): Rule[HNil, ::[Int, HNil]]", "member" : "com.github.agourlay.cornichon.json.JsonPathParser.Number", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#Number:org.parboiled2.Rule[shapeless.HNil,Int::shapeless.HNil]", "kind" : "def"}, {"label" : "FieldWithDot", "tail" : "(): Rule[HNil, ::[String, HNil]]", "member" : "com.github.agourlay.cornichon.json.JsonPathParser.FieldWithDot", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#FieldWithDot:org.parboiled2.Rule[shapeless.HNil,String::shapeless.HNil]", "kind" : "def"}, {"label" : "Field", "tail" : "(): Rule[HNil, ::[String, HNil]]", "member" : "com.github.agourlay.cornichon.json.JsonPathParser.Field", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#Field:org.parboiled2.Rule[shapeless.HNil,String::shapeless.HNil]", "kind" : "def"}, {"label" : "optIndex", "tail" : "(): Rule[HNil, ::[Option[Any], HNil]]", "member" : "com.github.agourlay.cornichon.json.JsonPathParser.optIndex", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#optIndex:org.parboiled2.Rule[shapeless.HNil,Option[Any]::shapeless.HNil]", "kind" : "def"}, {"label" : "SegmentRule", "tail" : "(): Rule[HNil, ::[JsonPathSegment, HNil]]", "member" : "com.github.agourlay.cornichon.json.JsonPathParser.SegmentRule", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#SegmentRule:org.parboiled2.Rule[shapeless.HNil,com.github.agourlay.cornichon.json.JsonPathSegment::shapeless.HNil]", "kind" : "def"}, {"label" : "placeholdersRule", "tail" : "(): Rule[HNil, ::[Seq[JsonPathSegment], HNil]]", "member" : "com.github.agourlay.cornichon.json.JsonPathParser.placeholdersRule", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#placeholdersRule:org.parboiled2.Rule[shapeless.HNil,scala.collection.immutable.Seq[com.github.agourlay.cornichon.json.JsonPathSegment]::shapeless.HNil]", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.json.JsonPathParser#<init>", "error" : "unsupported entity"}, {"label" : "input", "tail" : ": ParserInput", "member" : "com.github.agourlay.cornichon.json.JsonPathParser.input", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#input:org.parboiled2.ParserInput", "kind" : "val"}, {"label" : "__hardFail", "tail" : "(expected: String): Nothing", "member" : "org.parboiled2.Parser.__hardFail", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#__hardFail(expected:String):Nothing", "kind" : "def"}, {"label" : "__matchMapWrapped", "tail" : "(m: Map[String, Any]): Boolean", "member" : "org.parboiled2.Parser.__matchMapWrapped", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#__matchMapWrapped(m:Map[String,Any]):Boolean", "kind" : "def"}, {"label" : "__matchMap", "tail" : "(m: Map[String, Any]): Boolean", "member" : "org.parboiled2.Parser.__matchMap", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#__matchMap(m:Map[String,Any]):Boolean", "kind" : "def"}, {"label" : "__matchNoneOf", "tail" : "(string: String, ix: Int): Boolean", "member" : "org.parboiled2.Parser.__matchNoneOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#__matchNoneOf(string:String,ix:Int):Boolean", "kind" : "final def"}, {"label" : "__matchAnyOf", "tail" : "(string: String, ix: Int): Boolean", "member" : "org.parboiled2.Parser.__matchAnyOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#__matchAnyOf(string:String,ix:Int):Boolean", "kind" : "final def"}, {"label" : "__matchIgnoreCaseStringWrapped", "tail" : "(string: String, ix: Int): Boolean", "member" : "org.parboiled2.Parser.__matchIgnoreCaseStringWrapped", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#__matchIgnoreCaseStringWrapped(string:String,ix:Int):Boolean", "kind" : "final def"}, {"label" : "__matchIgnoreCaseString", "tail" : "(string: String, ix: Int): Boolean", "member" : "org.parboiled2.Parser.__matchIgnoreCaseString", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#__matchIgnoreCaseString(string:String,ix:Int):Boolean", "kind" : "final def"}, {"label" : "__matchStringWrapped", "tail" : "(string: String, ix: Int): Boolean", "member" : "org.parboiled2.Parser.__matchStringWrapped", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#__matchStringWrapped(string:String,ix:Int):Boolean", "kind" : "final def"}, {"label" : "__matchString", "tail" : "(string: String, ix: Int): Boolean", "member" : "org.parboiled2.Parser.__matchString", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#__matchString(string:String,ix:Int):Boolean", "kind" : "final def"}, {"label" : "__push", "tail" : "(value: Any): Boolean", "member" : "org.parboiled2.Parser.__push", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#__push(value:Any):Boolean", "kind" : "def"}, {"label" : "__bubbleUp", "tail" : "(prefix: List[NonTerminal], terminal: Terminal): Nothing", "member" : "org.parboiled2.Parser.__bubbleUp", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#__bubbleUp(prefix:List[org.parboiled2.RuleTrace.NonTerminal],terminal:org.parboiled2.RuleTrace.Terminal):Nothing", "kind" : "def"}, {"label" : "__bubbleUp", "tail" : "(terminal: Terminal): Nothing", "member" : "org.parboiled2.Parser.__bubbleUp", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#__bubbleUp(terminal:org.parboiled2.RuleTrace.Terminal):Nothing", "kind" : "def"}, {"label" : "__registerMismatch", "tail" : "(): Boolean", "member" : "org.parboiled2.Parser.__registerMismatch", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#__registerMismatch():Boolean", "kind" : "def"}, {"label" : "__exitQuiet", "tail" : "(saved: Int): Unit", "member" : "org.parboiled2.Parser.__exitQuiet", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#__exitQuiet(saved:Int):Unit", "kind" : "def"}, {"label" : "__enterQuiet", "tail" : "(): Int", "member" : "org.parboiled2.Parser.__enterQuiet", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#__enterQuiet():Int", "kind" : "def"}, {"label" : "__exitAtomic", "tail" : "(saved: Boolean): Unit", "member" : "org.parboiled2.Parser.__exitAtomic", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#__exitAtomic(saved:Boolean):Unit", "kind" : "def"}, {"label" : "__enterAtomic", "tail" : "(start: Int): Boolean", "member" : "org.parboiled2.Parser.__enterAtomic", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#__enterAtomic(start:Int):Boolean", "kind" : "def"}, {"label" : "__exitNotPredicate", "tail" : "(saved: AnyRef): Unit", "member" : "org.parboiled2.Parser.__exitNotPredicate", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#__exitNotPredicate(saved:AnyRef):Unit", "kind" : "def"}, {"label" : "__enterNotPredicate", "tail" : "(): AnyRef", "member" : "org.parboiled2.Parser.__enterNotPredicate", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#__enterNotPredicate():AnyRef", "kind" : "def"}, {"label" : "__restoreState", "tail" : "(mark: Mark): Unit", "member" : "org.parboiled2.Parser.__restoreState", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#__restoreState(mark:org.parboiled2.Parser.Mark):Unit", "kind" : "def"}, {"label" : "__saveState", "tail" : "(): Mark", "member" : "org.parboiled2.Parser.__saveState", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#__saveState:org.parboiled2.Parser.Mark", "kind" : "def"}, {"label" : "__updateMaxCursor", "tail" : "(): Boolean", "member" : "org.parboiled2.Parser.__updateMaxCursor", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#__updateMaxCursor():Boolean", "kind" : "def"}, {"label" : "__advance", "tail" : "(): Boolean", "member" : "org.parboiled2.Parser.__advance", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#__advance():Boolean", "kind" : "def"}, {"label" : "__run", "tail" : "(rule: â‡’ RuleN[L])(scheme: DeliveryScheme[L]): Result", "member" : "org.parboiled2.Parser.__run", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#__run[L<:shapeless.HList](rule:=>org.parboiled2.RuleN[L])(implicitscheme:org.parboiled2.Parser.DeliveryScheme[L]):scheme.Result", "kind" : "def"}, {"label" : "__inErrorAnalysis", "tail" : "(): Boolean", "member" : "org.parboiled2.Parser.__inErrorAnalysis", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#__inErrorAnalysis:Boolean", "kind" : "def"}, {"label" : "copyStateFrom", "tail" : "(other: Parser, offset: Int): Unit", "member" : "org.parboiled2.Parser.copyStateFrom", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#copyStateFrom(other:org.parboiled2.Parser,offset:Int):Unit", "kind" : "def"}, {"label" : "formatError", "tail" : "(error: ParseError, formatter: ErrorFormatter): String", "member" : "org.parboiled2.Parser.formatError", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#formatError(error:org.parboiled2.ParseError,formatter:org.parboiled2.ErrorFormatter):String", "kind" : "def"}, {"label" : "errorTraceCollectionLimit", "tail" : "(): Int", "member" : "org.parboiled2.Parser.errorTraceCollectionLimit", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#errorTraceCollectionLimit:Int", "kind" : "def"}, {"label" : "valueStack", "tail" : "(): ValueStack", "member" : "org.parboiled2.Parser.valueStack", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#valueStack:org.parboiled2.ValueStack", "kind" : "def"}, {"label" : "charAtRC", "tail" : "(offset: Int): Char", "member" : "org.parboiled2.Parser.charAtRC", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#charAtRC(offset:Int):Char", "kind" : "def"}, {"label" : "charAt", "tail" : "(offset: Int): Char", "member" : "org.parboiled2.Parser.charAt", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#charAt(offset:Int):Char", "kind" : "def"}, {"label" : "lastChar", "tail" : "(): Char", "member" : "org.parboiled2.Parser.lastChar", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#lastChar:Char", "kind" : "def"}, {"label" : "cursorChar", "tail" : "(): Char", "member" : "org.parboiled2.Parser.cursorChar", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#cursorChar:Char", "kind" : "def"}, {"label" : "cursor", "tail" : "(): Int", "member" : "org.parboiled2.Parser.cursor", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#cursor:Int", "kind" : "def"}, {"label" : "namedRule", "tail" : "(name: String)(r: Rule[I, O]): Rule[I, O]", "member" : "org.parboiled2.Parser.namedRule", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#namedRule[I<:shapeless.HList,O<:shapeless.HList](name:String)(r:org.parboiled2.Rule[I,O]):org.parboiled2.Rule[I,O]", "kind" : "macro def"}, {"label" : "rule", "tail" : "(r: Rule[I, O]): Rule[I, O]", "member" : "org.parboiled2.Parser.rule", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#rule[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O]):org.parboiled2.Rule[I,O]", "kind" : "macro def"}, {"label" : "rule2ActionOperator", "tail" : "(r: Rule[I, O])(ops: ActionOps[I, O]): ActionOperator[I, O, Out]", "member" : "org.parboiled2.RuleDSLActions.rule2ActionOperator", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#rule2ActionOperator[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O])(implicitops:org.parboiled2.support.ActionOps[I,O]):RuleDSLActions.this.ActionOperator[I,O,ops.Out]", "kind" : "implicit def"}, {"label" : "drop", "tail" : "(h: HListable[T]): PopRule[Out]", "member" : "org.parboiled2.RuleDSLActions.drop", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#drop[T](implicith:org.parboiled2.support.HListable[T]):org.parboiled2.PopRule[h.Out]", "kind" : "def"}, {"label" : "push", "tail" : "(value: T)(h: HListable[T]): RuleN[Out]", "member" : "org.parboiled2.RuleDSLActions.push", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#push[T](value:T)(implicith:org.parboiled2.support.HListable[T]):org.parboiled2.RuleN[h.Out]", "kind" : "def"}, {"label" : "run", "tail" : "(arg: T)(rr: RunResult[T]): Out", "member" : "org.parboiled2.RuleDSLActions.run", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#run[T](arg:T)(implicitrr:org.parboiled2.support.RunResult[T]):rr.Out", "kind" : "def"}, {"label" : "test", "tail" : "(condition: Boolean): Rule0", "member" : "org.parboiled2.RuleDSLActions.test", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#test(condition:Boolean):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "capture", "tail" : "(r: Rule[I, O])(p: Prepend[O, ::[String, HNil]]): Rule[I, Out]", "member" : "org.parboiled2.RuleDSLActions.capture", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#capture[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O])(implicitp:shapeless.ops.hlist.Prepend[O,String::shapeless.HNil]):org.parboiled2.Rule[I,p.Out]", "kind" : "def"}, {"label" : "rule2WithSeparatedBy", "tail" : "(r: Rule[I, O] with Repeated): WithSeparatedBy[I, O]", "member" : "org.parboiled2.RuleDSLCombinators.rule2WithSeparatedBy", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#rule2WithSeparatedBy[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O]withorg.parboiled2.Repeated):RuleDSLCombinators.this.WithSeparatedBy[I,O]", "kind" : "implicit def"}, {"label" : "range2NTimes", "tail" : "(range: Range): NTimes", "member" : "org.parboiled2.RuleDSLCombinators.range2NTimes", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#range2NTimes(range:Range):RuleDSLCombinators.this.NTimes", "kind" : "implicit def"}, {"label" : "int2NTimes", "tail" : "(i: Int): NTimes", "member" : "org.parboiled2.RuleDSLCombinators.int2NTimes", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#int2NTimes(i:Int):RuleDSLCombinators.this.NTimes", "kind" : "implicit def"}, {"label" : "runSubParser", "tail" : "(f: (ParserInput) â‡’ Rule[I, O]): Rule[I, O]", "member" : "org.parboiled2.RuleDSLCombinators.runSubParser", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#runSubParser[I<:shapeless.HList,O<:shapeless.HList](f:org.parboiled2.ParserInput=>org.parboiled2.Rule[I,O]):org.parboiled2.Rule[I,O]", "kind" : "def"}, {"label" : "quiet", "tail" : "(r: Rule[I, O]): Rule[I, O]", "member" : "org.parboiled2.RuleDSLCombinators.quiet", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#quiet[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O]):org.parboiled2.Rule[I,O]", "kind" : "def"}, {"label" : "atomic", "tail" : "(r: Rule[I, O]): Rule[I, O]", "member" : "org.parboiled2.RuleDSLCombinators.atomic", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#atomic[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O]):org.parboiled2.Rule[I,O]", "kind" : "def"}, {"label" : "&", "tail" : "(r: Rule[_, _]): Rule0", "member" : "org.parboiled2.RuleDSLCombinators.&", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#&(r:org.parboiled2.Rule[_,_]):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "oneOrMore", "tail" : "(r: Rule[I, O])(l: Lifter[Seq, I, O]): Rule[In, StrictOut] with Repeated", "member" : "org.parboiled2.RuleDSLCombinators.oneOrMore", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#oneOrMore[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O])(implicitl:org.parboiled2.support.Lifter[scala.collection.immutable.Seq,I,O]):org.parboiled2.Rule[l.In,l.StrictOut]withorg.parboiled2.Repeated", "kind" : "def"}, {"label" : "zeroOrMore", "tail" : "(r: Rule[I, O])(l: Lifter[Seq, I, O]): Rule[In, OptionalOut] with Repeated", "member" : "org.parboiled2.RuleDSLCombinators.zeroOrMore", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#zeroOrMore[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O])(implicitl:org.parboiled2.support.Lifter[scala.collection.immutable.Seq,I,O]):org.parboiled2.Rule[l.In,l.OptionalOut]withorg.parboiled2.Repeated", "kind" : "def"}, {"label" : "optional", "tail" : "(r: Rule[I, O])(l: Lifter[Option, I, O]): Rule[In, OptionalOut]", "member" : "org.parboiled2.RuleDSLCombinators.optional", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#optional[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O])(implicitl:org.parboiled2.support.Lifter[Option,I,O]):org.parboiled2.Rule[l.In,l.OptionalOut]", "kind" : "def"}, {"label" : "str2CharRangeSupport", "tail" : "(s: String): CharRangeSupport", "member" : "org.parboiled2.RuleDSLBasics.str2CharRangeSupport", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#str2CharRangeSupport(s:String):RuleDSLBasics.this.CharRangeSupport", "kind" : "implicit def"}, {"label" : "failX", "tail" : "(expected: String): Rule[I, O]", "member" : "org.parboiled2.RuleDSLBasics.failX", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#failX[I<:shapeless.HList,O<:shapeless.HList](expected:String):org.parboiled2.Rule[I,O]", "kind" : "def"}, {"label" : "fail", "tail" : "(expected: String): Rule0", "member" : "org.parboiled2.RuleDSLBasics.fail", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#fail(expected:String):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "MISMATCH", "tail" : "(): Rule[I, O]", "member" : "org.parboiled2.RuleDSLBasics.MISMATCH", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#MISMATCH[I<:shapeless.HList,O<:shapeless.HList]:org.parboiled2.Rule[I,O]", "kind" : "def"}, {"label" : "MISMATCH0", "tail" : "(): Rule0", "member" : "org.parboiled2.RuleDSLBasics.MISMATCH0", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#MISMATCH0:org.parboiled2.Rule0", "kind" : "def"}, {"label" : "MATCH", "tail" : "(): Rule0", "member" : "org.parboiled2.RuleDSLBasics.MATCH", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#MATCH:org.parboiled2.Rule0", "kind" : "def"}, {"label" : "EOI", "tail" : "(): Char", "member" : "org.parboiled2.RuleDSLBasics.EOI", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#EOI:Char", "kind" : "def"}, {"label" : "ANY", "tail" : "(): Rule0", "member" : "org.parboiled2.RuleDSLBasics.ANY", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#ANY:org.parboiled2.Rule0", "kind" : "def"}, {"label" : "ignoreCase", "tail" : "(s: String): Rule0", "member" : "org.parboiled2.RuleDSLBasics.ignoreCase", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#ignoreCase(s:String):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "ignoreCase", "tail" : "(c: Char): Rule0", "member" : "org.parboiled2.RuleDSLBasics.ignoreCase", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#ignoreCase(c:Char):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "noneOf", "tail" : "(chars: String): Rule0", "member" : "org.parboiled2.RuleDSLBasics.noneOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#noneOf(chars:String):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "anyOf", "tail" : "(chars: String): Rule0", "member" : "org.parboiled2.RuleDSLBasics.anyOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#anyOf(chars:String):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "valueMap", "tail" : "(m: Map[String, T])(h: HListable[T]): RuleN[Out]", "member" : "org.parboiled2.RuleDSLBasics.valueMap", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#valueMap[T](m:Map[String,T])(implicith:org.parboiled2.support.HListable[T]):org.parboiled2.RuleN[h.Out]", "kind" : "implicit def"}, {"label" : "predicate", "tail" : "(p: CharPredicate): Rule0", "member" : "org.parboiled2.RuleDSLBasics.predicate", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#predicate(p:org.parboiled2.CharPredicate):org.parboiled2.Rule0", "kind" : "implicit def"}, {"label" : "str", "tail" : "(s: String): Rule0", "member" : "org.parboiled2.RuleDSLBasics.str", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#str(s:String):org.parboiled2.Rule0", "kind" : "implicit def"}, {"label" : "ch", "tail" : "(c: Char): Rule0", "member" : "org.parboiled2.RuleDSLBasics.ch", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#ch(c:Char):org.parboiled2.Rule0", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "parseJsonPath", "tail" : "(input: String): Either[CornichonError, List[JsonPathSegment]]", "member" : "com.github.agourlay.cornichon.json.JsonPathParser.parseJsonPath", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser$.html#parseJsonPath(input:String):Either[com.github.agourlay.cornichon.core.CornichonError,List[com.github.agourlay.cornichon.json.JsonPathSegment]]", "kind" : "def"}, {"label" : "notAllowedInField", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.JsonPathParser.notAllowedInField", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser$.html#notAllowedInField:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParser.html", "kind" : "class"}, {"name" : "com.github.agourlay.cornichon.json.JsonPathParsingError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.JsonPathParsingError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParsingError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.json.JsonPathParsingError#<init>", "error" : "unsupported entity"}, {"label" : "error", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.JsonPathParsingError.error", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParsingError.html#error:String", "kind" : "val"}, {"label" : "input", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.JsonPathParsingError.input", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParsingError.html#input:String", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParsingError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParsingError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParsingError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParsingError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParsingError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParsingError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParsingError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParsingError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParsingError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParsingError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParsingError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParsingError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParsingError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParsingError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParsingError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParsingError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParsingError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParsingError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParsingError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/json\/JsonPathParsingError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.json.JsonPathSegment", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathSegment.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathSegment.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathSegment.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathSegment.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathSegment.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathSegment.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathSegment.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathSegment.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathSegment.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathSegment.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathSegment.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathSegment.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathSegment.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathSegment.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathSegment.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathSegment.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathSegment.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathSegment.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonPathSegment.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/github\/agourlay\/cornichon\/json\/JsonPathSegment.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.json.JsonSteps", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/json\/JsonSteps$.html", "members_object" : [{"label" : "JsonArrayStepBuilder", "tail" : "", "member" : "com.github.agourlay.cornichon.json.JsonSteps.JsonArrayStepBuilder", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonSteps$.html#JsonArrayStepBuilderextendsProductwithSerializable", "kind" : "case class"}, {"label" : "JsonStepBuilder", "tail" : "", "member" : "com.github.agourlay.cornichon.json.JsonSteps.JsonStepBuilder", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonSteps$.html#JsonStepBuilderextendsProductwithSerializable", "kind" : "case class"}, {"label" : "JsonValuesStepBuilder", "tail" : "", "member" : "com.github.agourlay.cornichon.json.JsonSteps.JsonValuesStepBuilder", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonSteps$.html#JsonValuesStepBuilderextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonSteps$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonSteps$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonSteps$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonSteps$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonSteps$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonSteps$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonSteps$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonSteps$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonSteps$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonSteps$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonSteps$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonSteps$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonSteps$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonSteps$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonSteps$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonSteps$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonSteps$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonSteps$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/JsonSteps$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.agourlay.cornichon.json.MalformedGraphQLJsonError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.MalformedGraphQLJsonError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedGraphQLJsonError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.json.MalformedGraphQLJsonError#<init>", "error" : "unsupported entity"}, {"label" : "exception", "tail" : ": Throwable", "member" : "com.github.agourlay.cornichon.json.MalformedGraphQLJsonError.exception", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedGraphQLJsonError.html#exception:Throwable", "kind" : "val"}, {"label" : "input", "tail" : ": A", "member" : "com.github.agourlay.cornichon.json.MalformedGraphQLJsonError.input", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedGraphQLJsonError.html#input:A", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedGraphQLJsonError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedGraphQLJsonError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedGraphQLJsonError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedGraphQLJsonError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedGraphQLJsonError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedGraphQLJsonError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedGraphQLJsonError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedGraphQLJsonError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedGraphQLJsonError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedGraphQLJsonError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedGraphQLJsonError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedGraphQLJsonError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedGraphQLJsonError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedGraphQLJsonError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedGraphQLJsonError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedGraphQLJsonError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedGraphQLJsonError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedGraphQLJsonError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedGraphQLJsonError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/json\/MalformedGraphQLJsonError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.json.MalformedJsonError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.MalformedJsonError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedJsonError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.json.MalformedJsonError#<init>", "error" : "unsupported entity"}, {"label" : "message", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.MalformedJsonError.message", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedJsonError.html#message:String", "kind" : "val"}, {"label" : "input", "tail" : ": A", "member" : "com.github.agourlay.cornichon.json.MalformedJsonError.input", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedJsonError.html#input:A", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedJsonError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedJsonError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedJsonError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedJsonError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedJsonError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedJsonError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedJsonError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedJsonError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedJsonError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedJsonError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedJsonError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedJsonError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedJsonError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedJsonError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedJsonError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedJsonError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedJsonError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedJsonError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/MalformedJsonError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/json\/MalformedJsonError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.json.NotAnArrayError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.NotAnArrayError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/json\/NotAnArrayError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.json.NotAnArrayError#<init>", "error" : "unsupported entity"}, {"label" : "badPayload", "tail" : ": A", "member" : "com.github.agourlay.cornichon.json.NotAnArrayError.badPayload", "link" : "com\/github\/agourlay\/cornichon\/json\/NotAnArrayError.html#badPayload:A", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/json\/NotAnArrayError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/json\/NotAnArrayError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/json\/NotAnArrayError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/NotAnArrayError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/NotAnArrayError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/NotAnArrayError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/NotAnArrayError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/NotAnArrayError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/NotAnArrayError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/NotAnArrayError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/NotAnArrayError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/NotAnArrayError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/NotAnArrayError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/NotAnArrayError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/NotAnArrayError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/NotAnArrayError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/NotAnArrayError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/NotAnArrayError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/NotAnArrayError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/json\/NotAnArrayError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.json.NotStringFieldError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.NotStringFieldError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/json\/NotStringFieldError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.json.NotStringFieldError#<init>", "error" : "unsupported entity"}, {"label" : "field", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.NotStringFieldError.field", "link" : "com\/github\/agourlay\/cornichon\/json\/NotStringFieldError.html#field:String", "kind" : "val"}, {"label" : "input", "tail" : ": Json", "member" : "com.github.agourlay.cornichon.json.NotStringFieldError.input", "link" : "com\/github\/agourlay\/cornichon\/json\/NotStringFieldError.html#input:io.circe.Json", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/json\/NotStringFieldError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/json\/NotStringFieldError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/json\/NotStringFieldError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/NotStringFieldError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/NotStringFieldError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/NotStringFieldError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/NotStringFieldError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/NotStringFieldError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/NotStringFieldError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/NotStringFieldError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/NotStringFieldError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/NotStringFieldError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/NotStringFieldError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/NotStringFieldError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/NotStringFieldError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/NotStringFieldError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/NotStringFieldError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/NotStringFieldError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/NotStringFieldError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/json\/NotStringFieldError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.json.PathSelectsNothing", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.PathSelectsNothing.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/json\/PathSelectsNothing.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.json.PathSelectsNothing#<init>", "error" : "unsupported entity"}, {"label" : "input", "tail" : ": Json", "member" : "com.github.agourlay.cornichon.json.PathSelectsNothing.input", "link" : "com\/github\/agourlay\/cornichon\/json\/PathSelectsNothing.html#input:io.circe.Json", "kind" : "val"}, {"label" : "path", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.PathSelectsNothing.path", "link" : "com\/github\/agourlay\/cornichon\/json\/PathSelectsNothing.html#path:String", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/json\/PathSelectsNothing.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/json\/PathSelectsNothing.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/json\/PathSelectsNothing.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/PathSelectsNothing.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/PathSelectsNothing.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/PathSelectsNothing.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/PathSelectsNothing.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/PathSelectsNothing.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/PathSelectsNothing.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/PathSelectsNothing.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/PathSelectsNothing.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/PathSelectsNothing.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/PathSelectsNothing.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/PathSelectsNothing.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/PathSelectsNothing.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/PathSelectsNothing.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/PathSelectsNothing.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/PathSelectsNothing.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/PathSelectsNothing.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/json\/PathSelectsNothing.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.json.RootArrayElementSelection", "shortDescription" : "", "members_case class" : [{"label" : "pretty", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.RootArrayElementSelection.pretty", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayElementSelection.html#pretty:String", "kind" : "val"}, {"label" : "field", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.RootArrayElementSelection.field", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayElementSelection.html#field:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.json.RootArrayElementSelection#<init>", "error" : "unsupported entity"}, {"label" : "indice", "tail" : ": Int", "member" : "com.github.agourlay.cornichon.json.RootArrayElementSelection.indice", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayElementSelection.html#indice:Int", "kind" : "val"}, {"label" : "projection", "tail" : "(): Boolean", "member" : "com.github.agourlay.cornichon.json.JsonPathOperation.projection", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayElementSelection.html#projection:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayElementSelection.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayElementSelection.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayElementSelection.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayElementSelection.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayElementSelection.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayElementSelection.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayElementSelection.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayElementSelection.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayElementSelection.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayElementSelection.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayElementSelection.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayElementSelection.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayElementSelection.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayElementSelection.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayElementSelection.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayElementSelection.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/json\/RootArrayElementSelection.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.json.RootArrayFieldProjection", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/json\/RootArrayFieldProjection$.html", "members_object" : [{"label" : "projection", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.json.RootArrayFieldProjection.projection", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayFieldProjection$.html#projection:Boolean", "kind" : "val"}, {"label" : "pretty", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.RootArrayFieldProjection.pretty", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayFieldProjection$.html#pretty:String", "kind" : "val"}, {"label" : "field", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.RootArrayFieldProjection.field", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayFieldProjection$.html#field:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayFieldProjection$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayFieldProjection$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayFieldProjection$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayFieldProjection$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayFieldProjection$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayFieldProjection$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayFieldProjection$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayFieldProjection$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayFieldProjection$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayFieldProjection$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayFieldProjection$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayFieldProjection$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayFieldProjection$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayFieldProjection$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayFieldProjection$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayFieldProjection$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/RootArrayFieldProjection$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.agourlay.cornichon.json.RootSelection", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/json\/RootSelection$.html", "members_object" : [{"label" : "pretty", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.RootSelection.pretty", "link" : "com\/github\/agourlay\/cornichon\/json\/RootSelection$.html#pretty:String", "kind" : "val"}, {"label" : "field", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.RootSelection.field", "link" : "com\/github\/agourlay\/cornichon\/json\/RootSelection$.html#field:String", "kind" : "val"}, {"label" : "projection", "tail" : "(): Boolean", "member" : "com.github.agourlay.cornichon.json.JsonPathOperation.projection", "link" : "com\/github\/agourlay\/cornichon\/json\/RootSelection$.html#projection:Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/RootSelection$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/RootSelection$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/RootSelection$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/RootSelection$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/RootSelection$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/RootSelection$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/RootSelection$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/RootSelection$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/RootSelection$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/RootSelection$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/RootSelection$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/RootSelection$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/RootSelection$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/json\/RootSelection$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/RootSelection$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/RootSelection$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/RootSelection$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.agourlay.cornichon.json.WhitelistingError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.WhitelistingError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/json\/WhitelistingError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.json.WhitelistingError#<init>", "error" : "unsupported entity"}, {"label" : "source", "tail" : ": Json", "member" : "com.github.agourlay.cornichon.json.WhitelistingError.source", "link" : "com\/github\/agourlay\/cornichon\/json\/WhitelistingError.html#source:io.circe.Json", "kind" : "val"}, {"label" : "missingFields", "tail" : ": Iterable[String]", "member" : "com.github.agourlay.cornichon.json.WhitelistingError.missingFields", "link" : "com\/github\/agourlay\/cornichon\/json\/WhitelistingError.html#missingFields:Iterable[String]", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/json\/WhitelistingError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/json\/WhitelistingError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/json\/WhitelistingError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/json\/WhitelistingError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/json\/WhitelistingError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/json\/WhitelistingError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/json\/WhitelistingError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/json\/WhitelistingError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/json\/WhitelistingError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/json\/WhitelistingError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/WhitelistingError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/WhitelistingError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/json\/WhitelistingError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/json\/WhitelistingError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/json\/WhitelistingError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/json\/WhitelistingError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/json\/WhitelistingError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/WhitelistingError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/json\/WhitelistingError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/json\/WhitelistingError.html", "kind" : "case class"}], "com.github.agourlay.cornichon.scalatest" : [{"name" : "com.github.agourlay.cornichon.scalatest.ScalatestFeature", "members_trait" : [{"label" : "TheyWord", "tail" : "", "member" : "org.scalatest.AsyncWordSpecLike.TheyWord", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#TheyWordextendsAnyRef", "kind" : "final class"}, {"label" : "ItWord", "tail" : "", "member" : "org.scalatest.AsyncWordSpecLike.ItWord", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#ItWordextendsAnyRef", "kind" : "final class"}, {"label" : "AfterWord", "tail" : "", "member" : "org.scalatest.AsyncWordSpecLike.AfterWord", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#AfterWordextendsAnyRef", "kind" : "final class"}, {"label" : "WordSpecStringWrapper", "tail" : "", "member" : "org.scalatest.AsyncWordSpecLike.WordSpecStringWrapper", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#WordSpecStringWrapperextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfTaggedAsInvocationOnString", "tail" : "", "member" : "org.scalatest.AsyncWordSpecLike.ResultOfTaggedAsInvocationOnString", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#ResultOfTaggedAsInvocationOnStringextendsAnyRef", "kind" : "final class"}, {"label" : "StringCanWrapperForVerb", "tail" : "", "member" : "org.scalatest.words.CanVerb.StringCanWrapperForVerb", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#StringCanWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "StringMustWrapperForVerb", "tail" : "", "member" : "org.scalatest.words.MustVerb.StringMustWrapperForVerb", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#StringMustWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "StringShouldWrapperForVerb", "tail" : "", "member" : "org.scalatest.words.ShouldVerb.StringShouldWrapperForVerb", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#StringShouldWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "NoArgAsyncTest", "tail" : "", "member" : "org.scalatest.AsyncTestSuite.NoArgAsyncTest", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#NoArgAsyncTestextends()=>org.scalatest.FutureOutcomewithTestData", "kind" : "trait"}, {"label" : "ResultOfCompleteInvocation", "tail" : "", "member" : "org.scalatest.CompleteLastly.ResultOfCompleteInvocation", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#ResultOfCompleteInvocation[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "com.github.agourlay.cornichon.scalatest.ScalatestFeature.run", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "afterAll", "tail" : "(): Unit", "member" : "com.github.agourlay.cornichon.scalatest.ScalatestFeature.afterAll", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#afterAll():Unit", "kind" : "def"}, {"label" : "beforeAll", "tail" : "(): Unit", "member" : "com.github.agourlay.cornichon.scalatest.ScalatestFeature.beforeAll", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#beforeAll():Unit", "kind" : "def"}, {"label" : "createTestSpecificReporter", "tail" : "(testSorter: DistributedTestSorter, testName: String): Reporter", "member" : "org.scalatest.ParallelTestExecution.createTestSpecificReporter", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#createTestSpecificReporter(testSorter:org.scalatest.DistributedTestSorter,testName:String):org.scalatest.Reporter", "kind" : "def"}, {"label" : "sortingTimeout", "tail" : "(): Span", "member" : "org.scalatest.ParallelTestExecution.sortingTimeout", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#sortingTimeout:org.scalatest.time.Span", "kind" : "def"}, {"label" : "newInstance", "tail" : "(): Suite with ParallelTestExecution", "member" : "org.scalatest.ParallelTestExecution.newInstance", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#newInstance:org.scalatest.Suitewithorg.scalatest.ParallelTestExecution", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.ParallelTestExecution.runTest", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "final def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.ParallelTestExecution.runTests", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "invokeBeforeAllAndAfterAllEvenIfNoTestsAreExpected", "tail" : ": Boolean", "member" : "org.scalatest.BeforeAndAfterAll.invokeBeforeAllAndAfterAllEvenIfNoTestsAreExpected", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#invokeBeforeAllAndAfterAllEvenIfNoTestsAreExpected:Boolean", "kind" : "val"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.AsyncWordSpecLike.testDataFor", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.AsyncWordSpecLike.styleName", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#styleName:String", "kind" : "final val"}, {"label" : "behave", "tail" : ": BehaveWord", "member" : "org.scalatest.AsyncWordSpecLike.behave", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#behave:org.scalatest.words.BehaveWord", "kind" : "val"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.AsyncWordSpecLike.testNames", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#testNames:Set[String]", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.AsyncWordSpecLike.tags", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "subjectWithAfterWordRegistrationFunction", "tail" : ": SubjectWithAfterWordRegistration", "member" : "org.scalatest.AsyncWordSpecLike.subjectWithAfterWordRegistrationFunction", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#subjectWithAfterWordRegistrationFunction:org.scalatest.words.SubjectWithAfterWordRegistration", "kind" : "implicit val"}, {"label" : "subjectRegistrationFunction", "tail" : ": StringVerbBlockRegistration", "member" : "org.scalatest.AsyncWordSpecLike.subjectRegistrationFunction", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#subjectRegistrationFunction:org.scalatest.words.StringVerbBlockRegistration", "kind" : "implicit val"}, {"label" : "convertToWordSpecStringWrapper", "tail" : "(s: String): (ScalatestFeature.this)#WordSpecStringWrapper", "member" : "org.scalatest.AsyncWordSpecLike.convertToWordSpecStringWrapper", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#convertToWordSpecStringWrapper(s:String):AsyncWordSpecLike.this.WordSpecStringWrapper", "kind" : "implicit def"}, {"label" : "they", "tail" : ": (ScalatestFeature.this)#TheyWord", "member" : "org.scalatest.AsyncWordSpecLike.they", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#they:AsyncWordSpecLike.this.TheyWord", "kind" : "val"}, {"label" : "it", "tail" : ": (ScalatestFeature.this)#ItWord", "member" : "org.scalatest.AsyncWordSpecLike.it", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#it:AsyncWordSpecLike.this.ItWord", "kind" : "val"}, {"label" : "afterWord", "tail" : "(text: String): (ScalatestFeature.this)#AfterWord", "member" : "org.scalatest.AsyncWordSpecLike.afterWord", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#afterWord(text:String):AsyncWordSpecLike.this.AfterWord", "kind" : "def"}, {"label" : "registerIgnoredAsyncTest", "tail" : "(testText: String, testTags: Tag*)(testFun: â‡’ Future[Assertion])(pos: Position): Unit", "member" : "org.scalatest.AsyncWordSpecLike.registerIgnoredAsyncTest", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#registerIgnoredAsyncTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>scala.concurrent.Future[org.scalatest.compatible.Assertion])(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerAsyncTest", "tail" : "(testText: String, testTags: Tag*)(testFun: â‡’ Future[Assertion])(pos: Position): Unit", "member" : "org.scalatest.AsyncWordSpecLike.registerAsyncTest", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#registerAsyncTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>scala.concurrent.Future[org.scalatest.compatible.Assertion])(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.AsyncWordSpecLike.markup", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.AsyncWordSpecLike.alert", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.AsyncWordSpecLike.note", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.AsyncWordSpecLike.info", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "convertToStringCanWrapper", "tail" : "(o: String)(position: Position): (ScalatestFeature.this)#StringCanWrapperForVerb", "member" : "org.scalatest.words.CanVerb.convertToStringCanWrapper", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#convertToStringCanWrapper(o:String)(implicitposition:org.scalactic.source.Position):CanVerb.this.StringCanWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertToStringMustWrapperForVerb", "tail" : "(o: String)(position: Position): (ScalatestFeature.this)#StringMustWrapperForVerb", "member" : "org.scalatest.words.MustVerb.convertToStringMustWrapperForVerb", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#convertToStringMustWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):MustVerb.this.StringMustWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertToStringShouldWrapperForVerb", "tail" : "(o: String)(position: Position): (ScalatestFeature.this)#StringShouldWrapperForVerb", "member" : "org.scalatest.words.ShouldVerb.convertToStringShouldWrapperForVerb", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#convertToStringShouldWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):ShouldVerb.this.StringShouldWrapperForVerb", "kind" : "implicit def"}, {"label" : "withFixture", "tail" : "(test: (ScalatestFeature.this)#NoArgAsyncTest): FutureOutcome", "member" : "org.scalatest.AsyncTestSuite.withFixture", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#withFixture(test:AsyncTestSuite.this.NoArgAsyncTest):org.scalatest.FutureOutcome", "kind" : "def"}, {"label" : "parallelAsyncTestExecution", "tail" : "(): Boolean", "member" : "org.scalatest.AsyncTestSuite.parallelAsyncTestExecution", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#parallelAsyncTestExecution:Boolean", "kind" : "def"}, {"label" : "convertAssertionToFutureAssertion", "tail" : "(assertion: Assertion): Future[Assertion]", "member" : "org.scalatest.AsyncTestSuite.convertAssertionToFutureAssertion", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#convertAssertionToFutureAssertion(assertion:org.scalatest.compatible.Assertion):scala.concurrent.Future[org.scalatest.compatible.Assertion]", "kind" : "implicit def"}, {"label" : "executionContext", "tail" : "(): ExecutionContext", "member" : "org.scalatest.AsyncTestSuite.executionContext", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#executionContext:scala.concurrent.ExecutionContext", "kind" : "implicit def"}, {"label" : "complete", "tail" : "(completeBlock: â‡’ T)(futuristic: Futuristic[T]): (ScalatestFeature.this)#ResultOfCompleteInvocation[T]", "member" : "org.scalatest.CompleteLastly.complete", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#complete[T](completeBlock:=>T)(implicitfuturistic:org.scalatest.enablers.Futuristic[T]):CompleteLastly.this.ResultOfCompleteInvocation[T]", "kind" : "def"}, {"label" : "recoverToSucceededIf", "tail" : "(future: Future[Any])(classTag: ClassTag[T], exCtx: ExecutionContext, pos: Position): Future[Assertion]", "member" : "org.scalatest.RecoverMethods.recoverToSucceededIf", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#recoverToSucceededIf[T<:AnyRef](future:scala.concurrent.Future[Any])(implicitclassTag:scala.reflect.ClassTag[T],implicitexCtx:scala.concurrent.ExecutionContext,implicitpos:org.scalactic.source.Position):scala.concurrent.Future[org.scalatest.Assertion]", "kind" : "def"}, {"label" : "recoverToExceptionIf", "tail" : "(future: Future[Any])(classTag: ClassTag[T], exCtx: ExecutionContext, pos: Position): Future[T]", "member" : "org.scalatest.RecoverMethods.recoverToExceptionIf", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#recoverToExceptionIf[T<:AnyRef](future:scala.concurrent.Future[Any])(implicitclassTag:scala.reflect.ClassTag[T],implicitexCtx:scala.concurrent.ExecutionContext,implicitpos:org.scalactic.source.Position):scala.concurrent.Future[T]", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: â‡’ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: â‡’ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: â‡’ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: â‡’ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: â‡’ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": (ScalatestFeature.this)#AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) â‡’ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) â‡’ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) â‡’ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) â‡’ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): (ScalatestFeature.this)#CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): (ScalatestFeature.this)#Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature$.html", "members_object" : [{"label" : "releaseGlobalRuntime", "tail" : "(): Unit", "member" : "com.github.agourlay.cornichon.scalatest.ScalatestFeature.releaseGlobalRuntime", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature$.html#releaseGlobalRuntime():Unit", "kind" : "def"}, {"label" : "reserveGlobalRuntime", "tail" : "(): Unit", "member" : "com.github.agourlay.cornichon.scalatest.ScalatestFeature.reserveGlobalRuntime", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature$.html#reserveGlobalRuntime():Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/github\/agourlay\/cornichon\/scalatest\/ScalatestFeature.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.scalatest.TeamcityReporter", "shortDescription" : "", "members_class" : [{"label" : "apply", "tail" : "(event: Event): Unit", "member" : "com.github.agourlay.cornichon.scalatest.TeamcityReporter.apply", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/TeamcityReporter.html#apply(event:org.scalatest.events.Event):Unit", "kind" : "def"}, {"label" : "tidy", "tail" : "(s: String): String", "member" : "com.github.agourlay.cornichon.scalatest.TeamcityReporter.tidy", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/TeamcityReporter.html#tidy(s:String):String", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.scalatest.TeamcityReporter#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/TeamcityReporter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/TeamcityReporter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/TeamcityReporter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/TeamcityReporter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/TeamcityReporter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/TeamcityReporter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/TeamcityReporter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/TeamcityReporter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/TeamcityReporter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/TeamcityReporter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/TeamcityReporter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/TeamcityReporter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/TeamcityReporter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/TeamcityReporter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/TeamcityReporter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/TeamcityReporter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/TeamcityReporter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/TeamcityReporter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/scalatest\/TeamcityReporter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/github\/agourlay\/cornichon\/scalatest\/TeamcityReporter.html", "kind" : "class"}], "com.github.agourlay.cornichon.steps" : [], "com.github.agourlay.cornichon.resolver" : [{"name" : "com.github.agourlay.cornichon.resolver.AmbiguousKeyDefinition", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.resolver.AmbiguousKeyDefinition.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/resolver\/AmbiguousKeyDefinition.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.resolver.AmbiguousKeyDefinition#<init>", "error" : "unsupported entity"}, {"label" : "key", "tail" : ": String", "member" : "com.github.agourlay.cornichon.resolver.AmbiguousKeyDefinition.key", "link" : "com\/github\/agourlay\/cornichon\/resolver\/AmbiguousKeyDefinition.html#key:String", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/resolver\/AmbiguousKeyDefinition.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/resolver\/AmbiguousKeyDefinition.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/resolver\/AmbiguousKeyDefinition.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/resolver\/AmbiguousKeyDefinition.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/resolver\/AmbiguousKeyDefinition.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/resolver\/AmbiguousKeyDefinition.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/resolver\/AmbiguousKeyDefinition.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/resolver\/AmbiguousKeyDefinition.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/resolver\/AmbiguousKeyDefinition.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/resolver\/AmbiguousKeyDefinition.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/AmbiguousKeyDefinition.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/AmbiguousKeyDefinition.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/AmbiguousKeyDefinition.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/resolver\/AmbiguousKeyDefinition.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/resolver\/AmbiguousKeyDefinition.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/resolver\/AmbiguousKeyDefinition.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/resolver\/AmbiguousKeyDefinition.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/AmbiguousKeyDefinition.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/AmbiguousKeyDefinition.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/resolver\/AmbiguousKeyDefinition.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.resolver.JsonMapper", "shortDescription" : "", "members_case class" : [{"member" : "com.github.agourlay.cornichon.resolver.JsonMapper#<init>", "error" : "unsupported entity"}, {"label" : "transform", "tail" : ": (String) â‡’ String", "member" : "com.github.agourlay.cornichon.resolver.JsonMapper.transform", "link" : "com\/github\/agourlay\/cornichon\/resolver\/JsonMapper.html#transform:String=>String", "kind" : "val"}, {"label" : "jsonPath", "tail" : ": String", "member" : "com.github.agourlay.cornichon.resolver.JsonMapper.jsonPath", "link" : "com\/github\/agourlay\/cornichon\/resolver\/JsonMapper.html#jsonPath:String", "kind" : "val"}, {"label" : "key", "tail" : ": String", "member" : "com.github.agourlay.cornichon.resolver.JsonMapper.key", "link" : "com\/github\/agourlay\/cornichon\/resolver\/JsonMapper.html#key:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/resolver\/JsonMapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/resolver\/JsonMapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/resolver\/JsonMapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/resolver\/JsonMapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/resolver\/JsonMapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/resolver\/JsonMapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/resolver\/JsonMapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/JsonMapper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/JsonMapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/JsonMapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/resolver\/JsonMapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/resolver\/JsonMapper.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/resolver\/JsonMapper.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/resolver\/JsonMapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/JsonMapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/JsonMapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/resolver\/JsonMapper.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.resolver.Mapper", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Mapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Mapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Mapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Mapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Mapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Mapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Mapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Mapper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Mapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Mapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Mapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Mapper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Mapper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Mapper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Mapper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Mapper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Mapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Mapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Mapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/github\/agourlay\/cornichon\/resolver\/Mapper.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.resolver.Placeholder", "shortDescription" : "", "members_case class" : [{"label" : "fullKey", "tail" : ": String", "member" : "com.github.agourlay.cornichon.resolver.Placeholder.fullKey", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Placeholder.html#fullKey:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.resolver.Placeholder#<init>", "error" : "unsupported entity"}, {"label" : "index", "tail" : ": Option[Int]", "member" : "com.github.agourlay.cornichon.resolver.Placeholder.index", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Placeholder.html#index:Option[Int]", "kind" : "val"}, {"label" : "key", "tail" : ": String", "member" : "com.github.agourlay.cornichon.resolver.Placeholder.key", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Placeholder.html#key:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Placeholder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Placeholder.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Placeholder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Placeholder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Placeholder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Placeholder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Placeholder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Placeholder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Placeholder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Placeholder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Placeholder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Placeholder.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Placeholder.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Placeholder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Placeholder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Placeholder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/resolver\/Placeholder.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.resolver.PlaceholderError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.resolver.PlaceholderError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.resolver.PlaceholderError#<init>", "error" : "unsupported entity"}, {"label" : "error", "tail" : ": Throwable", "member" : "com.github.agourlay.cornichon.resolver.PlaceholderError.error", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderError.html#error:Throwable", "kind" : "val"}, {"label" : "input", "tail" : ": String", "member" : "com.github.agourlay.cornichon.resolver.PlaceholderError.input", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderError.html#input:String", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.resolver.PlaceholderParser", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser$.html", "members_class" : [{"label" : "__SubParserInput", "tail" : "", "member" : "org.parboiled2.Parser.__SubParserInput", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#__SubParserInputextendsParserInput", "kind" : "class"}, {"label" : "TracingBubbleException", "tail" : "", "member" : "org.parboiled2.Parser.TracingBubbleException", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#TracingBubbleExceptionextendsRuntimeExceptionwithNoStackTrace", "kind" : "class"}, {"label" : "ActionOperator", "tail" : "", "member" : "org.parboiled2.RuleDSLActions.ActionOperator", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#ActionOperator[I<:<?>,O<:<?>,Ops<:<?>]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "WithSeparatedBy", "tail" : "", "member" : "org.parboiled2.RuleDSLCombinators.WithSeparatedBy", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#WithSeparatedBy[I<:<?>,O<:<?>]extendsAnyRef", "kind" : "trait"}, {"label" : "NTimes", "tail" : "", "member" : "org.parboiled2.RuleDSLCombinators.NTimes", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#NTimesextendsAnyRef", "kind" : "sealed trait"}, {"label" : "CharRangeSupport", "tail" : "", "member" : "org.parboiled2.RuleDSLBasics.CharRangeSupport", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#CharRangeSupportextendsAnyRef", "kind" : "sealed trait"}, {"label" : "Digits", "tail" : "(): Rule[HNil, HNil]", "member" : "com.github.agourlay.cornichon.resolver.PlaceholderParser.Digits", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#Digits:org.parboiled2.Rule[shapeless.HNil,shapeless.HNil]", "kind" : "def"}, {"label" : "Number", "tail" : "(): Rule[HNil, ::[Int, HNil]]", "member" : "com.github.agourlay.cornichon.resolver.PlaceholderParser.Number", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#Number:org.parboiled2.Rule[shapeless.HNil,Int::shapeless.HNil]", "kind" : "def"}, {"label" : "Ignore", "tail" : "(): Rule[HNil, HNil]", "member" : "com.github.agourlay.cornichon.resolver.PlaceholderParser.Ignore", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#Ignore:org.parboiled2.Rule[shapeless.HNil,shapeless.HNil]", "kind" : "def"}, {"label" : "PlaceholderTXT", "tail" : "(): Rule[HNil, ::[String, HNil]]", "member" : "com.github.agourlay.cornichon.resolver.PlaceholderParser.PlaceholderTXT", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#PlaceholderTXT:org.parboiled2.Rule[shapeless.HNil,String::shapeless.HNil]", "kind" : "def"}, {"label" : "optIndex", "tail" : "(): Rule[HNil, ::[Option[Int], HNil]]", "member" : "com.github.agourlay.cornichon.resolver.PlaceholderParser.optIndex", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#optIndex:org.parboiled2.Rule[shapeless.HNil,Option[Int]::shapeless.HNil]", "kind" : "def"}, {"label" : "PlaceholderRule", "tail" : "(): Rule[HNil, ::[Placeholder, HNil]]", "member" : "com.github.agourlay.cornichon.resolver.PlaceholderParser.PlaceholderRule", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#PlaceholderRule:org.parboiled2.Rule[shapeless.HNil,com.github.agourlay.cornichon.resolver.Placeholder::shapeless.HNil]", "kind" : "def"}, {"label" : "placeholdersRule", "tail" : "(): Rule[HNil, ::[Seq[Placeholder], HNil]]", "member" : "com.github.agourlay.cornichon.resolver.PlaceholderParser.placeholdersRule", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#placeholdersRule:org.parboiled2.Rule[shapeless.HNil,scala.collection.immutable.Seq[com.github.agourlay.cornichon.resolver.Placeholder]::shapeless.HNil]", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.resolver.PlaceholderParser#<init>", "error" : "unsupported entity"}, {"label" : "input", "tail" : ": ParserInput", "member" : "com.github.agourlay.cornichon.resolver.PlaceholderParser.input", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#input:org.parboiled2.ParserInput", "kind" : "val"}, {"label" : "__hardFail", "tail" : "(expected: String): Nothing", "member" : "org.parboiled2.Parser.__hardFail", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#__hardFail(expected:String):Nothing", "kind" : "def"}, {"label" : "__matchMapWrapped", "tail" : "(m: Map[String, Any]): Boolean", "member" : "org.parboiled2.Parser.__matchMapWrapped", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#__matchMapWrapped(m:Map[String,Any]):Boolean", "kind" : "def"}, {"label" : "__matchMap", "tail" : "(m: Map[String, Any]): Boolean", "member" : "org.parboiled2.Parser.__matchMap", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#__matchMap(m:Map[String,Any]):Boolean", "kind" : "def"}, {"label" : "__matchNoneOf", "tail" : "(string: String, ix: Int): Boolean", "member" : "org.parboiled2.Parser.__matchNoneOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#__matchNoneOf(string:String,ix:Int):Boolean", "kind" : "final def"}, {"label" : "__matchAnyOf", "tail" : "(string: String, ix: Int): Boolean", "member" : "org.parboiled2.Parser.__matchAnyOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#__matchAnyOf(string:String,ix:Int):Boolean", "kind" : "final def"}, {"label" : "__matchIgnoreCaseStringWrapped", "tail" : "(string: String, ix: Int): Boolean", "member" : "org.parboiled2.Parser.__matchIgnoreCaseStringWrapped", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#__matchIgnoreCaseStringWrapped(string:String,ix:Int):Boolean", "kind" : "final def"}, {"label" : "__matchIgnoreCaseString", "tail" : "(string: String, ix: Int): Boolean", "member" : "org.parboiled2.Parser.__matchIgnoreCaseString", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#__matchIgnoreCaseString(string:String,ix:Int):Boolean", "kind" : "final def"}, {"label" : "__matchStringWrapped", "tail" : "(string: String, ix: Int): Boolean", "member" : "org.parboiled2.Parser.__matchStringWrapped", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#__matchStringWrapped(string:String,ix:Int):Boolean", "kind" : "final def"}, {"label" : "__matchString", "tail" : "(string: String, ix: Int): Boolean", "member" : "org.parboiled2.Parser.__matchString", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#__matchString(string:String,ix:Int):Boolean", "kind" : "final def"}, {"label" : "__push", "tail" : "(value: Any): Boolean", "member" : "org.parboiled2.Parser.__push", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#__push(value:Any):Boolean", "kind" : "def"}, {"label" : "__bubbleUp", "tail" : "(prefix: List[NonTerminal], terminal: Terminal): Nothing", "member" : "org.parboiled2.Parser.__bubbleUp", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#__bubbleUp(prefix:List[org.parboiled2.RuleTrace.NonTerminal],terminal:org.parboiled2.RuleTrace.Terminal):Nothing", "kind" : "def"}, {"label" : "__bubbleUp", "tail" : "(terminal: Terminal): Nothing", "member" : "org.parboiled2.Parser.__bubbleUp", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#__bubbleUp(terminal:org.parboiled2.RuleTrace.Terminal):Nothing", "kind" : "def"}, {"label" : "__registerMismatch", "tail" : "(): Boolean", "member" : "org.parboiled2.Parser.__registerMismatch", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#__registerMismatch():Boolean", "kind" : "def"}, {"label" : "__exitQuiet", "tail" : "(saved: Int): Unit", "member" : "org.parboiled2.Parser.__exitQuiet", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#__exitQuiet(saved:Int):Unit", "kind" : "def"}, {"label" : "__enterQuiet", "tail" : "(): Int", "member" : "org.parboiled2.Parser.__enterQuiet", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#__enterQuiet():Int", "kind" : "def"}, {"label" : "__exitAtomic", "tail" : "(saved: Boolean): Unit", "member" : "org.parboiled2.Parser.__exitAtomic", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#__exitAtomic(saved:Boolean):Unit", "kind" : "def"}, {"label" : "__enterAtomic", "tail" : "(start: Int): Boolean", "member" : "org.parboiled2.Parser.__enterAtomic", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#__enterAtomic(start:Int):Boolean", "kind" : "def"}, {"label" : "__exitNotPredicate", "tail" : "(saved: AnyRef): Unit", "member" : "org.parboiled2.Parser.__exitNotPredicate", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#__exitNotPredicate(saved:AnyRef):Unit", "kind" : "def"}, {"label" : "__enterNotPredicate", "tail" : "(): AnyRef", "member" : "org.parboiled2.Parser.__enterNotPredicate", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#__enterNotPredicate():AnyRef", "kind" : "def"}, {"label" : "__restoreState", "tail" : "(mark: Mark): Unit", "member" : "org.parboiled2.Parser.__restoreState", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#__restoreState(mark:org.parboiled2.Parser.Mark):Unit", "kind" : "def"}, {"label" : "__saveState", "tail" : "(): Mark", "member" : "org.parboiled2.Parser.__saveState", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#__saveState:org.parboiled2.Parser.Mark", "kind" : "def"}, {"label" : "__updateMaxCursor", "tail" : "(): Boolean", "member" : "org.parboiled2.Parser.__updateMaxCursor", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#__updateMaxCursor():Boolean", "kind" : "def"}, {"label" : "__advance", "tail" : "(): Boolean", "member" : "org.parboiled2.Parser.__advance", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#__advance():Boolean", "kind" : "def"}, {"label" : "__run", "tail" : "(rule: â‡’ RuleN[L])(scheme: DeliveryScheme[L]): Result", "member" : "org.parboiled2.Parser.__run", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#__run[L<:shapeless.HList](rule:=>org.parboiled2.RuleN[L])(implicitscheme:org.parboiled2.Parser.DeliveryScheme[L]):scheme.Result", "kind" : "def"}, {"label" : "__inErrorAnalysis", "tail" : "(): Boolean", "member" : "org.parboiled2.Parser.__inErrorAnalysis", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#__inErrorAnalysis:Boolean", "kind" : "def"}, {"label" : "copyStateFrom", "tail" : "(other: Parser, offset: Int): Unit", "member" : "org.parboiled2.Parser.copyStateFrom", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#copyStateFrom(other:org.parboiled2.Parser,offset:Int):Unit", "kind" : "def"}, {"label" : "formatError", "tail" : "(error: ParseError, formatter: ErrorFormatter): String", "member" : "org.parboiled2.Parser.formatError", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#formatError(error:org.parboiled2.ParseError,formatter:org.parboiled2.ErrorFormatter):String", "kind" : "def"}, {"label" : "errorTraceCollectionLimit", "tail" : "(): Int", "member" : "org.parboiled2.Parser.errorTraceCollectionLimit", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#errorTraceCollectionLimit:Int", "kind" : "def"}, {"label" : "valueStack", "tail" : "(): ValueStack", "member" : "org.parboiled2.Parser.valueStack", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#valueStack:org.parboiled2.ValueStack", "kind" : "def"}, {"label" : "charAtRC", "tail" : "(offset: Int): Char", "member" : "org.parboiled2.Parser.charAtRC", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#charAtRC(offset:Int):Char", "kind" : "def"}, {"label" : "charAt", "tail" : "(offset: Int): Char", "member" : "org.parboiled2.Parser.charAt", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#charAt(offset:Int):Char", "kind" : "def"}, {"label" : "lastChar", "tail" : "(): Char", "member" : "org.parboiled2.Parser.lastChar", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#lastChar:Char", "kind" : "def"}, {"label" : "cursorChar", "tail" : "(): Char", "member" : "org.parboiled2.Parser.cursorChar", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#cursorChar:Char", "kind" : "def"}, {"label" : "cursor", "tail" : "(): Int", "member" : "org.parboiled2.Parser.cursor", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#cursor:Int", "kind" : "def"}, {"label" : "namedRule", "tail" : "(name: String)(r: Rule[I, O]): Rule[I, O]", "member" : "org.parboiled2.Parser.namedRule", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#namedRule[I<:shapeless.HList,O<:shapeless.HList](name:String)(r:org.parboiled2.Rule[I,O]):org.parboiled2.Rule[I,O]", "kind" : "macro def"}, {"label" : "rule", "tail" : "(r: Rule[I, O]): Rule[I, O]", "member" : "org.parboiled2.Parser.rule", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#rule[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O]):org.parboiled2.Rule[I,O]", "kind" : "macro def"}, {"label" : "rule2ActionOperator", "tail" : "(r: Rule[I, O])(ops: ActionOps[I, O]): ActionOperator[I, O, Out]", "member" : "org.parboiled2.RuleDSLActions.rule2ActionOperator", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#rule2ActionOperator[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O])(implicitops:org.parboiled2.support.ActionOps[I,O]):RuleDSLActions.this.ActionOperator[I,O,ops.Out]", "kind" : "implicit def"}, {"label" : "drop", "tail" : "(h: HListable[T]): PopRule[Out]", "member" : "org.parboiled2.RuleDSLActions.drop", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#drop[T](implicith:org.parboiled2.support.HListable[T]):org.parboiled2.PopRule[h.Out]", "kind" : "def"}, {"label" : "push", "tail" : "(value: T)(h: HListable[T]): RuleN[Out]", "member" : "org.parboiled2.RuleDSLActions.push", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#push[T](value:T)(implicith:org.parboiled2.support.HListable[T]):org.parboiled2.RuleN[h.Out]", "kind" : "def"}, {"label" : "run", "tail" : "(arg: T)(rr: RunResult[T]): Out", "member" : "org.parboiled2.RuleDSLActions.run", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#run[T](arg:T)(implicitrr:org.parboiled2.support.RunResult[T]):rr.Out", "kind" : "def"}, {"label" : "test", "tail" : "(condition: Boolean): Rule0", "member" : "org.parboiled2.RuleDSLActions.test", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#test(condition:Boolean):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "capture", "tail" : "(r: Rule[I, O])(p: Prepend[O, ::[String, HNil]]): Rule[I, Out]", "member" : "org.parboiled2.RuleDSLActions.capture", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#capture[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O])(implicitp:shapeless.ops.hlist.Prepend[O,String::shapeless.HNil]):org.parboiled2.Rule[I,p.Out]", "kind" : "def"}, {"label" : "rule2WithSeparatedBy", "tail" : "(r: Rule[I, O] with Repeated): WithSeparatedBy[I, O]", "member" : "org.parboiled2.RuleDSLCombinators.rule2WithSeparatedBy", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#rule2WithSeparatedBy[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O]withorg.parboiled2.Repeated):RuleDSLCombinators.this.WithSeparatedBy[I,O]", "kind" : "implicit def"}, {"label" : "range2NTimes", "tail" : "(range: Range): NTimes", "member" : "org.parboiled2.RuleDSLCombinators.range2NTimes", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#range2NTimes(range:Range):RuleDSLCombinators.this.NTimes", "kind" : "implicit def"}, {"label" : "int2NTimes", "tail" : "(i: Int): NTimes", "member" : "org.parboiled2.RuleDSLCombinators.int2NTimes", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#int2NTimes(i:Int):RuleDSLCombinators.this.NTimes", "kind" : "implicit def"}, {"label" : "runSubParser", "tail" : "(f: (ParserInput) â‡’ Rule[I, O]): Rule[I, O]", "member" : "org.parboiled2.RuleDSLCombinators.runSubParser", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#runSubParser[I<:shapeless.HList,O<:shapeless.HList](f:org.parboiled2.ParserInput=>org.parboiled2.Rule[I,O]):org.parboiled2.Rule[I,O]", "kind" : "def"}, {"label" : "quiet", "tail" : "(r: Rule[I, O]): Rule[I, O]", "member" : "org.parboiled2.RuleDSLCombinators.quiet", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#quiet[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O]):org.parboiled2.Rule[I,O]", "kind" : "def"}, {"label" : "atomic", "tail" : "(r: Rule[I, O]): Rule[I, O]", "member" : "org.parboiled2.RuleDSLCombinators.atomic", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#atomic[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O]):org.parboiled2.Rule[I,O]", "kind" : "def"}, {"label" : "&", "tail" : "(r: Rule[_, _]): Rule0", "member" : "org.parboiled2.RuleDSLCombinators.&", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#&(r:org.parboiled2.Rule[_,_]):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "oneOrMore", "tail" : "(r: Rule[I, O])(l: Lifter[Seq, I, O]): Rule[In, StrictOut] with Repeated", "member" : "org.parboiled2.RuleDSLCombinators.oneOrMore", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#oneOrMore[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O])(implicitl:org.parboiled2.support.Lifter[scala.collection.immutable.Seq,I,O]):org.parboiled2.Rule[l.In,l.StrictOut]withorg.parboiled2.Repeated", "kind" : "def"}, {"label" : "zeroOrMore", "tail" : "(r: Rule[I, O])(l: Lifter[Seq, I, O]): Rule[In, OptionalOut] with Repeated", "member" : "org.parboiled2.RuleDSLCombinators.zeroOrMore", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#zeroOrMore[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O])(implicitl:org.parboiled2.support.Lifter[scala.collection.immutable.Seq,I,O]):org.parboiled2.Rule[l.In,l.OptionalOut]withorg.parboiled2.Repeated", "kind" : "def"}, {"label" : "optional", "tail" : "(r: Rule[I, O])(l: Lifter[Option, I, O]): Rule[In, OptionalOut]", "member" : "org.parboiled2.RuleDSLCombinators.optional", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#optional[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O])(implicitl:org.parboiled2.support.Lifter[Option,I,O]):org.parboiled2.Rule[l.In,l.OptionalOut]", "kind" : "def"}, {"label" : "str2CharRangeSupport", "tail" : "(s: String): CharRangeSupport", "member" : "org.parboiled2.RuleDSLBasics.str2CharRangeSupport", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#str2CharRangeSupport(s:String):RuleDSLBasics.this.CharRangeSupport", "kind" : "implicit def"}, {"label" : "failX", "tail" : "(expected: String): Rule[I, O]", "member" : "org.parboiled2.RuleDSLBasics.failX", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#failX[I<:shapeless.HList,O<:shapeless.HList](expected:String):org.parboiled2.Rule[I,O]", "kind" : "def"}, {"label" : "fail", "tail" : "(expected: String): Rule0", "member" : "org.parboiled2.RuleDSLBasics.fail", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#fail(expected:String):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "MISMATCH", "tail" : "(): Rule[I, O]", "member" : "org.parboiled2.RuleDSLBasics.MISMATCH", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#MISMATCH[I<:shapeless.HList,O<:shapeless.HList]:org.parboiled2.Rule[I,O]", "kind" : "def"}, {"label" : "MISMATCH0", "tail" : "(): Rule0", "member" : "org.parboiled2.RuleDSLBasics.MISMATCH0", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#MISMATCH0:org.parboiled2.Rule0", "kind" : "def"}, {"label" : "MATCH", "tail" : "(): Rule0", "member" : "org.parboiled2.RuleDSLBasics.MATCH", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#MATCH:org.parboiled2.Rule0", "kind" : "def"}, {"label" : "EOI", "tail" : "(): Char", "member" : "org.parboiled2.RuleDSLBasics.EOI", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#EOI:Char", "kind" : "def"}, {"label" : "ANY", "tail" : "(): Rule0", "member" : "org.parboiled2.RuleDSLBasics.ANY", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#ANY:org.parboiled2.Rule0", "kind" : "def"}, {"label" : "ignoreCase", "tail" : "(s: String): Rule0", "member" : "org.parboiled2.RuleDSLBasics.ignoreCase", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#ignoreCase(s:String):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "ignoreCase", "tail" : "(c: Char): Rule0", "member" : "org.parboiled2.RuleDSLBasics.ignoreCase", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#ignoreCase(c:Char):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "noneOf", "tail" : "(chars: String): Rule0", "member" : "org.parboiled2.RuleDSLBasics.noneOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#noneOf(chars:String):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "anyOf", "tail" : "(chars: String): Rule0", "member" : "org.parboiled2.RuleDSLBasics.anyOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#anyOf(chars:String):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "valueMap", "tail" : "(m: Map[String, T])(h: HListable[T]): RuleN[Out]", "member" : "org.parboiled2.RuleDSLBasics.valueMap", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#valueMap[T](m:Map[String,T])(implicith:org.parboiled2.support.HListable[T]):org.parboiled2.RuleN[h.Out]", "kind" : "implicit def"}, {"label" : "predicate", "tail" : "(p: CharPredicate): Rule0", "member" : "org.parboiled2.RuleDSLBasics.predicate", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#predicate(p:org.parboiled2.CharPredicate):org.parboiled2.Rule0", "kind" : "implicit def"}, {"label" : "str", "tail" : "(s: String): Rule0", "member" : "org.parboiled2.RuleDSLBasics.str", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#str(s:String):org.parboiled2.Rule0", "kind" : "implicit def"}, {"label" : "ch", "tail" : "(c: Char): Rule0", "member" : "org.parboiled2.RuleDSLBasics.ch", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#ch(c:Char):org.parboiled2.Rule0", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "parse", "tail" : "(input: String): Either[CornichonError, List[Placeholder]]", "member" : "com.github.agourlay.cornichon.resolver.PlaceholderParser.parse", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser$.html#parse(input:String):Either[com.github.agourlay.cornichon.core.CornichonError,List[com.github.agourlay.cornichon.resolver.Placeholder]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParser.html", "kind" : "class"}, {"name" : "com.github.agourlay.cornichon.resolver.PlaceholderParsingError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.resolver.PlaceholderParsingError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParsingError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.resolver.PlaceholderParsingError#<init>", "error" : "unsupported entity"}, {"label" : "error", "tail" : ": String", "member" : "com.github.agourlay.cornichon.resolver.PlaceholderParsingError.error", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParsingError.html#error:String", "kind" : "val"}, {"label" : "input", "tail" : ": String", "member" : "com.github.agourlay.cornichon.resolver.PlaceholderParsingError.input", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParsingError.html#input:String", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParsingError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParsingError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParsingError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParsingError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParsingError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParsingError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParsingError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParsingError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParsingError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParsingError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParsingError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParsingError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParsingError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParsingError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParsingError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParsingError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParsingError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParsingError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParsingError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderParsingError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.resolver.PlaceholderResolver", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver$.html", "members_class" : [{"label" : "fillPlaceholders", "tail" : "(params: List[(String, String)])(session: Session): Either[CornichonError, List[(String, String)]]", "member" : "com.github.agourlay.cornichon.resolver.PlaceholderResolver.fillPlaceholders", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html#fillPlaceholders(params:List[(String,String)])(session:com.github.agourlay.cornichon.core.Session):Either[com.github.agourlay.cornichon.core.CornichonError,List[(String,String)]]", "kind" : "def"}, {"label" : "fillPlaceholders", "tail" : "(input: String)(session: Session): Either[CornichonError, String]", "member" : "com.github.agourlay.cornichon.resolver.PlaceholderResolver.fillPlaceholders", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html#fillPlaceholders(input:String)(session:com.github.agourlay.cornichon.core.Session):scala.util.Either[com.github.agourlay.cornichon.core.CornichonError,String]", "kind" : "def"}, {"label" : "fillPlaceholders", "tail" : "(input: A)(session: Session)(arg0: Resolvable[A]): Either[CornichonError, A]", "member" : "com.github.agourlay.cornichon.resolver.PlaceholderResolver.fillPlaceholders", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html#fillPlaceholders[A](input:A)(session:com.github.agourlay.cornichon.core.Session)(implicitevidence$1:com.github.agourlay.cornichon.resolver.Resolvable[A]):Either[com.github.agourlay.cornichon.core.CornichonError,A]", "kind" : "def"}, {"label" : "applyMapper", "tail" : "(m: Mapper, session: Session, ph: Placeholder): Either[CornichonError, String]", "member" : "com.github.agourlay.cornichon.resolver.PlaceholderResolver.applyMapper", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html#applyMapper(m:com.github.agourlay.cornichon.resolver.Mapper,session:com.github.agourlay.cornichon.core.Session,ph:com.github.agourlay.cornichon.resolver.Placeholder):Either[com.github.agourlay.cornichon.core.CornichonError,String]", "kind" : "def"}, {"label" : "builtInPlaceholders", "tail" : "(): PartialFunction[String, String]", "member" : "com.github.agourlay.cornichon.resolver.PlaceholderResolver.builtInPlaceholders", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html#builtInPlaceholders:PartialFunction[String,String]", "kind" : "def"}, {"label" : "resolvePlaceholder", "tail" : "(ph: Placeholder)(session: Session): Either[CornichonError, String]", "member" : "com.github.agourlay.cornichon.resolver.PlaceholderResolver.resolvePlaceholder", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html#resolvePlaceholder(ph:com.github.agourlay.cornichon.resolver.Placeholder)(session:com.github.agourlay.cornichon.core.Session):Either[com.github.agourlay.cornichon.core.CornichonError,String]", "kind" : "def"}, {"label" : "findPlaceholders", "tail" : "(input: String): Either[CornichonError, List[Placeholder]]", "member" : "com.github.agourlay.cornichon.resolver.PlaceholderResolver.findPlaceholders", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html#findPlaceholders(input:String):Either[com.github.agourlay.cornichon.core.CornichonError,List[com.github.agourlay.cornichon.resolver.Placeholder]]", "kind" : "def"}, {"label" : "r", "tail" : ": Random", "member" : "com.github.agourlay.cornichon.resolver.PlaceholderResolver.r", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html#r:scala.util.Random", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.resolver.PlaceholderResolver#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "withoutExtractor", "tail" : "(): PlaceholderResolver", "member" : "com.github.agourlay.cornichon.resolver.PlaceholderResolver.withoutExtractor", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver$.html#withoutExtractor():com.github.agourlay.cornichon.resolver.PlaceholderResolver", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/github\/agourlay\/cornichon\/resolver\/PlaceholderResolver.html", "kind" : "class"}, {"name" : "com.github.agourlay.cornichon.resolver.Resolvable", "members_trait" : [{"label" : "transformResolvableForm", "tail" : "(r: A)(transf: (String) â‡’ String): A", "member" : "com.github.agourlay.cornichon.resolver.Resolvable.transformResolvableForm", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable.html#transformResolvableForm(r:A)(transf:String=>String):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "fromResolvableForm", "tail" : "(r: String): A", "member" : "com.github.agourlay.cornichon.resolver.Resolvable.fromResolvableForm", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable.html#fromResolvableForm(r:String):A", "kind" : "abstract def"}, {"label" : "toResolvableForm", "tail" : "(r: A): String", "member" : "com.github.agourlay.cornichon.resolver.Resolvable.toResolvableForm", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable.html#toResolvableForm(r:A):String", "kind" : "abstract def"}], "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html", "members_object" : [{"label" : "jsonResolvable", "tail" : ": Resolvable[Json]", "member" : "com.github.agourlay.cornichon.resolver.Resolvable.jsonResolvable", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#jsonResolvable:com.github.agourlay.cornichon.resolver.Resolvable[io.circe.Json]", "kind" : "implicit val"}, {"label" : "uuidResolvable", "tail" : ": Resolvable[UUID]", "member" : "com.github.agourlay.cornichon.resolver.Resolvable.uuidResolvable", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#uuidResolvable:com.github.agourlay.cornichon.resolver.Resolvable[java.util.UUID]", "kind" : "implicit val"}, {"label" : "bigDecResolvable", "tail" : ": Resolvable[BigDecimal]", "member" : "com.github.agourlay.cornichon.resolver.Resolvable.bigDecResolvable", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#bigDecResolvable:com.github.agourlay.cornichon.resolver.Resolvable[BigDecimal]", "kind" : "implicit val"}, {"label" : "longResolvable", "tail" : ": Resolvable[Long]", "member" : "com.github.agourlay.cornichon.resolver.Resolvable.longResolvable", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#longResolvable:com.github.agourlay.cornichon.resolver.Resolvable[Long]", "kind" : "implicit val"}, {"label" : "floatResolvable", "tail" : ": Resolvable[Float]", "member" : "com.github.agourlay.cornichon.resolver.Resolvable.floatResolvable", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#floatResolvable:com.github.agourlay.cornichon.resolver.Resolvable[Float]", "kind" : "implicit val"}, {"label" : "doubleResolvable", "tail" : ": Resolvable[Double]", "member" : "com.github.agourlay.cornichon.resolver.Resolvable.doubleResolvable", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#doubleResolvable:com.github.agourlay.cornichon.resolver.Resolvable[Double]", "kind" : "implicit val"}, {"label" : "shortResolvable", "tail" : ": Resolvable[Short]", "member" : "com.github.agourlay.cornichon.resolver.Resolvable.shortResolvable", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#shortResolvable:com.github.agourlay.cornichon.resolver.Resolvable[Short]", "kind" : "implicit val"}, {"label" : "intResolvable", "tail" : ": Resolvable[Int]", "member" : "com.github.agourlay.cornichon.resolver.Resolvable.intResolvable", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#intResolvable:com.github.agourlay.cornichon.resolver.Resolvable[Int]", "kind" : "implicit val"}, {"label" : "booleanResolvable", "tail" : ": Resolvable[Boolean]", "member" : "com.github.agourlay.cornichon.resolver.Resolvable.booleanResolvable", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#booleanResolvable:com.github.agourlay.cornichon.resolver.Resolvable[Boolean]", "kind" : "implicit val"}, {"label" : "stringResolvable", "tail" : ": Resolvable[String]", "member" : "com.github.agourlay.cornichon.resolver.Resolvable.stringResolvable", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#stringResolvable:com.github.agourlay.cornichon.resolver.Resolvable[String]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(resolvable: Resolvable[A]): Resolvable[A]", "member" : "com.github.agourlay.cornichon.resolver.Resolvable.apply", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#apply[A](implicitresolvable:com.github.agourlay.cornichon.resolver.Resolvable[A]):com.github.agourlay.cornichon.resolver.Resolvable[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/github\/agourlay\/cornichon\/resolver\/Resolvable.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.resolver.SimpleMapper", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper$.html", "members_object" : [{"label" : "fromFct", "tail" : "(generator: () â‡’ String): SimpleMapper", "member" : "com.github.agourlay.cornichon.resolver.SimpleMapper.fromFct", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper$.html#fromFct(generator:()=>String):com.github.agourlay.cornichon.resolver.SimpleMapper", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "com.github.agourlay.cornichon.resolver.SimpleMapper#<init>", "error" : "unsupported entity"}, {"label" : "generator", "tail" : ": () â‡’ String", "member" : "com.github.agourlay.cornichon.resolver.SimpleMapper.generator", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper.html#generator:()=>String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapper.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.resolver.SimpleMapperError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.resolver.SimpleMapperError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapperError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.resolver.SimpleMapperError#<init>", "error" : "unsupported entity"}, {"label" : "e", "tail" : ": Throwable", "member" : "com.github.agourlay.cornichon.resolver.SimpleMapperError.e", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapperError.html#e:Throwable", "kind" : "val"}, {"label" : "key", "tail" : ": String", "member" : "com.github.agourlay.cornichon.resolver.SimpleMapperError.key", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapperError.html#key:String", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapperError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapperError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapperError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapperError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapperError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapperError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapperError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapperError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapperError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapperError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapperError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapperError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapperError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapperError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapperError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapperError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapperError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapperError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapperError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/resolver\/SimpleMapperError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.resolver.TextMapper", "shortDescription" : "", "members_case class" : [{"member" : "com.github.agourlay.cornichon.resolver.TextMapper#<init>", "error" : "unsupported entity"}, {"label" : "transform", "tail" : ": (String) â‡’ String", "member" : "com.github.agourlay.cornichon.resolver.TextMapper.transform", "link" : "com\/github\/agourlay\/cornichon\/resolver\/TextMapper.html#transform:String=>String", "kind" : "val"}, {"label" : "key", "tail" : ": String", "member" : "com.github.agourlay.cornichon.resolver.TextMapper.key", "link" : "com\/github\/agourlay\/cornichon\/resolver\/TextMapper.html#key:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/resolver\/TextMapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/resolver\/TextMapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/resolver\/TextMapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/resolver\/TextMapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/resolver\/TextMapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/resolver\/TextMapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/resolver\/TextMapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/TextMapper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/TextMapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/resolver\/TextMapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/resolver\/TextMapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/resolver\/TextMapper.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/resolver\/TextMapper.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/resolver\/TextMapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/TextMapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/resolver\/TextMapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/resolver\/TextMapper.html", "kind" : "case class"}], "com.github.agourlay.cornichon.dsl" : [{"name" : "com.github.agourlay.cornichon.dsl.BlockScopedResource", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BlockScopedResource.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BlockScopedResource.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BlockScopedResource.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BlockScopedResource.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BlockScopedResource.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BlockScopedResource.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BlockScopedResource.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BlockScopedResource.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BlockScopedResource.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BlockScopedResource.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BlockScopedResource.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BlockScopedResource.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BlockScopedResource.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BlockScopedResource.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BlockScopedResource.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BlockScopedResource.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BlockScopedResource.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BlockScopedResource.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BlockScopedResource.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "startResource", "tail" : "(): Task[ResourceHandle]", "member" : "com.github.agourlay.cornichon.dsl.BlockScopedResource.startResource", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BlockScopedResource.html#startResource():monix.eval.Task[com.github.agourlay.cornichon.dsl.ResourceHandle]", "kind" : "abstract def"}, {"label" : "closingTitle", "tail" : ": String", "member" : "com.github.agourlay.cornichon.dsl.BlockScopedResource.closingTitle", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BlockScopedResource.html#closingTitle:String", "kind" : "abstract val"}, {"label" : "openingTitle", "tail" : ": String", "member" : "com.github.agourlay.cornichon.dsl.BlockScopedResource.openingTitle", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BlockScopedResource.html#openingTitle:String", "kind" : "abstract val"}, {"label" : "sessionTarget", "tail" : ": String", "member" : "com.github.agourlay.cornichon.dsl.BlockScopedResource.sessionTarget", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BlockScopedResource.html#sessionTarget:String", "kind" : "abstract val"}], "shortDescription" : "", "trait" : "com\/github\/agourlay\/cornichon\/dsl\/BlockScopedResource.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.dsl.BodyElementCollector", "shortDescription" : "", "members_case class" : [{"label" : "get", "tail" : "(body: List[Body]): Result", "member" : "com.github.agourlay.cornichon.dsl.BodyElementCollector.get", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BodyElementCollector.html#get(body:List[Body]):Result", "kind" : "def"}, {"label" : "apply", "tail" : "(body: â‡’ Seq[Body]): Result", "member" : "com.github.agourlay.cornichon.dsl.BodyElementCollector.apply", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BodyElementCollector.html#apply(body:=>Seq[Body]):Result", "kind" : "macro def"}, {"label" : "apply", "tail" : "(body: â‡’ Body): Result", "member" : "com.github.agourlay.cornichon.dsl.BodyElementCollector.apply", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BodyElementCollector.html#apply(body:=>Body):Result", "kind" : "macro def"}, {"member" : "com.github.agourlay.cornichon.dsl.BodyElementCollector#<init>", "error" : "unsupported entity"}, {"label" : "fn", "tail" : ": (List[Body]) â‡’ Result", "member" : "com.github.agourlay.cornichon.dsl.BodyElementCollector.fn", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BodyElementCollector.html#fn:List[Body]=>Result", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BodyElementCollector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BodyElementCollector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BodyElementCollector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BodyElementCollector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BodyElementCollector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BodyElementCollector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BodyElementCollector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BodyElementCollector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BodyElementCollector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BodyElementCollector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BodyElementCollector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BodyElementCollector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BodyElementCollector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BodyElementCollector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BodyElementCollector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/BodyElementCollector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/dsl\/BodyElementCollector.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.dsl.CloseableResource", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/dsl\/CloseableResource.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/dsl\/CloseableResource.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/dsl\/CloseableResource.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/dsl\/CloseableResource.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/dsl\/CloseableResource.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/dsl\/CloseableResource.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/dsl\/CloseableResource.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/CloseableResource.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/CloseableResource.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/CloseableResource.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/dsl\/CloseableResource.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/dsl\/CloseableResource.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/dsl\/CloseableResource.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/dsl\/CloseableResource.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/dsl\/CloseableResource.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/dsl\/CloseableResource.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/dsl\/CloseableResource.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/CloseableResource.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/CloseableResource.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "stopResource", "tail" : "(): Task[Unit]", "member" : "com.github.agourlay.cornichon.dsl.CloseableResource.stopResource", "link" : "com\/github\/agourlay\/cornichon\/dsl\/CloseableResource.html#stopResource():monix.eval.Task[Unit]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/github\/agourlay\/cornichon\/dsl\/CloseableResource.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.dsl.ContainerType", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType$.html", "members_object" : [{"label" : "showIterConv", "tail" : "(a: Iterable[T])(tc: Show[T]): Iterable[ContainerType[T, Show]]", "member" : "com.github.agourlay.cornichon.dsl.ContainerType.showIterConv", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType$.html#showIterConv[T](a:Iterable[T])(implicittc:cats.Show[T]):Iterable[com.github.agourlay.cornichon.dsl.ContainerType[T,cats.Show]]", "kind" : "implicit def"}, {"label" : "showConv", "tail" : "(a: T)(tc: Show[T]): ContainerType[T, Show]", "member" : "com.github.agourlay.cornichon.dsl.ContainerType.showConv", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType$.html#showConv[T](a:T)(implicittc:cats.Show[T]):com.github.agourlay.cornichon.dsl.ContainerType[T,cats.Show]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "com.github.agourlay.cornichon.dsl.ContainerType#<init>", "error" : "unsupported entity"}, {"label" : "tci", "tail" : ": B[T]", "member" : "com.github.agourlay.cornichon.dsl.ContainerType.tci", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType.html#tci:B[T@scala.annotation.unchecked.uncheckedVariance]", "kind" : "val"}, {"label" : "element", "tail" : ": T", "member" : "com.github.agourlay.cornichon.dsl.ContainerType.element", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType.html#element:T", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/dsl\/ContainerType.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.dsl.DataTable", "shortDescription" : "", "members_case class" : [{"label" : "rawStringList", "tail" : "(): List[Map[String, String]]", "member" : "com.github.agourlay.cornichon.dsl.DataTable.rawStringList", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTable.html#rawStringList:List[Map[String,String]]", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.dsl.DataTable#<init>", "error" : "unsupported entity"}, {"label" : "rows", "tail" : ": Seq[Row]", "member" : "com.github.agourlay.cornichon.dsl.DataTable.rows", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTable.html#rows:Seq[com.github.agourlay.cornichon.dsl.Row]", "kind" : "val"}, {"label" : "headers", "tail" : ": Headers", "member" : "com.github.agourlay.cornichon.dsl.DataTable.headers", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTable.html#headers:com.github.agourlay.cornichon.dsl.Headers", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTable.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTable.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTable.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTable.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTable.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTable.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTable.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTable.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTable.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTable.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTable.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTable.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTable.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTable.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTable.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTable.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/dsl\/DataTable.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.dsl.DataTableError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.dsl.DataTableError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.dsl.DataTableError#<init>", "error" : "unsupported entity"}, {"label" : "input", "tail" : ": String", "member" : "com.github.agourlay.cornichon.dsl.DataTableError.input", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableError.html#input:String", "kind" : "val"}, {"label" : "error", "tail" : ": Throwable", "member" : "com.github.agourlay.cornichon.dsl.DataTableError.error", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableError.html#error:Throwable", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.dsl.DataTableParseError", "shortDescription" : "", "members_case class" : [{"member" : "com.github.agourlay.cornichon.dsl.DataTableParseError#<init>", "error" : "unsupported entity"}, {"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.dsl.DataTableParseError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParseError.html#baseErrorMessage:String", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParseError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParseError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParseError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParseError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParseError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParseError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParseError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParseError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParseError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParseError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParseError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParseError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParseError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParseError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParseError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParseError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParseError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParseError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParseError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParseError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.dsl.DataTableParser", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser$.html", "members_class" : [{"label" : "__SubParserInput", "tail" : "", "member" : "org.parboiled2.Parser.__SubParserInput", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#__SubParserInputextendsParserInput", "kind" : "class"}, {"label" : "TracingBubbleException", "tail" : "", "member" : "org.parboiled2.Parser.TracingBubbleException", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#TracingBubbleExceptionextendsRuntimeExceptionwithNoStackTrace", "kind" : "class"}, {"label" : "ActionOperator", "tail" : "", "member" : "org.parboiled2.RuleDSLActions.ActionOperator", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#ActionOperator[I<:<?>,O<:<?>,Ops<:<?>]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "WithSeparatedBy", "tail" : "", "member" : "org.parboiled2.RuleDSLCombinators.WithSeparatedBy", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#WithSeparatedBy[I<:<?>,O<:<?>]extendsAnyRef", "kind" : "trait"}, {"label" : "NTimes", "tail" : "", "member" : "org.parboiled2.RuleDSLCombinators.NTimes", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#NTimesextendsAnyRef", "kind" : "sealed trait"}, {"label" : "CharRangeSupport", "tail" : "", "member" : "org.parboiled2.RuleDSLBasics.CharRangeSupport", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#CharRangeSupportextendsAnyRef", "kind" : "sealed trait"}, {"label" : "Separator", "tail" : "(): Rule[HNil, HNil]", "member" : "com.github.agourlay.cornichon.dsl.DataTableParser.Separator", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#Separator:org.parboiled2.Rule[shapeless.HNil,shapeless.HNil]", "kind" : "def"}, {"label" : "Spaces", "tail" : "(): Rule[HNil, HNil]", "member" : "com.github.agourlay.cornichon.dsl.DataTableParser.Spaces", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#Spaces:org.parboiled2.Rule[shapeless.HNil,shapeless.HNil]", "kind" : "def"}, {"label" : "NL", "tail" : "(): Rule[HNil, HNil]", "member" : "com.github.agourlay.cornichon.dsl.DataTableParser.NL", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#NL:org.parboiled2.Rule[shapeless.HNil,shapeless.HNil]", "kind" : "def"}, {"label" : "ContentsChar", "tail" : "(): Rule[HNil, HNil]", "member" : "com.github.agourlay.cornichon.dsl.DataTableParser.ContentsChar", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#ContentsChar:org.parboiled2.Rule[shapeless.HNil,shapeless.HNil]", "kind" : "def"}, {"label" : "CellContent", "tail" : "(): Rule[HNil, ::[String, HNil]]", "member" : "com.github.agourlay.cornichon.dsl.DataTableParser.CellContent", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#CellContent:org.parboiled2.Rule[shapeless.HNil,String::shapeless.HNil]", "kind" : "def"}, {"label" : "RowRule", "tail" : "(): Rule[HNil, ::[Row, HNil]]", "member" : "com.github.agourlay.cornichon.dsl.DataTableParser.RowRule", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#RowRule:org.parboiled2.Rule[shapeless.HNil,com.github.agourlay.cornichon.dsl.Row::shapeless.HNil]", "kind" : "def"}, {"label" : "HeaderRule", "tail" : "(): Rule[HNil, ::[Headers, HNil]]", "member" : "com.github.agourlay.cornichon.dsl.DataTableParser.HeaderRule", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#HeaderRule:org.parboiled2.Rule[shapeless.HNil,com.github.agourlay.cornichon.dsl.Headers::shapeless.HNil]", "kind" : "def"}, {"label" : "dataTableRule", "tail" : "(): Rule[HNil, ::[DataTable, HNil]]", "member" : "com.github.agourlay.cornichon.dsl.DataTableParser.dataTableRule", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#dataTableRule:org.parboiled2.Rule[shapeless.HNil,com.github.agourlay.cornichon.dsl.DataTable::shapeless.HNil]", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.dsl.DataTableParser#<init>", "error" : "unsupported entity"}, {"label" : "input", "tail" : ": ParserInput", "member" : "com.github.agourlay.cornichon.dsl.DataTableParser.input", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#input:org.parboiled2.ParserInput", "kind" : "val"}, {"label" : "Unicode", "tail" : "(): Rule[HNil, ::[Int, HNil]]", "member" : "com.github.agourlay.cornichon.dsl.StringHeaderParserSupport.Unicode", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#Unicode:org.parboiled2.Rule[shapeless.HNil,Int::shapeless.HNil]", "kind" : "def"}, {"label" : "EscapedChar", "tail" : "(): Rule[HNil, HNil]", "member" : "com.github.agourlay.cornichon.dsl.StringHeaderParserSupport.EscapedChar", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#EscapedChar:org.parboiled2.Rule[shapeless.HNil,shapeless.HNil]", "kind" : "def"}, {"label" : "NormalChar", "tail" : "(): Rule[HNil, HNil]", "member" : "com.github.agourlay.cornichon.dsl.StringHeaderParserSupport.NormalChar", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#NormalChar:org.parboiled2.Rule[shapeless.HNil,shapeless.HNil]", "kind" : "def"}, {"label" : "Characters", "tail" : "(): Rule[HNil, HNil]", "member" : "com.github.agourlay.cornichon.dsl.StringHeaderParserSupport.Characters", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#Characters:org.parboiled2.Rule[shapeless.HNil,shapeless.HNil]", "kind" : "def"}, {"label" : "HeaderValue", "tail" : "(): Rule[HNil, ::[String, HNil]]", "member" : "com.github.agourlay.cornichon.dsl.StringHeaderParserSupport.HeaderValue", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#HeaderValue:org.parboiled2.Rule[shapeless.HNil,String::shapeless.HNil]", "kind" : "def"}, {"label" : "setSB", "tail" : "(s: String): Rule0", "member" : "org.parboiled2.StringBuilding.setSB", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#setSB(s:String):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "prependSB", "tail" : "(s: String): Rule0", "member" : "org.parboiled2.StringBuilding.prependSB", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#prependSB(s:String):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "prependSB", "tail" : "(c: Char): Rule0", "member" : "org.parboiled2.StringBuilding.prependSB", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#prependSB(c:Char):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "prependSB", "tail" : "(offset: Int): Rule0", "member" : "org.parboiled2.StringBuilding.prependSB", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#prependSB(offset:Int):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "prependSB", "tail" : "(): Rule0", "member" : "org.parboiled2.StringBuilding.prependSB", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#prependSB():org.parboiled2.Rule0", "kind" : "def"}, {"label" : "appendSB", "tail" : "(s: String): Rule0", "member" : "org.parboiled2.StringBuilding.appendSB", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#appendSB(s:String):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "appendSB", "tail" : "(c: Char): Rule0", "member" : "org.parboiled2.StringBuilding.appendSB", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#appendSB(c:Char):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "appendSB", "tail" : "(offset: Int): Rule0", "member" : "org.parboiled2.StringBuilding.appendSB", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#appendSB(offset:Int):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "appendSB", "tail" : "(): Rule0", "member" : "org.parboiled2.StringBuilding.appendSB", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#appendSB():org.parboiled2.Rule0", "kind" : "def"}, {"label" : "clearSB", "tail" : "(): Rule0", "member" : "org.parboiled2.StringBuilding.clearSB", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#clearSB():org.parboiled2.Rule0", "kind" : "def"}, {"label" : "sb", "tail" : ": StringBuilder", "member" : "org.parboiled2.StringBuilding.sb", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#sb:StringBuilder", "kind" : "val"}, {"label" : "__hardFail", "tail" : "(expected: String): Nothing", "member" : "org.parboiled2.Parser.__hardFail", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#__hardFail(expected:String):Nothing", "kind" : "def"}, {"label" : "__matchMapWrapped", "tail" : "(m: Map[String, Any]): Boolean", "member" : "org.parboiled2.Parser.__matchMapWrapped", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#__matchMapWrapped(m:Map[String,Any]):Boolean", "kind" : "def"}, {"label" : "__matchMap", "tail" : "(m: Map[String, Any]): Boolean", "member" : "org.parboiled2.Parser.__matchMap", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#__matchMap(m:Map[String,Any]):Boolean", "kind" : "def"}, {"label" : "__matchNoneOf", "tail" : "(string: String, ix: Int): Boolean", "member" : "org.parboiled2.Parser.__matchNoneOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#__matchNoneOf(string:String,ix:Int):Boolean", "kind" : "final def"}, {"label" : "__matchAnyOf", "tail" : "(string: String, ix: Int): Boolean", "member" : "org.parboiled2.Parser.__matchAnyOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#__matchAnyOf(string:String,ix:Int):Boolean", "kind" : "final def"}, {"label" : "__matchIgnoreCaseStringWrapped", "tail" : "(string: String, ix: Int): Boolean", "member" : "org.parboiled2.Parser.__matchIgnoreCaseStringWrapped", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#__matchIgnoreCaseStringWrapped(string:String,ix:Int):Boolean", "kind" : "final def"}, {"label" : "__matchIgnoreCaseString", "tail" : "(string: String, ix: Int): Boolean", "member" : "org.parboiled2.Parser.__matchIgnoreCaseString", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#__matchIgnoreCaseString(string:String,ix:Int):Boolean", "kind" : "final def"}, {"label" : "__matchStringWrapped", "tail" : "(string: String, ix: Int): Boolean", "member" : "org.parboiled2.Parser.__matchStringWrapped", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#__matchStringWrapped(string:String,ix:Int):Boolean", "kind" : "final def"}, {"label" : "__matchString", "tail" : "(string: String, ix: Int): Boolean", "member" : "org.parboiled2.Parser.__matchString", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#__matchString(string:String,ix:Int):Boolean", "kind" : "final def"}, {"label" : "__push", "tail" : "(value: Any): Boolean", "member" : "org.parboiled2.Parser.__push", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#__push(value:Any):Boolean", "kind" : "def"}, {"label" : "__bubbleUp", "tail" : "(prefix: List[NonTerminal], terminal: Terminal): Nothing", "member" : "org.parboiled2.Parser.__bubbleUp", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#__bubbleUp(prefix:List[org.parboiled2.RuleTrace.NonTerminal],terminal:org.parboiled2.RuleTrace.Terminal):Nothing", "kind" : "def"}, {"label" : "__bubbleUp", "tail" : "(terminal: Terminal): Nothing", "member" : "org.parboiled2.Parser.__bubbleUp", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#__bubbleUp(terminal:org.parboiled2.RuleTrace.Terminal):Nothing", "kind" : "def"}, {"label" : "__registerMismatch", "tail" : "(): Boolean", "member" : "org.parboiled2.Parser.__registerMismatch", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#__registerMismatch():Boolean", "kind" : "def"}, {"label" : "__exitQuiet", "tail" : "(saved: Int): Unit", "member" : "org.parboiled2.Parser.__exitQuiet", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#__exitQuiet(saved:Int):Unit", "kind" : "def"}, {"label" : "__enterQuiet", "tail" : "(): Int", "member" : "org.parboiled2.Parser.__enterQuiet", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#__enterQuiet():Int", "kind" : "def"}, {"label" : "__exitAtomic", "tail" : "(saved: Boolean): Unit", "member" : "org.parboiled2.Parser.__exitAtomic", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#__exitAtomic(saved:Boolean):Unit", "kind" : "def"}, {"label" : "__enterAtomic", "tail" : "(start: Int): Boolean", "member" : "org.parboiled2.Parser.__enterAtomic", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#__enterAtomic(start:Int):Boolean", "kind" : "def"}, {"label" : "__exitNotPredicate", "tail" : "(saved: AnyRef): Unit", "member" : "org.parboiled2.Parser.__exitNotPredicate", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#__exitNotPredicate(saved:AnyRef):Unit", "kind" : "def"}, {"label" : "__enterNotPredicate", "tail" : "(): AnyRef", "member" : "org.parboiled2.Parser.__enterNotPredicate", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#__enterNotPredicate():AnyRef", "kind" : "def"}, {"label" : "__restoreState", "tail" : "(mark: Mark): Unit", "member" : "org.parboiled2.Parser.__restoreState", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#__restoreState(mark:org.parboiled2.Parser.Mark):Unit", "kind" : "def"}, {"label" : "__saveState", "tail" : "(): Mark", "member" : "org.parboiled2.Parser.__saveState", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#__saveState:org.parboiled2.Parser.Mark", "kind" : "def"}, {"label" : "__updateMaxCursor", "tail" : "(): Boolean", "member" : "org.parboiled2.Parser.__updateMaxCursor", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#__updateMaxCursor():Boolean", "kind" : "def"}, {"label" : "__advance", "tail" : "(): Boolean", "member" : "org.parboiled2.Parser.__advance", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#__advance():Boolean", "kind" : "def"}, {"label" : "__run", "tail" : "(rule: â‡’ RuleN[L])(scheme: DeliveryScheme[L]): Result", "member" : "org.parboiled2.Parser.__run", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#__run[L<:shapeless.HList](rule:=>org.parboiled2.RuleN[L])(implicitscheme:org.parboiled2.Parser.DeliveryScheme[L]):scheme.Result", "kind" : "def"}, {"label" : "__inErrorAnalysis", "tail" : "(): Boolean", "member" : "org.parboiled2.Parser.__inErrorAnalysis", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#__inErrorAnalysis:Boolean", "kind" : "def"}, {"label" : "copyStateFrom", "tail" : "(other: Parser, offset: Int): Unit", "member" : "org.parboiled2.Parser.copyStateFrom", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#copyStateFrom(other:org.parboiled2.Parser,offset:Int):Unit", "kind" : "def"}, {"label" : "formatError", "tail" : "(error: ParseError, formatter: ErrorFormatter): String", "member" : "org.parboiled2.Parser.formatError", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#formatError(error:org.parboiled2.ParseError,formatter:org.parboiled2.ErrorFormatter):String", "kind" : "def"}, {"label" : "errorTraceCollectionLimit", "tail" : "(): Int", "member" : "org.parboiled2.Parser.errorTraceCollectionLimit", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#errorTraceCollectionLimit:Int", "kind" : "def"}, {"label" : "valueStack", "tail" : "(): ValueStack", "member" : "org.parboiled2.Parser.valueStack", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#valueStack:org.parboiled2.ValueStack", "kind" : "def"}, {"label" : "charAtRC", "tail" : "(offset: Int): Char", "member" : "org.parboiled2.Parser.charAtRC", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#charAtRC(offset:Int):Char", "kind" : "def"}, {"label" : "charAt", "tail" : "(offset: Int): Char", "member" : "org.parboiled2.Parser.charAt", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#charAt(offset:Int):Char", "kind" : "def"}, {"label" : "lastChar", "tail" : "(): Char", "member" : "org.parboiled2.Parser.lastChar", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#lastChar:Char", "kind" : "def"}, {"label" : "cursorChar", "tail" : "(): Char", "member" : "org.parboiled2.Parser.cursorChar", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#cursorChar:Char", "kind" : "def"}, {"label" : "cursor", "tail" : "(): Int", "member" : "org.parboiled2.Parser.cursor", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#cursor:Int", "kind" : "def"}, {"label" : "namedRule", "tail" : "(name: String)(r: Rule[I, O]): Rule[I, O]", "member" : "org.parboiled2.Parser.namedRule", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#namedRule[I<:shapeless.HList,O<:shapeless.HList](name:String)(r:org.parboiled2.Rule[I,O]):org.parboiled2.Rule[I,O]", "kind" : "macro def"}, {"label" : "rule", "tail" : "(r: Rule[I, O]): Rule[I, O]", "member" : "org.parboiled2.Parser.rule", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#rule[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O]):org.parboiled2.Rule[I,O]", "kind" : "macro def"}, {"label" : "rule2ActionOperator", "tail" : "(r: Rule[I, O])(ops: ActionOps[I, O]): ActionOperator[I, O, Out]", "member" : "org.parboiled2.RuleDSLActions.rule2ActionOperator", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#rule2ActionOperator[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O])(implicitops:org.parboiled2.support.ActionOps[I,O]):RuleDSLActions.this.ActionOperator[I,O,ops.Out]", "kind" : "implicit def"}, {"label" : "drop", "tail" : "(h: HListable[T]): PopRule[Out]", "member" : "org.parboiled2.RuleDSLActions.drop", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#drop[T](implicith:org.parboiled2.support.HListable[T]):org.parboiled2.PopRule[h.Out]", "kind" : "def"}, {"label" : "push", "tail" : "(value: T)(h: HListable[T]): RuleN[Out]", "member" : "org.parboiled2.RuleDSLActions.push", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#push[T](value:T)(implicith:org.parboiled2.support.HListable[T]):org.parboiled2.RuleN[h.Out]", "kind" : "def"}, {"label" : "run", "tail" : "(arg: T)(rr: RunResult[T]): Out", "member" : "org.parboiled2.RuleDSLActions.run", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#run[T](arg:T)(implicitrr:org.parboiled2.support.RunResult[T]):rr.Out", "kind" : "def"}, {"label" : "test", "tail" : "(condition: Boolean): Rule0", "member" : "org.parboiled2.RuleDSLActions.test", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#test(condition:Boolean):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "capture", "tail" : "(r: Rule[I, O])(p: Prepend[O, ::[String, HNil]]): Rule[I, Out]", "member" : "org.parboiled2.RuleDSLActions.capture", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#capture[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O])(implicitp:shapeless.ops.hlist.Prepend[O,String::shapeless.HNil]):org.parboiled2.Rule[I,p.Out]", "kind" : "def"}, {"label" : "rule2WithSeparatedBy", "tail" : "(r: Rule[I, O] with Repeated): WithSeparatedBy[I, O]", "member" : "org.parboiled2.RuleDSLCombinators.rule2WithSeparatedBy", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#rule2WithSeparatedBy[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O]withorg.parboiled2.Repeated):RuleDSLCombinators.this.WithSeparatedBy[I,O]", "kind" : "implicit def"}, {"label" : "range2NTimes", "tail" : "(range: Range): NTimes", "member" : "org.parboiled2.RuleDSLCombinators.range2NTimes", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#range2NTimes(range:Range):RuleDSLCombinators.this.NTimes", "kind" : "implicit def"}, {"label" : "int2NTimes", "tail" : "(i: Int): NTimes", "member" : "org.parboiled2.RuleDSLCombinators.int2NTimes", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#int2NTimes(i:Int):RuleDSLCombinators.this.NTimes", "kind" : "implicit def"}, {"label" : "runSubParser", "tail" : "(f: (ParserInput) â‡’ Rule[I, O]): Rule[I, O]", "member" : "org.parboiled2.RuleDSLCombinators.runSubParser", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#runSubParser[I<:shapeless.HList,O<:shapeless.HList](f:org.parboiled2.ParserInput=>org.parboiled2.Rule[I,O]):org.parboiled2.Rule[I,O]", "kind" : "def"}, {"label" : "quiet", "tail" : "(r: Rule[I, O]): Rule[I, O]", "member" : "org.parboiled2.RuleDSLCombinators.quiet", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#quiet[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O]):org.parboiled2.Rule[I,O]", "kind" : "def"}, {"label" : "atomic", "tail" : "(r: Rule[I, O]): Rule[I, O]", "member" : "org.parboiled2.RuleDSLCombinators.atomic", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#atomic[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O]):org.parboiled2.Rule[I,O]", "kind" : "def"}, {"label" : "&", "tail" : "(r: Rule[_, _]): Rule0", "member" : "org.parboiled2.RuleDSLCombinators.&", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#&(r:org.parboiled2.Rule[_,_]):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "oneOrMore", "tail" : "(r: Rule[I, O])(l: Lifter[Seq, I, O]): Rule[In, StrictOut] with Repeated", "member" : "org.parboiled2.RuleDSLCombinators.oneOrMore", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#oneOrMore[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O])(implicitl:org.parboiled2.support.Lifter[scala.collection.immutable.Seq,I,O]):org.parboiled2.Rule[l.In,l.StrictOut]withorg.parboiled2.Repeated", "kind" : "def"}, {"label" : "zeroOrMore", "tail" : "(r: Rule[I, O])(l: Lifter[Seq, I, O]): Rule[In, OptionalOut] with Repeated", "member" : "org.parboiled2.RuleDSLCombinators.zeroOrMore", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#zeroOrMore[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O])(implicitl:org.parboiled2.support.Lifter[scala.collection.immutable.Seq,I,O]):org.parboiled2.Rule[l.In,l.OptionalOut]withorg.parboiled2.Repeated", "kind" : "def"}, {"label" : "optional", "tail" : "(r: Rule[I, O])(l: Lifter[Option, I, O]): Rule[In, OptionalOut]", "member" : "org.parboiled2.RuleDSLCombinators.optional", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#optional[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O])(implicitl:org.parboiled2.support.Lifter[Option,I,O]):org.parboiled2.Rule[l.In,l.OptionalOut]", "kind" : "def"}, {"label" : "str2CharRangeSupport", "tail" : "(s: String): CharRangeSupport", "member" : "org.parboiled2.RuleDSLBasics.str2CharRangeSupport", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#str2CharRangeSupport(s:String):RuleDSLBasics.this.CharRangeSupport", "kind" : "implicit def"}, {"label" : "failX", "tail" : "(expected: String): Rule[I, O]", "member" : "org.parboiled2.RuleDSLBasics.failX", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#failX[I<:shapeless.HList,O<:shapeless.HList](expected:String):org.parboiled2.Rule[I,O]", "kind" : "def"}, {"label" : "fail", "tail" : "(expected: String): Rule0", "member" : "org.parboiled2.RuleDSLBasics.fail", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#fail(expected:String):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "MISMATCH", "tail" : "(): Rule[I, O]", "member" : "org.parboiled2.RuleDSLBasics.MISMATCH", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#MISMATCH[I<:shapeless.HList,O<:shapeless.HList]:org.parboiled2.Rule[I,O]", "kind" : "def"}, {"label" : "MISMATCH0", "tail" : "(): Rule0", "member" : "org.parboiled2.RuleDSLBasics.MISMATCH0", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#MISMATCH0:org.parboiled2.Rule0", "kind" : "def"}, {"label" : "MATCH", "tail" : "(): Rule0", "member" : "org.parboiled2.RuleDSLBasics.MATCH", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#MATCH:org.parboiled2.Rule0", "kind" : "def"}, {"label" : "EOI", "tail" : "(): Char", "member" : "org.parboiled2.RuleDSLBasics.EOI", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#EOI:Char", "kind" : "def"}, {"label" : "ANY", "tail" : "(): Rule0", "member" : "org.parboiled2.RuleDSLBasics.ANY", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#ANY:org.parboiled2.Rule0", "kind" : "def"}, {"label" : "ignoreCase", "tail" : "(s: String): Rule0", "member" : "org.parboiled2.RuleDSLBasics.ignoreCase", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#ignoreCase(s:String):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "ignoreCase", "tail" : "(c: Char): Rule0", "member" : "org.parboiled2.RuleDSLBasics.ignoreCase", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#ignoreCase(c:Char):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "noneOf", "tail" : "(chars: String): Rule0", "member" : "org.parboiled2.RuleDSLBasics.noneOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#noneOf(chars:String):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "anyOf", "tail" : "(chars: String): Rule0", "member" : "org.parboiled2.RuleDSLBasics.anyOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#anyOf(chars:String):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "valueMap", "tail" : "(m: Map[String, T])(h: HListable[T]): RuleN[Out]", "member" : "org.parboiled2.RuleDSLBasics.valueMap", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#valueMap[T](m:Map[String,T])(implicith:org.parboiled2.support.HListable[T]):org.parboiled2.RuleN[h.Out]", "kind" : "implicit def"}, {"label" : "predicate", "tail" : "(p: CharPredicate): Rule0", "member" : "org.parboiled2.RuleDSLBasics.predicate", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#predicate(p:org.parboiled2.CharPredicate):org.parboiled2.Rule0", "kind" : "implicit def"}, {"label" : "str", "tail" : "(s: String): Rule0", "member" : "org.parboiled2.RuleDSLBasics.str", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#str(s:String):org.parboiled2.Rule0", "kind" : "implicit def"}, {"label" : "ch", "tail" : "(c: Char): Rule0", "member" : "org.parboiled2.RuleDSLBasics.ch", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#ch(c:Char):org.parboiled2.Rule0", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "parse", "tail" : "(input: String): Either[CornichonError, DataTable]", "member" : "com.github.agourlay.cornichon.dsl.DataTableParser.parse", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser$.html#parse(input:String):Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.dsl.DataTable]", "kind" : "def"}, {"label" : "Backslash", "tail" : ": CharPredicate", "member" : "com.github.agourlay.cornichon.dsl.DataTableParser.Backslash", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser$.html#Backslash:org.parboiled2.CharPredicate", "kind" : "val"}, {"label" : "delims", "tail" : ": CharPredicate", "member" : "com.github.agourlay.cornichon.dsl.DataTableParser.delims", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser$.html#delims:org.parboiled2.CharPredicate", "kind" : "val"}, {"label" : "delimeter", "tail" : ": CharPredicate", "member" : "com.github.agourlay.cornichon.dsl.DataTableParser.delimeter", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser$.html#delimeter:org.parboiled2.CharPredicate", "kind" : "val"}, {"label" : "WhiteSpace", "tail" : ": CharPredicate", "member" : "com.github.agourlay.cornichon.dsl.DataTableParser.WhiteSpace", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser$.html#WhiteSpace:org.parboiled2.CharPredicate", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/github\/agourlay\/cornichon\/dsl\/DataTableParser.html", "kind" : "class"}, {"name" : "com.github.agourlay.cornichon.dsl.Dsl", "members_trait" : [{"label" : "print_step", "tail" : "(message: String): DebugStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.print_step", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#print_step(message:String):com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_session", "tail" : "(key: String, indice: Option[Int], transform: (String) â‡’ String): DebugStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.show_session", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#show_session(key:String,indice:Option[Int],transform:String=>String):com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_session", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.show_session", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#show_session:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "session_value", "tail" : "(key: String): SessionStepBuilder", "member" : "com.github.agourlay.cornichon.dsl.Dsl.session_value", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#session_value(key:String):com.github.agourlay.cornichon.dsl.SessionSteps.SessionStepBuilder", "kind" : "def"}, {"label" : "transform_session", "tail" : "(key: String)(map: (String) â‡’ String): EffectStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.transform_session", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#transform_session(key:String)(map:String=>String):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "rollback", "tail" : "(key: String): EffectStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.rollback", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#rollback(key:String):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "remove", "tail" : "(key: String): EffectStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.remove", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#remove(key:String):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "save", "tail" : "(input: (String, String)): EffectStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.save", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#save(input:(String,String)):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "wait", "tail" : "(duration: FiniteDuration): EffectStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#wait(duration:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "WithDataInputs", "tail" : "(where: String): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.WithDataInputs", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#WithDataInputs(where:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "LogDuration", "tail" : "(label: String): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.LogDuration", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#LogDuration(label:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "Within", "tail" : "(maxDuration: FiniteDuration): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Within", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#Within(maxDuration:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "Concurrently", "tail" : "(factor: Int, maxTime: FiniteDuration): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Concurrently", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#Concurrently(factor:Int,maxTime:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "Eventually", "tail" : "(maxDuration: FiniteDuration, interval: FiniteDuration): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Eventually", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#Eventually(maxDuration:scala.concurrent.duration.FiniteDuration,interval:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "RepeatDuring", "tail" : "(duration: FiniteDuration): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.RepeatDuring", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#RepeatDuring(duration:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "RetryMax", "tail" : "(limit: Int): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.RetryMax", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#RetryMax(limit:Int):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "RepeatFrom", "tail" : "(elements: Iterable[ContainerType[A, Show]])(indice: String): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.RepeatFrom", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#RepeatFrom[A](elements:Iterable[com.github.agourlay.cornichon.dsl.ContainerType[A,cats.Show]])(indice:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "RepeatWith", "tail" : "(elements: ContainerType[Any, Show]*)(indice: String): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.RepeatWith", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#RepeatWith(elements:com.github.agourlay.cornichon.dsl.ContainerType[Any,cats.Show]*)(indice:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "Repeat", "tail" : "(times: Int, indice: String): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Repeat", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#Repeat(times:Int,indice:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "Repeat", "tail" : "(times: Int): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Repeat", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#Repeat(times:Int):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "AttachAs", "tail" : "(title: String): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.AttachAs", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#AttachAs(title:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "Attach", "tail" : "(): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Attach", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#Attach:com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "And", "tail" : "", "member" : "com.github.agourlay.cornichon.dsl.Dsl.And", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#And", "kind" : "object"}, {"label" : "Then", "tail" : "", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Then", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#Then", "kind" : "object"}, {"label" : "Given", "tail" : "", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Given", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#Given", "kind" : "object"}, {"label" : "When", "tail" : "", "member" : "com.github.agourlay.cornichon.dsl.Dsl.When", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#When", "kind" : "object"}, {"label" : "Starters", "tail" : "", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Starters", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#StartersextendsDynamic", "kind" : "sealed trait"}, {"label" : "scenarioBuilder", "tail" : "(s: feature.BaseFeature.ScenarioBuilder): BodyElementCollector[Step, Scenario]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.scenarioBuilder", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#scenarioBuilder(s:Dsl.this.ScenarioBuilder):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Scenario]", "kind" : "implicit def"}, {"label" : "Scenario", "tail" : "(name: String): feature.BaseFeature.ScenarioBuilder", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Scenario", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#Scenario(name:String):Dsl.this.ScenarioBuilder", "kind" : "def"}, {"label" : "featureBuilder", "tail" : "(f: feature.BaseFeature.FeatureBuilder): BodyElementCollector[Scenario, FeatureDef]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.featureBuilder", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#featureBuilder(f:Dsl.this.FeatureBuilder):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Scenario,com.github.agourlay.cornichon.core.FeatureDef]", "kind" : "implicit def"}, {"label" : "Feature", "tail" : "(name: String): feature.BaseFeature.FeatureBuilder", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Feature", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#Feature(name:String):Dsl.this.FeatureBuilder", "kind" : "def"}, {"label" : "catsStdShowForBoolean", "tail" : ": Show[Boolean]", "member" : "cats.instances.BooleanInstances.catsStdShowForBoolean", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#catsStdShowForBoolean:cats.Show[Boolean]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBoolean", "tail" : ": Order[Boolean]", "member" : "cats.kernel.instances.BooleanInstances.catsKernelStdOrderForBoolean", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#catsKernelStdOrderForBoolean:cats.kernel.Order[Boolean]", "kind" : "implicit val"}, {"label" : "catsStdShowForDouble", "tail" : ": Show[Double]", "member" : "cats.instances.DoubleInstances.catsStdShowForDouble", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#catsStdShowForDouble:cats.Show[Double]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForDouble", "tail" : ": CommutativeGroup[Double]", "member" : "cats.kernel.instances.DoubleInstances.catsKernelStdGroupForDouble", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#catsKernelStdGroupForDouble:cats.kernel.CommutativeGroup[Double]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForDouble", "tail" : ": Order[Double]", "member" : "cats.kernel.instances.DoubleInstances.catsKernelStdOrderForDouble", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#catsKernelStdOrderForDouble:cats.kernel.Order[Double]", "kind" : "implicit val"}, {"label" : "catsStdShowForFloat", "tail" : ": Show[Float]", "member" : "cats.instances.FloatInstances.catsStdShowForFloat", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#catsStdShowForFloat:cats.Show[Float]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForFloat", "tail" : ": CommutativeGroup[Float]", "member" : "cats.kernel.instances.FloatInstances.catsKernelStdGroupForFloat", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#catsKernelStdGroupForFloat:cats.kernel.CommutativeGroup[Float]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForFloat", "tail" : ": Order[Float]", "member" : "cats.kernel.instances.FloatInstances.catsKernelStdOrderForFloat", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#catsKernelStdOrderForFloat:cats.kernel.Order[Float]", "kind" : "implicit val"}, {"label" : "catsStdShowForLong", "tail" : ": Show[Long]", "member" : "cats.instances.LongInstances.catsStdShowForLong", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#catsStdShowForLong:cats.Show[Long]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForLong", "tail" : ": CommutativeGroup[Long]", "member" : "cats.kernel.instances.LongInstances.catsKernelStdGroupForLong", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#catsKernelStdGroupForLong:cats.kernel.CommutativeGroup[Long]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForLong", "tail" : ": Order[Long]", "member" : "cats.kernel.instances.LongInstances.catsKernelStdOrderForLong", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#catsKernelStdOrderForLong:cats.kernel.Order[Long]", "kind" : "implicit val"}, {"label" : "catsStdShowForChar", "tail" : ": Show[Char]", "member" : "cats.instances.CharInstances.catsStdShowForChar", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#catsStdShowForChar:cats.Show[Char]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForChar", "tail" : ": CharOrder", "member" : "cats.kernel.instances.CharInstances.catsKernelStdOrderForChar", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#catsKernelStdOrderForChar:cats.kernel.instances.CharOrder", "kind" : "implicit val"}, {"label" : "catsStdShowForInt", "tail" : ": Show[Int]", "member" : "cats.instances.IntInstances.catsStdShowForInt", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#catsStdShowForInt:cats.Show[Int]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForInt", "tail" : ": CommutativeGroup[Int]", "member" : "cats.kernel.instances.IntInstances.catsKernelStdGroupForInt", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#catsKernelStdGroupForInt:cats.kernel.CommutativeGroup[Int]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForInt", "tail" : ": Order[Int]", "member" : "cats.kernel.instances.IntInstances.catsKernelStdOrderForInt", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#catsKernelStdOrderForInt:cats.kernel.Order[Int]", "kind" : "implicit val"}, {"label" : "catsStdShowForString", "tail" : ": Show[String]", "member" : "cats.instances.StringInstances.catsStdShowForString", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#catsStdShowForString:cats.Show[String]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForString", "tail" : ": Monoid[String]", "member" : "cats.kernel.instances.StringInstances.catsKernelStdMonoidForString", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#catsKernelStdMonoidForString:cats.kernel.Monoid[String]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForString", "tail" : ": Order[String]", "member" : "cats.kernel.instances.StringInstances.catsKernelStdOrderForString", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#catsKernelStdOrderForString:cats.kernel.Order[String]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl$.html", "members_object" : [{"label" : "save_from_session", "tail" : "(args: Seq[FromSessionSetter]): EffectStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.save_from_session", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl$.html#save_from_session(args:Seq[com.github.agourlay.cornichon.dsl.Dsl.FromSessionSetter]):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "FromSessionSetter", "tail" : "", "member" : "com.github.agourlay.cornichon.dsl.Dsl.FromSessionSetter", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl$.html#FromSessionSetterextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.dsl.Headers", "shortDescription" : "", "members_case class" : [{"member" : "com.github.agourlay.cornichon.dsl.Headers#<init>", "error" : "unsupported entity"}, {"label" : "fields", "tail" : ": Seq[String]", "member" : "com.github.agourlay.cornichon.dsl.Headers.fields", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Headers.html#fields:Seq[String]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Headers.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Headers.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Headers.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Headers.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Headers.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Headers.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Headers.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Headers.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Headers.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Headers.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Headers.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Headers.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Headers.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Headers.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Headers.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Headers.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/dsl\/Headers.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.dsl.ProvidedInstances", "members_trait" : [{"label" : "catsStdShowForBoolean", "tail" : ": Show[Boolean]", "member" : "cats.instances.BooleanInstances.catsStdShowForBoolean", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#catsStdShowForBoolean:cats.Show[Boolean]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBoolean", "tail" : ": Order[Boolean]", "member" : "cats.kernel.instances.BooleanInstances.catsKernelStdOrderForBoolean", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#catsKernelStdOrderForBoolean:cats.kernel.Order[Boolean]", "kind" : "implicit val"}, {"label" : "catsStdShowForDouble", "tail" : ": Show[Double]", "member" : "cats.instances.DoubleInstances.catsStdShowForDouble", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#catsStdShowForDouble:cats.Show[Double]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForDouble", "tail" : ": CommutativeGroup[Double]", "member" : "cats.kernel.instances.DoubleInstances.catsKernelStdGroupForDouble", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#catsKernelStdGroupForDouble:cats.kernel.CommutativeGroup[Double]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForDouble", "tail" : ": Order[Double]", "member" : "cats.kernel.instances.DoubleInstances.catsKernelStdOrderForDouble", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#catsKernelStdOrderForDouble:cats.kernel.Order[Double]", "kind" : "implicit val"}, {"label" : "catsStdShowForFloat", "tail" : ": Show[Float]", "member" : "cats.instances.FloatInstances.catsStdShowForFloat", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#catsStdShowForFloat:cats.Show[Float]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForFloat", "tail" : ": CommutativeGroup[Float]", "member" : "cats.kernel.instances.FloatInstances.catsKernelStdGroupForFloat", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#catsKernelStdGroupForFloat:cats.kernel.CommutativeGroup[Float]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForFloat", "tail" : ": Order[Float]", "member" : "cats.kernel.instances.FloatInstances.catsKernelStdOrderForFloat", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#catsKernelStdOrderForFloat:cats.kernel.Order[Float]", "kind" : "implicit val"}, {"label" : "catsStdShowForLong", "tail" : ": Show[Long]", "member" : "cats.instances.LongInstances.catsStdShowForLong", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#catsStdShowForLong:cats.Show[Long]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForLong", "tail" : ": CommutativeGroup[Long]", "member" : "cats.kernel.instances.LongInstances.catsKernelStdGroupForLong", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#catsKernelStdGroupForLong:cats.kernel.CommutativeGroup[Long]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForLong", "tail" : ": Order[Long]", "member" : "cats.kernel.instances.LongInstances.catsKernelStdOrderForLong", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#catsKernelStdOrderForLong:cats.kernel.Order[Long]", "kind" : "implicit val"}, {"label" : "catsStdShowForChar", "tail" : ": Show[Char]", "member" : "cats.instances.CharInstances.catsStdShowForChar", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#catsStdShowForChar:cats.Show[Char]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForChar", "tail" : ": CharOrder", "member" : "cats.kernel.instances.CharInstances.catsKernelStdOrderForChar", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#catsKernelStdOrderForChar:cats.kernel.instances.CharOrder", "kind" : "implicit val"}, {"label" : "catsStdShowForInt", "tail" : ": Show[Int]", "member" : "cats.instances.IntInstances.catsStdShowForInt", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#catsStdShowForInt:cats.Show[Int]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForInt", "tail" : ": CommutativeGroup[Int]", "member" : "cats.kernel.instances.IntInstances.catsKernelStdGroupForInt", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#catsKernelStdGroupForInt:cats.kernel.CommutativeGroup[Int]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForInt", "tail" : ": Order[Int]", "member" : "cats.kernel.instances.IntInstances.catsKernelStdOrderForInt", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#catsKernelStdOrderForInt:cats.kernel.Order[Int]", "kind" : "implicit val"}, {"label" : "catsStdShowForString", "tail" : ": Show[String]", "member" : "cats.instances.StringInstances.catsStdShowForString", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#catsStdShowForString:cats.Show[String]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForString", "tail" : ": Monoid[String]", "member" : "cats.kernel.instances.StringInstances.catsKernelStdMonoidForString", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#catsKernelStdMonoidForString:cats.kernel.Monoid[String]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForString", "tail" : ": Order[String]", "member" : "cats.kernel.instances.StringInstances.catsKernelStdOrderForString", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#catsKernelStdOrderForString:cats.kernel.Order[String]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html", "members_object" : [{"label" : "catsStdShowForBoolean", "tail" : ": Show[Boolean]", "member" : "cats.instances.BooleanInstances.catsStdShowForBoolean", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#catsStdShowForBoolean:cats.Show[Boolean]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBoolean", "tail" : ": Order[Boolean]", "member" : "cats.kernel.instances.BooleanInstances.catsKernelStdOrderForBoolean", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#catsKernelStdOrderForBoolean:cats.kernel.Order[Boolean]", "kind" : "implicit val"}, {"label" : "catsStdShowForDouble", "tail" : ": Show[Double]", "member" : "cats.instances.DoubleInstances.catsStdShowForDouble", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#catsStdShowForDouble:cats.Show[Double]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForDouble", "tail" : ": CommutativeGroup[Double]", "member" : "cats.kernel.instances.DoubleInstances.catsKernelStdGroupForDouble", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#catsKernelStdGroupForDouble:cats.kernel.CommutativeGroup[Double]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForDouble", "tail" : ": Order[Double]", "member" : "cats.kernel.instances.DoubleInstances.catsKernelStdOrderForDouble", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#catsKernelStdOrderForDouble:cats.kernel.Order[Double]", "kind" : "implicit val"}, {"label" : "catsStdShowForFloat", "tail" : ": Show[Float]", "member" : "cats.instances.FloatInstances.catsStdShowForFloat", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#catsStdShowForFloat:cats.Show[Float]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForFloat", "tail" : ": CommutativeGroup[Float]", "member" : "cats.kernel.instances.FloatInstances.catsKernelStdGroupForFloat", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#catsKernelStdGroupForFloat:cats.kernel.CommutativeGroup[Float]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForFloat", "tail" : ": Order[Float]", "member" : "cats.kernel.instances.FloatInstances.catsKernelStdOrderForFloat", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#catsKernelStdOrderForFloat:cats.kernel.Order[Float]", "kind" : "implicit val"}, {"label" : "catsStdShowForLong", "tail" : ": Show[Long]", "member" : "cats.instances.LongInstances.catsStdShowForLong", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#catsStdShowForLong:cats.Show[Long]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForLong", "tail" : ": CommutativeGroup[Long]", "member" : "cats.kernel.instances.LongInstances.catsKernelStdGroupForLong", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#catsKernelStdGroupForLong:cats.kernel.CommutativeGroup[Long]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForLong", "tail" : ": Order[Long]", "member" : "cats.kernel.instances.LongInstances.catsKernelStdOrderForLong", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#catsKernelStdOrderForLong:cats.kernel.Order[Long]", "kind" : "implicit val"}, {"label" : "catsStdShowForChar", "tail" : ": Show[Char]", "member" : "cats.instances.CharInstances.catsStdShowForChar", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#catsStdShowForChar:cats.Show[Char]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForChar", "tail" : ": CharOrder", "member" : "cats.kernel.instances.CharInstances.catsKernelStdOrderForChar", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#catsKernelStdOrderForChar:cats.kernel.instances.CharOrder", "kind" : "implicit val"}, {"label" : "catsStdShowForInt", "tail" : ": Show[Int]", "member" : "cats.instances.IntInstances.catsStdShowForInt", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#catsStdShowForInt:cats.Show[Int]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForInt", "tail" : ": CommutativeGroup[Int]", "member" : "cats.kernel.instances.IntInstances.catsKernelStdGroupForInt", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#catsKernelStdGroupForInt:cats.kernel.CommutativeGroup[Int]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForInt", "tail" : ": Order[Int]", "member" : "cats.kernel.instances.IntInstances.catsKernelStdOrderForInt", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#catsKernelStdOrderForInt:cats.kernel.Order[Int]", "kind" : "implicit val"}, {"label" : "catsStdShowForString", "tail" : ": Show[String]", "member" : "cats.instances.StringInstances.catsStdShowForString", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#catsStdShowForString:cats.Show[String]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForString", "tail" : ": Monoid[String]", "member" : "cats.kernel.instances.StringInstances.catsKernelStdMonoidForString", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#catsKernelStdMonoidForString:cats.kernel.Monoid[String]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForString", "tail" : ": Order[String]", "member" : "cats.kernel.instances.StringInstances.catsKernelStdOrderForString", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#catsKernelStdOrderForString:cats.kernel.Order[String]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/github\/agourlay\/cornichon\/dsl\/ProvidedInstances.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.dsl.ResourceHandle", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ResourceHandle.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ResourceHandle.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ResourceHandle.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ResourceHandle.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ResourceHandle.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ResourceHandle.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ResourceHandle.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ResourceHandle.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ResourceHandle.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ResourceHandle.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ResourceHandle.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ResourceHandle.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ResourceHandle.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ResourceHandle.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ResourceHandle.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ResourceHandle.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ResourceHandle.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ResourceHandle.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ResourceHandle.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "initialisedSession", "tail" : ": Session", "member" : "com.github.agourlay.cornichon.dsl.ResourceHandle.initialisedSession", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ResourceHandle.html#initialisedSession:com.github.agourlay.cornichon.core.Session", "kind" : "abstract val"}, {"label" : "resourceResults", "tail" : "(): Task[Session]", "member" : "com.github.agourlay.cornichon.dsl.ResourceHandle.resourceResults", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ResourceHandle.html#resourceResults():monix.eval.Task[com.github.agourlay.cornichon.core.Session]", "kind" : "abstract def"}, {"label" : "stopResource", "tail" : "(): Task[Unit]", "member" : "com.github.agourlay.cornichon.dsl.CloseableResource.stopResource", "link" : "com\/github\/agourlay\/cornichon\/dsl\/ResourceHandle.html#stopResource():monix.eval.Task[Unit]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/github\/agourlay\/cornichon\/dsl\/ResourceHandle.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.dsl.Row", "shortDescription" : "", "members_case class" : [{"member" : "com.github.agourlay.cornichon.dsl.Row#<init>", "error" : "unsupported entity"}, {"label" : "fields", "tail" : ": Seq[String]", "member" : "com.github.agourlay.cornichon.dsl.Row.fields", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Row.html#fields:Seq[String]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Row.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Row.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Row.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Row.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Row.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Row.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Row.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Row.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Row.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Row.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Row.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Row.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Row.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Row.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Row.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Row.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/dsl\/Row.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.dsl.SessionSteps", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/dsl\/SessionSteps$.html", "members_object" : [{"label" : "keyIsAbsentError", "tail" : "(keyName: String, session: String): (Boolean) â‡’ String", "member" : "com.github.agourlay.cornichon.dsl.SessionSteps.keyIsAbsentError", "link" : "com\/github\/agourlay\/cornichon\/dsl\/SessionSteps$.html#keyIsAbsentError(keyName:String,session:String):Boolean=>String", "kind" : "def"}, {"label" : "keyIsPresentError", "tail" : "(keyName: String): (Option[String]) â‡’ String", "member" : "com.github.agourlay.cornichon.dsl.SessionSteps.keyIsPresentError", "link" : "com\/github\/agourlay\/cornichon\/dsl\/SessionSteps$.html#keyIsPresentError(keyName:String):Option[String]=>String", "kind" : "def"}, {"label" : "SessionStepBuilder", "tail" : "", "member" : "com.github.agourlay.cornichon.dsl.SessionSteps.SessionStepBuilder", "link" : "com\/github\/agourlay\/cornichon\/dsl\/SessionSteps$.html#SessionStepBuilderextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/dsl\/SessionSteps$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/dsl\/SessionSteps$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/dsl\/SessionSteps$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/dsl\/SessionSteps$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/dsl\/SessionSteps$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/dsl\/SessionSteps$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/dsl\/SessionSteps$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/SessionSteps$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/SessionSteps$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/SessionSteps$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/dsl\/SessionSteps$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/dsl\/SessionSteps$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/dsl\/SessionSteps$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/dsl\/SessionSteps$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/dsl\/SessionSteps$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/dsl\/SessionSteps$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/dsl\/SessionSteps$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/SessionSteps$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/SessionSteps$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.agourlay.cornichon.dsl.StringHeaderParserSupport", "members_trait" : [{"label" : "Unicode", "tail" : "(): Rule[HNil, ::[Int, HNil]]", "member" : "com.github.agourlay.cornichon.dsl.StringHeaderParserSupport.Unicode", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#Unicode:org.parboiled2.Rule[shapeless.HNil,Int::shapeless.HNil]", "kind" : "def"}, {"label" : "EscapedChar", "tail" : "(): Rule[HNil, HNil]", "member" : "com.github.agourlay.cornichon.dsl.StringHeaderParserSupport.EscapedChar", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#EscapedChar:org.parboiled2.Rule[shapeless.HNil,shapeless.HNil]", "kind" : "def"}, {"label" : "NormalChar", "tail" : "(): Rule[HNil, HNil]", "member" : "com.github.agourlay.cornichon.dsl.StringHeaderParserSupport.NormalChar", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#NormalChar:org.parboiled2.Rule[shapeless.HNil,shapeless.HNil]", "kind" : "def"}, {"label" : "Characters", "tail" : "(): Rule[HNil, HNil]", "member" : "com.github.agourlay.cornichon.dsl.StringHeaderParserSupport.Characters", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#Characters:org.parboiled2.Rule[shapeless.HNil,shapeless.HNil]", "kind" : "def"}, {"label" : "HeaderValue", "tail" : "(): Rule[HNil, ::[String, HNil]]", "member" : "com.github.agourlay.cornichon.dsl.StringHeaderParserSupport.HeaderValue", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#HeaderValue:org.parboiled2.Rule[shapeless.HNil,String::shapeless.HNil]", "kind" : "def"}, {"label" : "setSB", "tail" : "(s: String): Rule0", "member" : "org.parboiled2.StringBuilding.setSB", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#setSB(s:String):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "prependSB", "tail" : "(s: String): Rule0", "member" : "org.parboiled2.StringBuilding.prependSB", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#prependSB(s:String):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "prependSB", "tail" : "(c: Char): Rule0", "member" : "org.parboiled2.StringBuilding.prependSB", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#prependSB(c:Char):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "prependSB", "tail" : "(offset: Int): Rule0", "member" : "org.parboiled2.StringBuilding.prependSB", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#prependSB(offset:Int):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "prependSB", "tail" : "(): Rule0", "member" : "org.parboiled2.StringBuilding.prependSB", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#prependSB():org.parboiled2.Rule0", "kind" : "def"}, {"label" : "appendSB", "tail" : "(s: String): Rule0", "member" : "org.parboiled2.StringBuilding.appendSB", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#appendSB(s:String):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "appendSB", "tail" : "(c: Char): Rule0", "member" : "org.parboiled2.StringBuilding.appendSB", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#appendSB(c:Char):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "appendSB", "tail" : "(offset: Int): Rule0", "member" : "org.parboiled2.StringBuilding.appendSB", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#appendSB(offset:Int):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "appendSB", "tail" : "(): Rule0", "member" : "org.parboiled2.StringBuilding.appendSB", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#appendSB():org.parboiled2.Rule0", "kind" : "def"}, {"label" : "clearSB", "tail" : "(): Rule0", "member" : "org.parboiled2.StringBuilding.clearSB", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#clearSB():org.parboiled2.Rule0", "kind" : "def"}, {"label" : "sb", "tail" : ": StringBuilder", "member" : "org.parboiled2.StringBuilding.sb", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#sb:StringBuilder", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/github\/agourlay\/cornichon\/dsl\/StringHeaderParserSupport.html", "kind" : "trait"}], "com.github.agourlay.cornichon.steps.wrapped" : [{"name" : "com.github.agourlay.cornichon.steps.wrapped.AttachAsStep", "shortDescription" : "", "members_case class" : [{"label" : "onNestedSuccess", "tail" : "(resultLogs: Vector[LogInstruction], depth: Int, executionTime: Duration): Vector[LogInstruction]", "member" : "com.github.agourlay.cornichon.steps.wrapped.AttachAsStep.onNestedSuccess", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachAsStep.html#onNestedSuccess(resultLogs:Vector[com.github.agourlay.cornichon.core.LogInstruction],depth:Int,executionTime:scala.concurrent.duration.Duration):Vector[com.github.agourlay.cornichon.core.LogInstruction]", "kind" : "def"}, {"label" : "onNestedError", "tail" : "(resultLogs: Vector[LogInstruction], depth: Int, executionTime: Duration): Vector[LogInstruction]", "member" : "com.github.agourlay.cornichon.steps.wrapped.AttachAsStep.onNestedError", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachAsStep.html#onNestedError(resultLogs:Vector[com.github.agourlay.cornichon.core.LogInstruction],depth:Int,executionTime:scala.concurrent.duration.Duration):Vector[com.github.agourlay.cornichon.core.LogInstruction]", "kind" : "def"}, {"label" : "nestedToRun", "tail" : ": List[Step]", "member" : "com.github.agourlay.cornichon.steps.wrapped.AttachAsStep.nestedToRun", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachAsStep.html#nestedToRun:List[com.github.agourlay.cornichon.core.Step]", "kind" : "val"}, {"label" : "setTitle", "tail" : "(newTitle: String): AttachAsStep", "member" : "com.github.agourlay.cornichon.steps.wrapped.AttachAsStep.setTitle", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachAsStep.html#setTitle(newTitle:String):com.github.agourlay.cornichon.steps.wrapped.AttachAsStep", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.steps.wrapped.AttachAsStep#<init>", "error" : "unsupported entity"}, {"label" : "nested", "tail" : ": List[Step]", "member" : "com.github.agourlay.cornichon.steps.wrapped.AttachAsStep.nested", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachAsStep.html#nested:List[com.github.agourlay.cornichon.core.Step]", "kind" : "val"}, {"label" : "title", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.wrapped.AttachAsStep.title", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachAsStep.html#title:String", "kind" : "val"}, {"label" : "successTitleLog", "tail" : "(depth: Int): SuccessLogInstruction", "member" : "com.github.agourlay.cornichon.core.LogDecoratorStep.successTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachAsStep.html#successTitleLog(depth:Int):com.github.agourlay.cornichon.core.SuccessLogInstruction", "kind" : "def"}, {"label" : "failedTitleLog", "tail" : "(depth: Int): FailureLogInstruction", "member" : "com.github.agourlay.cornichon.core.LogDecoratorStep.failedTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachAsStep.html#failedTitleLog(depth:Int):com.github.agourlay.cornichon.core.FailureLogInstruction", "kind" : "def"}, {"label" : "run", "tail" : "(engine: Engine)(initialRunState: RunState): Task[(RunState, Either[FailedStep, Done])]", "member" : "com.github.agourlay.cornichon.core.LogDecoratorStep.run", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachAsStep.html#run(engine:com.github.agourlay.cornichon.core.Engine)(initialRunState:com.github.agourlay.cornichon.core.RunState):monix.eval.Task[(com.github.agourlay.cornichon.core.RunState,Either[com.github.agourlay.cornichon.core.FailedStep,com.github.agourlay.cornichon.core.Done])]", "kind" : "def"}, {"label" : "chain", "tail" : "(others: (Session) â‡’ List[Step]): Step", "member" : "com.github.agourlay.cornichon.core.Step.chain", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachAsStep.html#chain(others:com.github.agourlay.cornichon.core.Session=>List[com.github.agourlay.cornichon.core.Step]):com.github.agourlay.cornichon.core.Step", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachAsStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachAsStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachAsStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachAsStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachAsStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachAsStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachAsStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachAsStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachAsStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachAsStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachAsStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachAsStep.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachAsStep.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachAsStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachAsStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachAsStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachAsStep.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.wrapped.AttachStep", "shortDescription" : "", "members_case class" : [{"label" : "run", "tail" : "(engine: Engine)(initialRunState: RunState): Task[(RunState, Either[FailedStep, Done])]", "member" : "com.github.agourlay.cornichon.steps.wrapped.AttachStep.run", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachStep.html#run(engine:com.github.agourlay.cornichon.core.Engine)(initialRunState:com.github.agourlay.cornichon.core.RunState):monix.eval.Task[(com.github.agourlay.cornichon.core.RunState,Either[com.github.agourlay.cornichon.core.FailedStep,com.github.agourlay.cornichon.core.Done])]", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.steps.wrapped.AttachStep#<init>", "error" : "unsupported entity"}, {"label" : "nested", "tail" : ": List[Step]", "member" : "com.github.agourlay.cornichon.steps.wrapped.AttachStep.nested", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachStep.html#nested:List[com.github.agourlay.cornichon.core.Step]", "kind" : "val"}, {"label" : "title", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.wrapped.AttachStep.title", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachStep.html#title:String", "kind" : "val"}, {"label" : "successTitleLog", "tail" : "(depth: Int): SuccessLogInstruction", "member" : "com.github.agourlay.cornichon.core.WrapperStep.successTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachStep.html#successTitleLog(depth:Int):com.github.agourlay.cornichon.core.SuccessLogInstruction", "kind" : "def"}, {"label" : "failedTitleLog", "tail" : "(depth: Int): FailureLogInstruction", "member" : "com.github.agourlay.cornichon.core.WrapperStep.failedTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachStep.html#failedTitleLog(depth:Int):com.github.agourlay.cornichon.core.FailureLogInstruction", "kind" : "def"}, {"label" : "setTitle", "tail" : "(newTitle: String): WrapperStep", "member" : "com.github.agourlay.cornichon.core.WrapperStep.setTitle", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachStep.html#setTitle(newTitle:String):com.github.agourlay.cornichon.core.WrapperStep", "kind" : "def"}, {"label" : "chain", "tail" : "(others: (Session) â‡’ List[Step]): Step", "member" : "com.github.agourlay.cornichon.core.Step.chain", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachStep.html#chain(others:com.github.agourlay.cornichon.core.Session=>List[com.github.agourlay.cornichon.core.Step]):com.github.agourlay.cornichon.core.Step", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachStep.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachStep.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/AttachStep.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.wrapped.ConcurrentlyError", "shortDescription" : "", "members_case class" : [{"label" : "causedBy", "tail" : ": Some[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.steps.wrapped.ConcurrentlyError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyError.html#causedBy:Some[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.wrapped.ConcurrentlyError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.steps.wrapped.ConcurrentlyError#<init>", "error" : "unsupported entity"}, {"label" : "cause", "tail" : ": Throwable", "member" : "com.github.agourlay.cornichon.steps.wrapped.ConcurrentlyError.cause", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyError.html#cause:Throwable", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.wrapped.ConcurrentlyStep", "shortDescription" : "", "members_case class" : [{"label" : "run", "tail" : "(engine: Engine)(initialRunState: RunState): Task[(RunState, Either[FailedStep, Done])]", "member" : "com.github.agourlay.cornichon.steps.wrapped.ConcurrentlyStep.run", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyStep.html#run(engine:com.github.agourlay.cornichon.core.Engine)(initialRunState:com.github.agourlay.cornichon.core.RunState):monix.eval.Task[(com.github.agourlay.cornichon.core.RunState,Either[com.github.agourlay.cornichon.core.FailedStep,com.github.agourlay.cornichon.core.Done])]", "kind" : "def"}, {"label" : "title", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.wrapped.ConcurrentlyStep.title", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyStep.html#title:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.steps.wrapped.ConcurrentlyStep#<init>", "error" : "unsupported entity"}, {"label" : "maxTime", "tail" : ": FiniteDuration", "member" : "com.github.agourlay.cornichon.steps.wrapped.ConcurrentlyStep.maxTime", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyStep.html#maxTime:scala.concurrent.duration.FiniteDuration", "kind" : "val"}, {"label" : "factor", "tail" : ": Int", "member" : "com.github.agourlay.cornichon.steps.wrapped.ConcurrentlyStep.factor", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyStep.html#factor:Int", "kind" : "val"}, {"label" : "nested", "tail" : ": List[Step]", "member" : "com.github.agourlay.cornichon.steps.wrapped.ConcurrentlyStep.nested", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyStep.html#nested:List[com.github.agourlay.cornichon.core.Step]", "kind" : "val"}, {"label" : "successTitleLog", "tail" : "(depth: Int): SuccessLogInstruction", "member" : "com.github.agourlay.cornichon.core.WrapperStep.successTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyStep.html#successTitleLog(depth:Int):com.github.agourlay.cornichon.core.SuccessLogInstruction", "kind" : "def"}, {"label" : "failedTitleLog", "tail" : "(depth: Int): FailureLogInstruction", "member" : "com.github.agourlay.cornichon.core.WrapperStep.failedTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyStep.html#failedTitleLog(depth:Int):com.github.agourlay.cornichon.core.FailureLogInstruction", "kind" : "def"}, {"label" : "setTitle", "tail" : "(newTitle: String): WrapperStep", "member" : "com.github.agourlay.cornichon.core.WrapperStep.setTitle", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyStep.html#setTitle(newTitle:String):com.github.agourlay.cornichon.core.WrapperStep", "kind" : "def"}, {"label" : "chain", "tail" : "(others: (Session) â‡’ List[Step]): Step", "member" : "com.github.agourlay.cornichon.core.Step.chain", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyStep.html#chain(others:com.github.agourlay.cornichon.core.Session=>List[com.github.agourlay.cornichon.core.Step]):com.github.agourlay.cornichon.core.Step", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyStep.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyStep.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyStep.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.wrapped.ConcurrentlyTimeout", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.wrapped.ConcurrentlyTimeout.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyTimeout.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.steps.wrapped.ConcurrentlyTimeout#<init>", "error" : "unsupported entity"}, {"label" : "success", "tail" : ": Int", "member" : "com.github.agourlay.cornichon.steps.wrapped.ConcurrentlyTimeout.success", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyTimeout.html#success:Int", "kind" : "val"}, {"label" : "factor", "tail" : ": Int", "member" : "com.github.agourlay.cornichon.steps.wrapped.ConcurrentlyTimeout.factor", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyTimeout.html#factor:Int", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyTimeout.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyTimeout.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyTimeout.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyTimeout.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyTimeout.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyTimeout.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyTimeout.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyTimeout.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyTimeout.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyTimeout.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyTimeout.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyTimeout.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyTimeout.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyTimeout.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyTimeout.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyTimeout.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyTimeout.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyTimeout.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyTimeout.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/ConcurrentlyTimeout.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.wrapped.EventuallyBlockSucceedAfterMaxDuration", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyBlockSucceedAfterMaxDuration$.html", "members_object" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.wrapped.EventuallyBlockSucceedAfterMaxDuration.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyBlockSucceedAfterMaxDuration$.html#baseErrorMessage:String", "kind" : "lazy val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyBlockSucceedAfterMaxDuration$.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyBlockSucceedAfterMaxDuration$.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyBlockSucceedAfterMaxDuration$.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyBlockSucceedAfterMaxDuration$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyBlockSucceedAfterMaxDuration$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyBlockSucceedAfterMaxDuration$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyBlockSucceedAfterMaxDuration$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyBlockSucceedAfterMaxDuration$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyBlockSucceedAfterMaxDuration$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyBlockSucceedAfterMaxDuration$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyBlockSucceedAfterMaxDuration$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyBlockSucceedAfterMaxDuration$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyBlockSucceedAfterMaxDuration$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyBlockSucceedAfterMaxDuration$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyBlockSucceedAfterMaxDuration$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyBlockSucceedAfterMaxDuration$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyBlockSucceedAfterMaxDuration$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyBlockSucceedAfterMaxDuration$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyBlockSucceedAfterMaxDuration$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyBlockSucceedAfterMaxDuration$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.agourlay.cornichon.steps.wrapped.EventuallyConf", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf$.html", "members_object" : [{"label" : "empty", "tail" : ": EventuallyConf", "member" : "com.github.agourlay.cornichon.steps.wrapped.EventuallyConf.empty", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf$.html#empty:com.github.agourlay.cornichon.steps.wrapped.EventuallyConf", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "consume", "tail" : "(burnt: FiniteDuration): EventuallyConf", "member" : "com.github.agourlay.cornichon.steps.wrapped.EventuallyConf.consume", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf.html#consume(burnt:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.steps.wrapped.EventuallyConf", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.steps.wrapped.EventuallyConf#<init>", "error" : "unsupported entity"}, {"label" : "interval", "tail" : ": FiniteDuration", "member" : "com.github.agourlay.cornichon.steps.wrapped.EventuallyConf.interval", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf.html#interval:scala.concurrent.duration.FiniteDuration", "kind" : "val"}, {"label" : "maxTime", "tail" : ": FiniteDuration", "member" : "com.github.agourlay.cornichon.steps.wrapped.EventuallyConf.maxTime", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf.html#maxTime:scala.concurrent.duration.FiniteDuration", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyConf.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.wrapped.EventuallyStep", "shortDescription" : "", "members_case class" : [{"label" : "run", "tail" : "(engine: Engine)(initialRunState: RunState): Task[(RunState, Either[FailedStep, Done])]", "member" : "com.github.agourlay.cornichon.steps.wrapped.EventuallyStep.run", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyStep.html#run(engine:com.github.agourlay.cornichon.core.Engine)(initialRunState:com.github.agourlay.cornichon.core.RunState):monix.eval.Task[(com.github.agourlay.cornichon.core.RunState,Either[com.github.agourlay.cornichon.core.FailedStep,com.github.agourlay.cornichon.core.Done])]", "kind" : "def"}, {"label" : "title", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.wrapped.EventuallyStep.title", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyStep.html#title:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.steps.wrapped.EventuallyStep#<init>", "error" : "unsupported entity"}, {"label" : "conf", "tail" : ": EventuallyConf", "member" : "com.github.agourlay.cornichon.steps.wrapped.EventuallyStep.conf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyStep.html#conf:com.github.agourlay.cornichon.steps.wrapped.EventuallyConf", "kind" : "val"}, {"label" : "nested", "tail" : ": List[Step]", "member" : "com.github.agourlay.cornichon.steps.wrapped.EventuallyStep.nested", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyStep.html#nested:List[com.github.agourlay.cornichon.core.Step]", "kind" : "val"}, {"label" : "successTitleLog", "tail" : "(depth: Int): SuccessLogInstruction", "member" : "com.github.agourlay.cornichon.core.WrapperStep.successTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyStep.html#successTitleLog(depth:Int):com.github.agourlay.cornichon.core.SuccessLogInstruction", "kind" : "def"}, {"label" : "failedTitleLog", "tail" : "(depth: Int): FailureLogInstruction", "member" : "com.github.agourlay.cornichon.core.WrapperStep.failedTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyStep.html#failedTitleLog(depth:Int):com.github.agourlay.cornichon.core.FailureLogInstruction", "kind" : "def"}, {"label" : "setTitle", "tail" : "(newTitle: String): WrapperStep", "member" : "com.github.agourlay.cornichon.core.WrapperStep.setTitle", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyStep.html#setTitle(newTitle:String):com.github.agourlay.cornichon.core.WrapperStep", "kind" : "def"}, {"label" : "chain", "tail" : "(others: (Session) â‡’ List[Step]): Step", "member" : "com.github.agourlay.cornichon.core.Step.chain", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyStep.html#chain(others:com.github.agourlay.cornichon.core.Session=>List[com.github.agourlay.cornichon.core.Step]):com.github.agourlay.cornichon.core.Step", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyStep.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyStep.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/EventuallyStep.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.wrapped.FlatMapStep", "shortDescription" : "", "members_case class" : [{"label" : "run", "tail" : "(engine: Engine)(initialRunState: RunState): Task[(RunState, Either[FailedStep, Done])]", "member" : "com.github.agourlay.cornichon.steps.wrapped.FlatMapStep.run", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/FlatMapStep.html#run(engine:com.github.agourlay.cornichon.core.Engine)(initialRunState:com.github.agourlay.cornichon.core.RunState):monix.eval.Task[(com.github.agourlay.cornichon.core.RunState,Either[com.github.agourlay.cornichon.core.FailedStep,com.github.agourlay.cornichon.core.Done])]", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.steps.wrapped.FlatMapStep#<init>", "error" : "unsupported entity"}, {"label" : "title", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.wrapped.FlatMapStep.title", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/FlatMapStep.html#title:String", "kind" : "val"}, {"label" : "nestedProducers", "tail" : ": (Session) â‡’ List[Step]", "member" : "com.github.agourlay.cornichon.steps.wrapped.FlatMapStep.nestedProducers", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/FlatMapStep.html#nestedProducers:com.github.agourlay.cornichon.core.Session=>List[com.github.agourlay.cornichon.core.Step]", "kind" : "val"}, {"label" : "started", "tail" : ": Step", "member" : "com.github.agourlay.cornichon.steps.wrapped.FlatMapStep.started", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/FlatMapStep.html#started:com.github.agourlay.cornichon.core.Step", "kind" : "val"}, {"label" : "successTitleLog", "tail" : "(depth: Int): SuccessLogInstruction", "member" : "com.github.agourlay.cornichon.core.WrapperStep.successTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/FlatMapStep.html#successTitleLog(depth:Int):com.github.agourlay.cornichon.core.SuccessLogInstruction", "kind" : "def"}, {"label" : "failedTitleLog", "tail" : "(depth: Int): FailureLogInstruction", "member" : "com.github.agourlay.cornichon.core.WrapperStep.failedTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/FlatMapStep.html#failedTitleLog(depth:Int):com.github.agourlay.cornichon.core.FailureLogInstruction", "kind" : "def"}, {"label" : "setTitle", "tail" : "(newTitle: String): WrapperStep", "member" : "com.github.agourlay.cornichon.core.WrapperStep.setTitle", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/FlatMapStep.html#setTitle(newTitle:String):com.github.agourlay.cornichon.core.WrapperStep", "kind" : "def"}, {"label" : "chain", "tail" : "(others: (Session) â‡’ List[Step]): Step", "member" : "com.github.agourlay.cornichon.core.Step.chain", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/FlatMapStep.html#chain(others:com.github.agourlay.cornichon.core.Session=>List[com.github.agourlay.cornichon.core.Step]):com.github.agourlay.cornichon.core.Step", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/FlatMapStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/FlatMapStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/FlatMapStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/FlatMapStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/FlatMapStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/FlatMapStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/FlatMapStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/FlatMapStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/FlatMapStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/FlatMapStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/FlatMapStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/FlatMapStep.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/FlatMapStep.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/FlatMapStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/FlatMapStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/FlatMapStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/FlatMapStep.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.wrapped.LogDurationStep", "shortDescription" : "", "members_case class" : [{"label" : "onNestedSuccess", "tail" : "(resultLogs: Vector[LogInstruction], depth: Int, executionTime: Duration): Vector[LogInstruction]", "member" : "com.github.agourlay.cornichon.steps.wrapped.LogDurationStep.onNestedSuccess", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html#onNestedSuccess(resultLogs:Vector[com.github.agourlay.cornichon.core.LogInstruction],depth:Int,executionTime:scala.concurrent.duration.Duration):Vector[com.github.agourlay.cornichon.core.LogInstruction]", "kind" : "def"}, {"label" : "onNestedError", "tail" : "(resultLogs: Vector[LogInstruction], depth: Int, executionTime: Duration): Vector[LogInstruction]", "member" : "com.github.agourlay.cornichon.steps.wrapped.LogDurationStep.onNestedError", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html#onNestedError(resultLogs:Vector[com.github.agourlay.cornichon.core.LogInstruction],depth:Int,executionTime:scala.concurrent.duration.Duration):Vector[com.github.agourlay.cornichon.core.LogInstruction]", "kind" : "def"}, {"label" : "nestedToRun", "tail" : ": List[Step]", "member" : "com.github.agourlay.cornichon.steps.wrapped.LogDurationStep.nestedToRun", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html#nestedToRun:List[com.github.agourlay.cornichon.core.Step]", "kind" : "val"}, {"label" : "title", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.wrapped.LogDurationStep.title", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html#title:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.steps.wrapped.LogDurationStep#<init>", "error" : "unsupported entity"}, {"label" : "label", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.wrapped.LogDurationStep.label", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html#label:String", "kind" : "val"}, {"label" : "nested", "tail" : ": List[Step]", "member" : "com.github.agourlay.cornichon.steps.wrapped.LogDurationStep.nested", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html#nested:List[com.github.agourlay.cornichon.core.Step]", "kind" : "val"}, {"label" : "successTitleLog", "tail" : "(depth: Int): SuccessLogInstruction", "member" : "com.github.agourlay.cornichon.core.LogDecoratorStep.successTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html#successTitleLog(depth:Int):com.github.agourlay.cornichon.core.SuccessLogInstruction", "kind" : "def"}, {"label" : "failedTitleLog", "tail" : "(depth: Int): FailureLogInstruction", "member" : "com.github.agourlay.cornichon.core.LogDecoratorStep.failedTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html#failedTitleLog(depth:Int):com.github.agourlay.cornichon.core.FailureLogInstruction", "kind" : "def"}, {"label" : "setTitle", "tail" : "(newTitle: String): LogDecoratorStep", "member" : "com.github.agourlay.cornichon.core.LogDecoratorStep.setTitle", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html#setTitle(newTitle:String):com.github.agourlay.cornichon.core.LogDecoratorStep", "kind" : "def"}, {"label" : "run", "tail" : "(engine: Engine)(initialRunState: RunState): Task[(RunState, Either[FailedStep, Done])]", "member" : "com.github.agourlay.cornichon.core.LogDecoratorStep.run", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html#run(engine:com.github.agourlay.cornichon.core.Engine)(initialRunState:com.github.agourlay.cornichon.core.RunState):monix.eval.Task[(com.github.agourlay.cornichon.core.RunState,Either[com.github.agourlay.cornichon.core.FailedStep,com.github.agourlay.cornichon.core.Done])]", "kind" : "def"}, {"label" : "chain", "tail" : "(others: (Session) â‡’ List[Step]): Step", "member" : "com.github.agourlay.cornichon.core.Step.chain", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html#chain(others:com.github.agourlay.cornichon.core.Session=>List[com.github.agourlay.cornichon.core.Step]):com.github.agourlay.cornichon.core.Step", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/LogDurationStep.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.wrapped.RepeatBlockContainFailedSteps", "shortDescription" : "", "members_case class" : [{"label" : "causedBy", "tail" : ": Some[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatBlockContainFailedSteps.causedBy", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatBlockContainFailedSteps.html#causedBy:Some[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatBlockContainFailedSteps.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatBlockContainFailedSteps.html#baseErrorMessage:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatBlockContainFailedSteps#<init>", "error" : "unsupported entity"}, {"label" : "errors", "tail" : ": NonEmptyList[CornichonError]", "member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatBlockContainFailedSteps.errors", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatBlockContainFailedSteps.html#errors:cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]", "kind" : "val"}, {"label" : "failedOccurence", "tail" : ": Int", "member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatBlockContainFailedSteps.failedOccurence", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatBlockContainFailedSteps.html#failedOccurence:Int", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatBlockContainFailedSteps.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatBlockContainFailedSteps.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatBlockContainFailedSteps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatBlockContainFailedSteps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatBlockContainFailedSteps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatBlockContainFailedSteps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatBlockContainFailedSteps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatBlockContainFailedSteps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatBlockContainFailedSteps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatBlockContainFailedSteps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatBlockContainFailedSteps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatBlockContainFailedSteps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatBlockContainFailedSteps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatBlockContainFailedSteps.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatBlockContainFailedSteps.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatBlockContainFailedSteps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatBlockContainFailedSteps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatBlockContainFailedSteps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatBlockContainFailedSteps.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.wrapped.RepeatDuringBlockContainFailedSteps", "shortDescription" : "", "members_case class" : [{"label" : "causedBy", "tail" : ": Some[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatDuringBlockContainFailedSteps.causedBy", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringBlockContainFailedSteps.html#causedBy:Some[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatDuringBlockContainFailedSteps.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringBlockContainFailedSteps.html#baseErrorMessage:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatDuringBlockContainFailedSteps#<init>", "error" : "unsupported entity"}, {"label" : "errors", "tail" : ": NonEmptyList[CornichonError]", "member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatDuringBlockContainFailedSteps.errors", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringBlockContainFailedSteps.html#errors:cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]", "kind" : "val"}, {"label" : "duration", "tail" : ": FiniteDuration", "member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatDuringBlockContainFailedSteps.duration", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringBlockContainFailedSteps.html#duration:scala.concurrent.duration.FiniteDuration", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringBlockContainFailedSteps.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringBlockContainFailedSteps.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringBlockContainFailedSteps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringBlockContainFailedSteps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringBlockContainFailedSteps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringBlockContainFailedSteps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringBlockContainFailedSteps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringBlockContainFailedSteps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringBlockContainFailedSteps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringBlockContainFailedSteps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringBlockContainFailedSteps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringBlockContainFailedSteps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringBlockContainFailedSteps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringBlockContainFailedSteps.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringBlockContainFailedSteps.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringBlockContainFailedSteps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringBlockContainFailedSteps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringBlockContainFailedSteps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringBlockContainFailedSteps.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.wrapped.RepeatDuringStep", "shortDescription" : "", "members_case class" : [{"label" : "run", "tail" : "(engine: Engine)(initialRunState: RunState): Task[(RunState, Either[FailedStep, Done])]", "member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatDuringStep.run", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringStep.html#run(engine:com.github.agourlay.cornichon.core.Engine)(initialRunState:com.github.agourlay.cornichon.core.RunState):monix.eval.Task[(com.github.agourlay.cornichon.core.RunState,Either[com.github.agourlay.cornichon.core.FailedStep,com.github.agourlay.cornichon.core.Done])]", "kind" : "def"}, {"label" : "title", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatDuringStep.title", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringStep.html#title:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatDuringStep#<init>", "error" : "unsupported entity"}, {"label" : "duration", "tail" : ": FiniteDuration", "member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatDuringStep.duration", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringStep.html#duration:scala.concurrent.duration.FiniteDuration", "kind" : "val"}, {"label" : "nested", "tail" : ": List[Step]", "member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatDuringStep.nested", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringStep.html#nested:List[com.github.agourlay.cornichon.core.Step]", "kind" : "val"}, {"label" : "successTitleLog", "tail" : "(depth: Int): SuccessLogInstruction", "member" : "com.github.agourlay.cornichon.core.WrapperStep.successTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringStep.html#successTitleLog(depth:Int):com.github.agourlay.cornichon.core.SuccessLogInstruction", "kind" : "def"}, {"label" : "failedTitleLog", "tail" : "(depth: Int): FailureLogInstruction", "member" : "com.github.agourlay.cornichon.core.WrapperStep.failedTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringStep.html#failedTitleLog(depth:Int):com.github.agourlay.cornichon.core.FailureLogInstruction", "kind" : "def"}, {"label" : "setTitle", "tail" : "(newTitle: String): WrapperStep", "member" : "com.github.agourlay.cornichon.core.WrapperStep.setTitle", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringStep.html#setTitle(newTitle:String):com.github.agourlay.cornichon.core.WrapperStep", "kind" : "def"}, {"label" : "chain", "tail" : "(others: (Session) â‡’ List[Step]): Step", "member" : "com.github.agourlay.cornichon.core.Step.chain", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringStep.html#chain(others:com.github.agourlay.cornichon.core.Session=>List[com.github.agourlay.cornichon.core.Step]):com.github.agourlay.cornichon.core.Step", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringStep.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringStep.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatDuringStep.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.wrapped.RepeatStep", "shortDescription" : "", "members_case class" : [{"label" : "run", "tail" : "(engine: Engine)(initialRunState: RunState): Task[(RunState, Either[FailedStep, Done])]", "member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatStep.run", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatStep.html#run(engine:com.github.agourlay.cornichon.core.Engine)(initialRunState:com.github.agourlay.cornichon.core.RunState):monix.eval.Task[(com.github.agourlay.cornichon.core.RunState,Either[com.github.agourlay.cornichon.core.FailedStep,com.github.agourlay.cornichon.core.Done])]", "kind" : "def"}, {"label" : "title", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatStep.title", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatStep.html#title:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatStep#<init>", "error" : "unsupported entity"}, {"label" : "indiceName", "tail" : ": Option[String]", "member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatStep.indiceName", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatStep.html#indiceName:Option[String]", "kind" : "val"}, {"label" : "occurrence", "tail" : ": Int", "member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatStep.occurrence", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatStep.html#occurrence:Int", "kind" : "val"}, {"label" : "nested", "tail" : ": List[Step]", "member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatStep.nested", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatStep.html#nested:List[com.github.agourlay.cornichon.core.Step]", "kind" : "val"}, {"label" : "successTitleLog", "tail" : "(depth: Int): SuccessLogInstruction", "member" : "com.github.agourlay.cornichon.core.WrapperStep.successTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatStep.html#successTitleLog(depth:Int):com.github.agourlay.cornichon.core.SuccessLogInstruction", "kind" : "def"}, {"label" : "failedTitleLog", "tail" : "(depth: Int): FailureLogInstruction", "member" : "com.github.agourlay.cornichon.core.WrapperStep.failedTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatStep.html#failedTitleLog(depth:Int):com.github.agourlay.cornichon.core.FailureLogInstruction", "kind" : "def"}, {"label" : "setTitle", "tail" : "(newTitle: String): WrapperStep", "member" : "com.github.agourlay.cornichon.core.WrapperStep.setTitle", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatStep.html#setTitle(newTitle:String):com.github.agourlay.cornichon.core.WrapperStep", "kind" : "def"}, {"label" : "chain", "tail" : "(others: (Session) â‡’ List[Step]): Step", "member" : "com.github.agourlay.cornichon.core.Step.chain", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatStep.html#chain(others:com.github.agourlay.cornichon.core.Session=>List[com.github.agourlay.cornichon.core.Step]):com.github.agourlay.cornichon.core.Step", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatStep.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatStep.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatStep.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.wrapped.RepeatWithBlockContainFailedSteps", "shortDescription" : "", "members_case class" : [{"label" : "causedBy", "tail" : ": Some[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatWithBlockContainFailedSteps.causedBy", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithBlockContainFailedSteps.html#causedBy:Some[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatWithBlockContainFailedSteps.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithBlockContainFailedSteps.html#baseErrorMessage:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatWithBlockContainFailedSteps#<init>", "error" : "unsupported entity"}, {"label" : "errors", "tail" : ": NonEmptyList[CornichonError]", "member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatWithBlockContainFailedSteps.errors", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithBlockContainFailedSteps.html#errors:cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]", "kind" : "val"}, {"label" : "element", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatWithBlockContainFailedSteps.element", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithBlockContainFailedSteps.html#element:String", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithBlockContainFailedSteps.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithBlockContainFailedSteps.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithBlockContainFailedSteps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithBlockContainFailedSteps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithBlockContainFailedSteps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithBlockContainFailedSteps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithBlockContainFailedSteps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithBlockContainFailedSteps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithBlockContainFailedSteps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithBlockContainFailedSteps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithBlockContainFailedSteps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithBlockContainFailedSteps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithBlockContainFailedSteps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithBlockContainFailedSteps.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithBlockContainFailedSteps.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithBlockContainFailedSteps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithBlockContainFailedSteps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithBlockContainFailedSteps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithBlockContainFailedSteps.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.wrapped.RepeatWithStep", "shortDescription" : "", "members_case class" : [{"label" : "run", "tail" : "(engine: Engine)(initialRunState: RunState): Task[(RunState, Either[FailedStep, Done])]", "member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatWithStep.run", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithStep.html#run(engine:com.github.agourlay.cornichon.core.Engine)(initialRunState:com.github.agourlay.cornichon.core.RunState):monix.eval.Task[(com.github.agourlay.cornichon.core.RunState,Either[com.github.agourlay.cornichon.core.FailedStep,com.github.agourlay.cornichon.core.Done])]", "kind" : "def"}, {"label" : "title", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatWithStep.title", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithStep.html#title:String", "kind" : "val"}, {"label" : "printElements", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatWithStep.printElements", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithStep.html#printElements:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatWithStep#<init>", "error" : "unsupported entity"}, {"label" : "elementName", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatWithStep.elementName", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithStep.html#elementName:String", "kind" : "val"}, {"label" : "elements", "tail" : ": List[String]", "member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatWithStep.elements", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithStep.html#elements:List[String]", "kind" : "val"}, {"label" : "nested", "tail" : ": List[Step]", "member" : "com.github.agourlay.cornichon.steps.wrapped.RepeatWithStep.nested", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithStep.html#nested:List[com.github.agourlay.cornichon.core.Step]", "kind" : "val"}, {"label" : "successTitleLog", "tail" : "(depth: Int): SuccessLogInstruction", "member" : "com.github.agourlay.cornichon.core.WrapperStep.successTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithStep.html#successTitleLog(depth:Int):com.github.agourlay.cornichon.core.SuccessLogInstruction", "kind" : "def"}, {"label" : "failedTitleLog", "tail" : "(depth: Int): FailureLogInstruction", "member" : "com.github.agourlay.cornichon.core.WrapperStep.failedTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithStep.html#failedTitleLog(depth:Int):com.github.agourlay.cornichon.core.FailureLogInstruction", "kind" : "def"}, {"label" : "setTitle", "tail" : "(newTitle: String): WrapperStep", "member" : "com.github.agourlay.cornichon.core.WrapperStep.setTitle", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithStep.html#setTitle(newTitle:String):com.github.agourlay.cornichon.core.WrapperStep", "kind" : "def"}, {"label" : "chain", "tail" : "(others: (Session) â‡’ List[Step]): Step", "member" : "com.github.agourlay.cornichon.core.Step.chain", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithStep.html#chain(others:com.github.agourlay.cornichon.core.Session=>List[com.github.agourlay.cornichon.core.Step]):com.github.agourlay.cornichon.core.Step", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithStep.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithStep.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RepeatWithStep.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.wrapped.RetryMaxBlockReachedLimit", "shortDescription" : "", "members_case class" : [{"label" : "causedBy", "tail" : ": Some[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.steps.wrapped.RetryMaxBlockReachedLimit.causedBy", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxBlockReachedLimit.html#causedBy:Some[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.wrapped.RetryMaxBlockReachedLimit.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxBlockReachedLimit.html#baseErrorMessage:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.steps.wrapped.RetryMaxBlockReachedLimit#<init>", "error" : "unsupported entity"}, {"label" : "errors", "tail" : ": NonEmptyList[CornichonError]", "member" : "com.github.agourlay.cornichon.steps.wrapped.RetryMaxBlockReachedLimit.errors", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxBlockReachedLimit.html#errors:cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]", "kind" : "val"}, {"label" : "limit", "tail" : ": Int", "member" : "com.github.agourlay.cornichon.steps.wrapped.RetryMaxBlockReachedLimit.limit", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxBlockReachedLimit.html#limit:Int", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxBlockReachedLimit.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxBlockReachedLimit.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxBlockReachedLimit.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxBlockReachedLimit.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxBlockReachedLimit.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxBlockReachedLimit.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxBlockReachedLimit.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxBlockReachedLimit.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxBlockReachedLimit.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxBlockReachedLimit.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxBlockReachedLimit.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxBlockReachedLimit.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxBlockReachedLimit.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxBlockReachedLimit.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxBlockReachedLimit.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxBlockReachedLimit.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxBlockReachedLimit.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxBlockReachedLimit.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxBlockReachedLimit.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.wrapped.RetryMaxStep", "shortDescription" : "", "members_case class" : [{"label" : "run", "tail" : "(engine: Engine)(initialRunState: RunState): Task[(RunState, Either[FailedStep, Done])]", "member" : "com.github.agourlay.cornichon.steps.wrapped.RetryMaxStep.run", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxStep.html#run(engine:com.github.agourlay.cornichon.core.Engine)(initialRunState:com.github.agourlay.cornichon.core.RunState):monix.eval.Task[(com.github.agourlay.cornichon.core.RunState,Either[com.github.agourlay.cornichon.core.FailedStep,com.github.agourlay.cornichon.core.Done])]", "kind" : "def"}, {"label" : "title", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.wrapped.RetryMaxStep.title", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxStep.html#title:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.steps.wrapped.RetryMaxStep#<init>", "error" : "unsupported entity"}, {"label" : "limit", "tail" : ": Int", "member" : "com.github.agourlay.cornichon.steps.wrapped.RetryMaxStep.limit", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxStep.html#limit:Int", "kind" : "val"}, {"label" : "nested", "tail" : ": List[Step]", "member" : "com.github.agourlay.cornichon.steps.wrapped.RetryMaxStep.nested", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxStep.html#nested:List[com.github.agourlay.cornichon.core.Step]", "kind" : "val"}, {"label" : "successTitleLog", "tail" : "(depth: Int): SuccessLogInstruction", "member" : "com.github.agourlay.cornichon.core.WrapperStep.successTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxStep.html#successTitleLog(depth:Int):com.github.agourlay.cornichon.core.SuccessLogInstruction", "kind" : "def"}, {"label" : "failedTitleLog", "tail" : "(depth: Int): FailureLogInstruction", "member" : "com.github.agourlay.cornichon.core.WrapperStep.failedTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxStep.html#failedTitleLog(depth:Int):com.github.agourlay.cornichon.core.FailureLogInstruction", "kind" : "def"}, {"label" : "setTitle", "tail" : "(newTitle: String): WrapperStep", "member" : "com.github.agourlay.cornichon.core.WrapperStep.setTitle", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxStep.html#setTitle(newTitle:String):com.github.agourlay.cornichon.core.WrapperStep", "kind" : "def"}, {"label" : "chain", "tail" : "(others: (Session) â‡’ List[Step]): Step", "member" : "com.github.agourlay.cornichon.core.Step.chain", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxStep.html#chain(others:com.github.agourlay.cornichon.core.Session=>List[com.github.agourlay.cornichon.core.Step]):com.github.agourlay.cornichon.core.Step", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxStep.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxStep.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/RetryMaxStep.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.wrapped.WithBlockScopedResource", "shortDescription" : "", "members_case class" : [{"label" : "run", "tail" : "(engine: Engine)(initialRunState: RunState): Task[(RunState, Either[FailedStep, Done])]", "member" : "com.github.agourlay.cornichon.steps.wrapped.WithBlockScopedResource.run", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithBlockScopedResource.html#run(engine:com.github.agourlay.cornichon.core.Engine)(initialRunState:com.github.agourlay.cornichon.core.RunState):monix.eval.Task[(com.github.agourlay.cornichon.core.RunState,Either[com.github.agourlay.cornichon.core.FailedStep,com.github.agourlay.cornichon.core.Done])]", "kind" : "def"}, {"label" : "title", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.wrapped.WithBlockScopedResource.title", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithBlockScopedResource.html#title:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.steps.wrapped.WithBlockScopedResource#<init>", "error" : "unsupported entity"}, {"label" : "resource", "tail" : ": BlockScopedResource", "member" : "com.github.agourlay.cornichon.steps.wrapped.WithBlockScopedResource.resource", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithBlockScopedResource.html#resource:com.github.agourlay.cornichon.dsl.BlockScopedResource", "kind" : "val"}, {"label" : "nested", "tail" : ": List[Step]", "member" : "com.github.agourlay.cornichon.steps.wrapped.WithBlockScopedResource.nested", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithBlockScopedResource.html#nested:List[com.github.agourlay.cornichon.core.Step]", "kind" : "val"}, {"label" : "successTitleLog", "tail" : "(depth: Int): SuccessLogInstruction", "member" : "com.github.agourlay.cornichon.core.WrapperStep.successTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithBlockScopedResource.html#successTitleLog(depth:Int):com.github.agourlay.cornichon.core.SuccessLogInstruction", "kind" : "def"}, {"label" : "failedTitleLog", "tail" : "(depth: Int): FailureLogInstruction", "member" : "com.github.agourlay.cornichon.core.WrapperStep.failedTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithBlockScopedResource.html#failedTitleLog(depth:Int):com.github.agourlay.cornichon.core.FailureLogInstruction", "kind" : "def"}, {"label" : "setTitle", "tail" : "(newTitle: String): WrapperStep", "member" : "com.github.agourlay.cornichon.core.WrapperStep.setTitle", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithBlockScopedResource.html#setTitle(newTitle:String):com.github.agourlay.cornichon.core.WrapperStep", "kind" : "def"}, {"label" : "chain", "tail" : "(others: (Session) â‡’ List[Step]): Step", "member" : "com.github.agourlay.cornichon.core.Step.chain", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithBlockScopedResource.html#chain(others:com.github.agourlay.cornichon.core.Session=>List[com.github.agourlay.cornichon.core.Step]):com.github.agourlay.cornichon.core.Step", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithBlockScopedResource.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithBlockScopedResource.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithBlockScopedResource.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithBlockScopedResource.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithBlockScopedResource.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithBlockScopedResource.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithBlockScopedResource.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithBlockScopedResource.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithBlockScopedResource.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithBlockScopedResource.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithBlockScopedResource.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithBlockScopedResource.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithBlockScopedResource.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithBlockScopedResource.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithBlockScopedResource.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithBlockScopedResource.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithBlockScopedResource.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.wrapped.WithDataInputBlockFailedStep", "shortDescription" : "", "members_case class" : [{"label" : "causedBy", "tail" : ": Some[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.steps.wrapped.WithDataInputBlockFailedStep.causedBy", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputBlockFailedStep.html#causedBy:Some[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.wrapped.WithDataInputBlockFailedStep.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputBlockFailedStep.html#baseErrorMessage:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.steps.wrapped.WithDataInputBlockFailedStep#<init>", "error" : "unsupported entity"}, {"label" : "errors", "tail" : ": NonEmptyList[CornichonError]", "member" : "com.github.agourlay.cornichon.steps.wrapped.WithDataInputBlockFailedStep.errors", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputBlockFailedStep.html#errors:cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]", "kind" : "val"}, {"label" : "failedInputs", "tail" : ": List[(String, String)]", "member" : "com.github.agourlay.cornichon.steps.wrapped.WithDataInputBlockFailedStep.failedInputs", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputBlockFailedStep.html#failedInputs:List[(String,String)]", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputBlockFailedStep.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputBlockFailedStep.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputBlockFailedStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputBlockFailedStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputBlockFailedStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputBlockFailedStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputBlockFailedStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputBlockFailedStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputBlockFailedStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputBlockFailedStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputBlockFailedStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputBlockFailedStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputBlockFailedStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputBlockFailedStep.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputBlockFailedStep.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputBlockFailedStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputBlockFailedStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputBlockFailedStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputBlockFailedStep.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.wrapped.WithDataInputStep", "shortDescription" : "", "members_case class" : [{"label" : "run", "tail" : "(engine: Engine)(initialRunState: RunState): Task[(RunState, Either[FailedStep, Done])]", "member" : "com.github.agourlay.cornichon.steps.wrapped.WithDataInputStep.run", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputStep.html#run(engine:com.github.agourlay.cornichon.core.Engine)(initialRunState:com.github.agourlay.cornichon.core.RunState):monix.eval.Task[(com.github.agourlay.cornichon.core.RunState,Either[com.github.agourlay.cornichon.core.FailedStep,com.github.agourlay.cornichon.core.Done])]", "kind" : "def"}, {"label" : "title", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.wrapped.WithDataInputStep.title", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputStep.html#title:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.steps.wrapped.WithDataInputStep#<init>", "error" : "unsupported entity"}, {"label" : "r", "tail" : ": PlaceholderResolver", "member" : "com.github.agourlay.cornichon.steps.wrapped.WithDataInputStep.r", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputStep.html#r:com.github.agourlay.cornichon.resolver.PlaceholderResolver", "kind" : "val"}, {"label" : "where", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.wrapped.WithDataInputStep.where", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputStep.html#where:String", "kind" : "val"}, {"label" : "nested", "tail" : ": List[Step]", "member" : "com.github.agourlay.cornichon.steps.wrapped.WithDataInputStep.nested", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputStep.html#nested:List[com.github.agourlay.cornichon.core.Step]", "kind" : "val"}, {"label" : "successTitleLog", "tail" : "(depth: Int): SuccessLogInstruction", "member" : "com.github.agourlay.cornichon.core.WrapperStep.successTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputStep.html#successTitleLog(depth:Int):com.github.agourlay.cornichon.core.SuccessLogInstruction", "kind" : "def"}, {"label" : "failedTitleLog", "tail" : "(depth: Int): FailureLogInstruction", "member" : "com.github.agourlay.cornichon.core.WrapperStep.failedTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputStep.html#failedTitleLog(depth:Int):com.github.agourlay.cornichon.core.FailureLogInstruction", "kind" : "def"}, {"label" : "setTitle", "tail" : "(newTitle: String): WrapperStep", "member" : "com.github.agourlay.cornichon.core.WrapperStep.setTitle", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputStep.html#setTitle(newTitle:String):com.github.agourlay.cornichon.core.WrapperStep", "kind" : "def"}, {"label" : "chain", "tail" : "(others: (Session) â‡’ List[Step]): Step", "member" : "com.github.agourlay.cornichon.core.Step.chain", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputStep.html#chain(others:com.github.agourlay.cornichon.core.Session=>List[com.github.agourlay.cornichon.core.Step]):com.github.agourlay.cornichon.core.Step", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputStep.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputStep.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithDataInputStep.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.wrapped.WithinBlockSucceedAfterMaxDuration", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.wrapped.WithinBlockSucceedAfterMaxDuration.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinBlockSucceedAfterMaxDuration.html#baseErrorMessage:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.steps.wrapped.WithinBlockSucceedAfterMaxDuration#<init>", "error" : "unsupported entity"}, {"label" : "executionTime", "tail" : ": Duration", "member" : "com.github.agourlay.cornichon.steps.wrapped.WithinBlockSucceedAfterMaxDuration.executionTime", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinBlockSucceedAfterMaxDuration.html#executionTime:scala.concurrent.duration.Duration", "kind" : "val"}, {"label" : "maxDuration", "tail" : ": Duration", "member" : "com.github.agourlay.cornichon.steps.wrapped.WithinBlockSucceedAfterMaxDuration.maxDuration", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinBlockSucceedAfterMaxDuration.html#maxDuration:scala.concurrent.duration.Duration", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinBlockSucceedAfterMaxDuration.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinBlockSucceedAfterMaxDuration.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinBlockSucceedAfterMaxDuration.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinBlockSucceedAfterMaxDuration.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinBlockSucceedAfterMaxDuration.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinBlockSucceedAfterMaxDuration.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinBlockSucceedAfterMaxDuration.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinBlockSucceedAfterMaxDuration.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinBlockSucceedAfterMaxDuration.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinBlockSucceedAfterMaxDuration.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinBlockSucceedAfterMaxDuration.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinBlockSucceedAfterMaxDuration.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinBlockSucceedAfterMaxDuration.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinBlockSucceedAfterMaxDuration.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinBlockSucceedAfterMaxDuration.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinBlockSucceedAfterMaxDuration.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinBlockSucceedAfterMaxDuration.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinBlockSucceedAfterMaxDuration.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinBlockSucceedAfterMaxDuration.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinBlockSucceedAfterMaxDuration.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.wrapped.WithinStep", "shortDescription" : "", "members_case class" : [{"label" : "run", "tail" : "(engine: Engine)(initialRunState: RunState): Task[(RunState, Either[FailedStep, Done])]", "member" : "com.github.agourlay.cornichon.steps.wrapped.WithinStep.run", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinStep.html#run(engine:com.github.agourlay.cornichon.core.Engine)(initialRunState:com.github.agourlay.cornichon.core.RunState):monix.eval.Task[(com.github.agourlay.cornichon.core.RunState,Either[com.github.agourlay.cornichon.core.FailedStep,com.github.agourlay.cornichon.core.Done])]", "kind" : "def"}, {"label" : "title", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.wrapped.WithinStep.title", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinStep.html#title:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.steps.wrapped.WithinStep#<init>", "error" : "unsupported entity"}, {"label" : "maxDuration", "tail" : ": Duration", "member" : "com.github.agourlay.cornichon.steps.wrapped.WithinStep.maxDuration", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinStep.html#maxDuration:scala.concurrent.duration.Duration", "kind" : "val"}, {"label" : "nested", "tail" : ": List[Step]", "member" : "com.github.agourlay.cornichon.steps.wrapped.WithinStep.nested", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinStep.html#nested:List[com.github.agourlay.cornichon.core.Step]", "kind" : "val"}, {"label" : "successTitleLog", "tail" : "(depth: Int): SuccessLogInstruction", "member" : "com.github.agourlay.cornichon.core.WrapperStep.successTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinStep.html#successTitleLog(depth:Int):com.github.agourlay.cornichon.core.SuccessLogInstruction", "kind" : "def"}, {"label" : "failedTitleLog", "tail" : "(depth: Int): FailureLogInstruction", "member" : "com.github.agourlay.cornichon.core.WrapperStep.failedTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinStep.html#failedTitleLog(depth:Int):com.github.agourlay.cornichon.core.FailureLogInstruction", "kind" : "def"}, {"label" : "setTitle", "tail" : "(newTitle: String): WrapperStep", "member" : "com.github.agourlay.cornichon.core.WrapperStep.setTitle", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinStep.html#setTitle(newTitle:String):com.github.agourlay.cornichon.core.WrapperStep", "kind" : "def"}, {"label" : "chain", "tail" : "(others: (Session) â‡’ List[Step]): Step", "member" : "com.github.agourlay.cornichon.core.Step.chain", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinStep.html#chain(others:com.github.agourlay.cornichon.core.Session=>List[com.github.agourlay.cornichon.core.Step]):com.github.agourlay.cornichon.core.Step", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinStep.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinStep.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/wrapped\/WithinStep.html", "kind" : "case class"}], "com.github.agourlay.cornichon.util" : [{"name" : "com.github.agourlay.cornichon.util.Printing", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/util\/Printing$.html", "members_object" : [{"label" : "showMap", "tail" : "(arg0: Show[A], arg1: Ordering[A], arg2: Show[B]): Show[Map[A, B]]", "member" : "com.github.agourlay.cornichon.util.Printing.showMap", "link" : "com\/github\/agourlay\/cornichon\/util\/Printing$.html#showMap[A,B](implicitevidence$2:cats.Show[A],implicitevidence$3:Ordering[A],implicitevidence$4:cats.Show[B]):cats.Show[Map[A,B]]", "kind" : "implicit def"}, {"label" : "showIterable", "tail" : "(arg0: Show[A]): Show[Iterable[A]]", "member" : "com.github.agourlay.cornichon.util.Printing.showIterable", "link" : "com\/github\/agourlay\/cornichon\/util\/Printing$.html#showIterable[A](implicitevidence$1:cats.Show[A]):cats.Show[Iterable[A]]", "kind" : "implicit def"}, {"label" : "printArrowPairs", "tail" : "(params: Seq[(String, String)]): String", "member" : "com.github.agourlay.cornichon.util.Printing.printArrowPairs", "link" : "com\/github\/agourlay\/cornichon\/util\/Printing$.html#printArrowPairs(params:Seq[(String,String)]):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/util\/Printing$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/util\/Printing$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/util\/Printing$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/util\/Printing$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/util\/Printing$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/util\/Printing$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/util\/Printing$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/util\/Printing$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/util\/Printing$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/util\/Printing$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/util\/Printing$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/util\/Printing$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/util\/Printing$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/util\/Printing$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/util\/Printing$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/util\/Printing$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/util\/Printing$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/util\/Printing$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/util\/Printing$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.agourlay.cornichon.util.Strings", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/util\/Strings$.html", "members_object" : [{"label" : "levenshtein", "tail" : "(str1: String, str2: String): Int", "member" : "com.github.agourlay.cornichon.util.Strings.levenshtein", "link" : "com\/github\/agourlay\/cornichon\/util\/Strings$.html#levenshtein(str1:String,str2:String):Int", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/util\/Strings$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/util\/Strings$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/util\/Strings$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/util\/Strings$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/util\/Strings$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/util\/Strings$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/util\/Strings$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/util\/Strings$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/util\/Strings$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/util\/Strings$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/util\/Strings$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/util\/Strings$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/util\/Strings$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/util\/Strings$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/util\/Strings$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/util\/Strings$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/util\/Strings$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/util\/Strings$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/util\/Strings$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.agourlay.cornichon.util.Timing", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/util\/Timing$.html", "members_object" : [{"label" : "withDuration", "tail" : "(fct: â‡’ Task[A]): Task[(A, FiniteDuration)]", "member" : "com.github.agourlay.cornichon.util.Timing.withDuration", "link" : "com\/github\/agourlay\/cornichon\/util\/Timing$.html#withDuration[A](fct:=>monix.eval.Task[A]):monix.eval.Task[(A,scala.concurrent.duration.FiniteDuration)]", "kind" : "def"}, {"label" : "withDuration", "tail" : "(fct: â‡’ A): (A, Duration)", "member" : "com.github.agourlay.cornichon.util.Timing.withDuration", "link" : "com\/github\/agourlay\/cornichon\/util\/Timing$.html#withDuration[A](fct:=>A):(A,scala.concurrent.duration.Duration)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/util\/Timing$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/util\/Timing$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/util\/Timing$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/util\/Timing$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/util\/Timing$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/util\/Timing$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/util\/Timing$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/util\/Timing$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/util\/Timing$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/util\/Timing$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/util\/Timing$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/util\/Timing$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/util\/Timing$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/util\/Timing$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/util\/Timing$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/util\/Timing$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/util\/Timing$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/util\/Timing$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/util\/Timing$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "com.github.agourlay.cornichon.http" : [{"name" : "com.github.agourlay.cornichon.http.BadSessionHeadersEncoding", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.BadSessionHeadersEncoding.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/http\/BadSessionHeadersEncoding.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.http.BadSessionHeadersEncoding#<init>", "error" : "unsupported entity"}, {"label" : "header", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.BadSessionHeadersEncoding.header", "link" : "com\/github\/agourlay\/cornichon\/http\/BadSessionHeadersEncoding.html#header:String", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/http\/BadSessionHeadersEncoding.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/http\/BadSessionHeadersEncoding.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/http\/BadSessionHeadersEncoding.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/BadSessionHeadersEncoding.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/BadSessionHeadersEncoding.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/BadSessionHeadersEncoding.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/BadSessionHeadersEncoding.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/BadSessionHeadersEncoding.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/BadSessionHeadersEncoding.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/BadSessionHeadersEncoding.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/BadSessionHeadersEncoding.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/BadSessionHeadersEncoding.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/BadSessionHeadersEncoding.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/BadSessionHeadersEncoding.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/BadSessionHeadersEncoding.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/BadSessionHeadersEncoding.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/BadSessionHeadersEncoding.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/BadSessionHeadersEncoding.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/BadSessionHeadersEncoding.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/http\/BadSessionHeadersEncoding.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.http.BaseRequest", "members_trait" : [{"label" : "headersTitle", "tail" : "(): String", "member" : "com.github.agourlay.cornichon.http.BaseRequest.headersTitle", "link" : "com\/github\/agourlay\/cornichon\/http\/BaseRequest.html#headersTitle:String", "kind" : "def"}, {"label" : "paramsTitle", "tail" : "(): String", "member" : "com.github.agourlay.cornichon.http.BaseRequest.paramsTitle", "link" : "com\/github\/agourlay\/cornichon\/http\/BaseRequest.html#paramsTitle:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/BaseRequest.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/BaseRequest.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/BaseRequest.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/BaseRequest.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/BaseRequest.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/BaseRequest.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/BaseRequest.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/BaseRequest.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/BaseRequest.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/BaseRequest.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/BaseRequest.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/BaseRequest.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/BaseRequest.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/BaseRequest.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/BaseRequest.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/BaseRequest.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/BaseRequest.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/BaseRequest.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/BaseRequest.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "compactDescription", "tail" : "(): String", "member" : "com.github.agourlay.cornichon.http.BaseRequest.compactDescription", "link" : "com\/github\/agourlay\/cornichon\/http\/BaseRequest.html#compactDescription:String", "kind" : "abstract def"}, {"label" : "headers", "tail" : "(): Seq[(String, String)]", "member" : "com.github.agourlay.cornichon.http.BaseRequest.headers", "link" : "com\/github\/agourlay\/cornichon\/http\/BaseRequest.html#headers:Seq[(String,String)]", "kind" : "abstract def"}, {"label" : "params", "tail" : "(): Seq[(String, String)]", "member" : "com.github.agourlay.cornichon.http.BaseRequest.params", "link" : "com\/github\/agourlay\/cornichon\/http\/BaseRequest.html#params:Seq[(String,String)]", "kind" : "abstract def"}, {"label" : "url", "tail" : "(): String", "member" : "com.github.agourlay.cornichon.http.BaseRequest.url", "link" : "com\/github\/agourlay\/cornichon\/http\/BaseRequest.html#url:String", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/github\/agourlay\/cornichon\/http\/BaseRequest.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.http.ByNames", "shortDescription" : "", "members_case class" : [{"member" : "com.github.agourlay.cornichon.http.ByNames#<init>", "error" : "unsupported entity"}, {"label" : "names", "tail" : ": Seq[String]", "member" : "com.github.agourlay.cornichon.http.ByNames.names", "link" : "com\/github\/agourlay\/cornichon\/http\/ByNames.html#names:Seq[String]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/ByNames.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/ByNames.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/ByNames.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/ByNames.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/ByNames.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/ByNames.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/ByNames.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/ByNames.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/ByNames.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/ByNames.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/ByNames.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/ByNames.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/ByNames.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/ByNames.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/ByNames.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/ByNames.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/http\/ByNames.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.http.CornichonHttpResponse", "shortDescription" : "", "members_case class" : [{"member" : "com.github.agourlay.cornichon.http.CornichonHttpResponse#<init>", "error" : "unsupported entity"}, {"label" : "body", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.CornichonHttpResponse.body", "link" : "com\/github\/agourlay\/cornichon\/http\/CornichonHttpResponse.html#body:String", "kind" : "val"}, {"label" : "headers", "tail" : ": Seq[(String, String)]", "member" : "com.github.agourlay.cornichon.http.CornichonHttpResponse.headers", "link" : "com\/github\/agourlay\/cornichon\/http\/CornichonHttpResponse.html#headers:Seq[(String,String)]", "kind" : "val"}, {"label" : "status", "tail" : ": Int", "member" : "com.github.agourlay.cornichon.http.CornichonHttpResponse.status", "link" : "com\/github\/agourlay\/cornichon\/http\/CornichonHttpResponse.html#status:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/CornichonHttpResponse.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/CornichonHttpResponse.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/CornichonHttpResponse.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/CornichonHttpResponse.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/CornichonHttpResponse.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/CornichonHttpResponse.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/CornichonHttpResponse.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/CornichonHttpResponse.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/CornichonHttpResponse.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/CornichonHttpResponse.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/CornichonHttpResponse.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/CornichonHttpResponse.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/CornichonHttpResponse.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/CornichonHttpResponse.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/CornichonHttpResponse.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/CornichonHttpResponse.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/http\/CornichonHttpResponse.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.http.HeaderSelection", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/HeaderSelection.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/HeaderSelection.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/HeaderSelection.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/HeaderSelection.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/HeaderSelection.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/HeaderSelection.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/HeaderSelection.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HeaderSelection.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HeaderSelection.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HeaderSelection.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/HeaderSelection.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/HeaderSelection.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/HeaderSelection.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/HeaderSelection.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/HeaderSelection.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/HeaderSelection.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/HeaderSelection.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HeaderSelection.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HeaderSelection.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/github\/agourlay\/cornichon\/http\/HeaderSelection.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.http.HttpDsl", "members_trait" : [{"label" : "WithHeaders", "tail" : "(headers: (String, String)*): BodyElementCollector[Step, Seq[Step]]", "member" : "com.github.agourlay.cornichon.http.HttpDsl.WithHeaders", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#WithHeaders(headers:(String,String)*):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,Seq[com.github.agourlay.cornichon.core.Step]]", "kind" : "def"}, {"label" : "WithBasicAuth", "tail" : "(userName: String, password: String): BodyElementCollector[Step, Seq[Step]]", "member" : "com.github.agourlay.cornichon.http.HttpDsl.WithBasicAuth", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#WithBasicAuth(userName:String,password:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,Seq[com.github.agourlay.cornichon.core.Step]]", "kind" : "def"}, {"label" : "show_with_headers", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_with_headers", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#show_with_headers:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_last_headers", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_last_headers", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#show_last_headers:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_last_body_json", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_last_body_json", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#show_last_body_json:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_last_body", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_last_body", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#show_last_body:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_last_status", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_last_status", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#show_last_status:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_last_response_json", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_last_response_json", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#show_last_response_json:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_last_response", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_last_response", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#show_last_response:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "save_header_value", "tail" : "(args: (String, String)*): EffectStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.save_header_value", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#save_header_value(args:(String,String)*):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "save_body_path", "tail" : "(args: (String, String)*): EffectStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.save_body_path", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#save_body_path(args:(String,String)*):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "save_body", "tail" : "(target: String): EffectStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.save_body", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#save_body(target:String):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "body", "tail" : "(): JsonStepBuilder", "member" : "com.github.agourlay.cornichon.http.HttpDsl.body", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#body:com.github.agourlay.cornichon.json.JsonSteps.JsonStepBuilder", "kind" : "def"}, {"label" : "headers", "tail" : "(): HeadersStepBuilder", "member" : "com.github.agourlay.cornichon.http.HttpDsl.headers", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#headers:com.github.agourlay.cornichon.http.steps.HeadersSteps.HeadersStepBuilder", "kind" : "def"}, {"label" : "status", "tail" : "(): StatusStepBuilder.type", "member" : "com.github.agourlay.cornichon.http.HttpDsl.status", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#status:com.github.agourlay.cornichon.http.steps.StatusSteps.StatusStepBuilder.type", "kind" : "def"}, {"label" : "open_sse", "tail" : "(url: String, takeWithin: FiniteDuration): HttpStreamedRequest", "member" : "com.github.agourlay.cornichon.http.HttpDsl.open_sse", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#open_sse(url:String,takeWithin:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.http.HttpStreamedRequest", "kind" : "def"}, {"label" : "query_gql", "tail" : "(url: String): QueryGQL", "member" : "com.github.agourlay.cornichon.http.HttpDsl.query_gql", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#query_gql(url:String):com.github.agourlay.cornichon.http.QueryGQL", "kind" : "def"}, {"label" : "queryGqlToHttpRequest", "tail" : "(queryGQL: QueryGQL): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpDsl.queryGqlToHttpRequest", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#queryGqlToHttpRequest(queryGQL:com.github.agourlay.cornichon.http.QueryGQL):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "implicit def"}, {"label" : "queryGqlToStep", "tail" : "(queryGQL: QueryGQL): EffectStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.queryGqlToStep", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#queryGqlToStep(queryGQL:com.github.agourlay.cornichon.http.QueryGQL):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "implicit def"}, {"label" : "httpStreamedRequestToStep", "tail" : "(request: HttpStreamedRequest): EffectStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.httpStreamedRequestToStep", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#httpStreamedRequestToStep(request:com.github.agourlay.cornichon.http.HttpStreamedRequest):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "implicit def"}, {"label" : "httpRequestToStep", "tail" : "(request: HttpRequest[A])(arg0: Show[A], arg1: Resolvable[A], arg2: Encoder[A]): EffectStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.httpRequestToStep", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#httpRequestToStep[A](request:com.github.agourlay.cornichon.http.HttpRequest[A])(implicitevidence$1:cats.Show[A],implicitevidence$2:com.github.agourlay.cornichon.resolver.Resolvable[A],implicitevidence$3:io.circe.Encoder[A]):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "implicit def"}, {"label" : "http", "tail" : ": HttpService", "member" : "com.github.agourlay.cornichon.http.HttpDsl.http", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#http:com.github.agourlay.cornichon.http.HttpService", "kind" : "lazy val"}, {"label" : "httpServiceByURL", "tail" : "(baseUrl: String, timeout: FiniteDuration): HttpService", "member" : "com.github.agourlay.cornichon.http.HttpDsl.httpServiceByURL", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#httpServiceByURL(baseUrl:String,timeout:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.http.HttpService", "kind" : "def"}, {"label" : "baseUrl", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.HttpDsl.baseUrl", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#baseUrl:String", "kind" : "lazy val"}, {"label" : "requestTimeout", "tail" : ": FiniteDuration", "member" : "com.github.agourlay.cornichon.http.HttpDsl.requestTimeout", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#requestTimeout:scala.concurrent.duration.FiniteDuration", "kind" : "lazy val"}, {"label" : "patch", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.patch", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#patch(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "put", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.put", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#put(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "post", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.post", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#post(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "delete", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.delete", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#delete(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "options", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.options", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#options(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "head", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.head", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#head(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "get", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.get", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#get(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "removeFromWithHeaders", "tail" : "(name: String)(s: Session): Either[CornichonError, Session]", "member" : "com.github.agourlay.cornichon.http.HttpDslOps.removeFromWithHeaders", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#removeFromWithHeaders(name:String)(s:com.github.agourlay.cornichon.core.Session):Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Session]", "kind" : "def"}, {"label" : "addToWithHeaders", "tail" : "(name: String, value: String)(s: Session): Either[CornichonError, Session]", "member" : "com.github.agourlay.cornichon.http.HttpDslOps.addToWithHeaders", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#addToWithHeaders(name:String,value:String)(s:com.github.agourlay.cornichon.core.Session):Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Session]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl$.html", "members_object" : [{"label" : "globalHttpclient", "tail" : ": HttpClient", "member" : "com.github.agourlay.cornichon.http.HttpDsl.globalHttpclient", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl$.html#globalHttpclient:com.github.agourlay.cornichon.http.client.HttpClient", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/github\/agourlay\/cornichon\/http\/HttpDsl.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.http.HttpDslOps", "members_trait" : [{"label" : "removeFromWithHeaders", "tail" : "(name: String)(s: Session): Either[CornichonError, Session]", "member" : "com.github.agourlay.cornichon.http.HttpDslOps.removeFromWithHeaders", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDslOps.html#removeFromWithHeaders(name:String)(s:com.github.agourlay.cornichon.core.Session):Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Session]", "kind" : "def"}, {"label" : "addToWithHeaders", "tail" : "(name: String, value: String)(s: Session): Either[CornichonError, Session]", "member" : "com.github.agourlay.cornichon.http.HttpDslOps.addToWithHeaders", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDslOps.html#addToWithHeaders(name:String,value:String)(s:com.github.agourlay.cornichon.core.Session):Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Session]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDslOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDslOps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDslOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDslOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDslOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDslOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDslOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDslOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDslOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDslOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDslOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDslOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDslOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDslOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDslOps.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDslOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDslOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDslOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpDslOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/github\/agourlay\/cornichon\/http\/HttpDslOps.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.http.HttpError", "members_trait" : [{"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpError.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpError.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpError.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpError.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpError.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "baseErrorMessage", "tail" : "(): String", "member" : "com.github.agourlay.cornichon.core.CornichonError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpError.html#baseErrorMessage:String", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/github\/agourlay\/cornichon\/http\/HttpError.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.http.HttpMethod", "shortDescription" : "", "members_case class" : [{"member" : "com.github.agourlay.cornichon.http.HttpMethod#<init>", "error" : "unsupported entity"}, {"label" : "name", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.HttpMethod.name", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethod.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethod.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethod.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethod.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethod.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethod.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethod.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethod.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethod.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethod.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethod.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethod.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethod.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethod.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethod.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethod.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethod.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/http\/HttpMethod.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.http.HttpMethods", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/http\/HttpMethods$.html", "members_object" : [{"label" : "PUT", "tail" : ": HttpMethod", "member" : "com.github.agourlay.cornichon.http.HttpMethods.PUT", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethods$.html#PUT:com.github.agourlay.cornichon.http.HttpMethod", "kind" : "val"}, {"label" : "POST", "tail" : ": HttpMethod", "member" : "com.github.agourlay.cornichon.http.HttpMethods.POST", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethods$.html#POST:com.github.agourlay.cornichon.http.HttpMethod", "kind" : "val"}, {"label" : "PATCH", "tail" : ": HttpMethod", "member" : "com.github.agourlay.cornichon.http.HttpMethods.PATCH", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethods$.html#PATCH:com.github.agourlay.cornichon.http.HttpMethod", "kind" : "val"}, {"label" : "OPTIONS", "tail" : ": HttpMethod", "member" : "com.github.agourlay.cornichon.http.HttpMethods.OPTIONS", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethods$.html#OPTIONS:com.github.agourlay.cornichon.http.HttpMethod", "kind" : "val"}, {"label" : "HEAD", "tail" : ": HttpMethod", "member" : "com.github.agourlay.cornichon.http.HttpMethods.HEAD", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethods$.html#HEAD:com.github.agourlay.cornichon.http.HttpMethod", "kind" : "val"}, {"label" : "GET", "tail" : ": HttpMethod", "member" : "com.github.agourlay.cornichon.http.HttpMethods.GET", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethods$.html#GET:com.github.agourlay.cornichon.http.HttpMethod", "kind" : "val"}, {"label" : "DELETE", "tail" : ": HttpMethod", "member" : "com.github.agourlay.cornichon.http.HttpMethods.DELETE", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethods$.html#DELETE:com.github.agourlay.cornichon.http.HttpMethod", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethods$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethods$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethods$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethods$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethods$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethods$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethods$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethods$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethods$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethods$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethods$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethods$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethods$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethods$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethods$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethods$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethods$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethods$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMethods$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.agourlay.cornichon.http.HttpMockDsl", "members_trait" : [{"label" : "HttpListenTo", "tail" : "(interface: Option[String], portRange: Option[Range])(label: String): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.http.HttpMockDsl.HttpListenTo", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMockDsl.html#HttpListenTo(interface:Option[String],portRange:Option[Range])(label:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "httpListen", "tail" : "(label: String): HttpListenStepBuilder", "member" : "com.github.agourlay.cornichon.http.HttpMockDsl.httpListen", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMockDsl.html#httpListen(label:String):com.github.agourlay.cornichon.http.steps.HttpListenSteps.HttpListenStepBuilder", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMockDsl.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMockDsl.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMockDsl.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMockDsl.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMockDsl.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMockDsl.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMockDsl.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMockDsl.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMockDsl.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMockDsl.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMockDsl.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMockDsl.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMockDsl.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMockDsl.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMockDsl.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMockDsl.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMockDsl.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMockDsl.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpMockDsl.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/github\/agourlay\/cornichon\/http\/HttpMockDsl.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.http.HttpRequest", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html", "members_object" : [{"label" : "showRequest", "tail" : "(arg0: Show[A]): Show[HttpRequest[A]]", "member" : "com.github.agourlay.cornichon.http.HttpRequest.showRequest", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html#showRequest[A](implicitevidence$7:cats.Show[A]):cats.Show[com.github.agourlay.cornichon.http.HttpRequest[A]]", "kind" : "implicit def"}, {"label" : "patch", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.patch", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html#patch(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "put", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.put", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html#put(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "post", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.post", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html#post(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "delete", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.delete", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html#delete(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "options", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.options", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html#options(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "head", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.head", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html#head(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "get", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.get", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html#get(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "compactDescription", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.HttpRequest.compactDescription", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#compactDescription:String", "kind" : "lazy val"}, {"label" : "withBody", "tail" : "(body: B)(arg0: Show[B], arg1: Resolvable[B], arg2: Encoder[B]): HttpRequest[B]", "member" : "com.github.agourlay.cornichon.http.HttpRequest.withBody", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#withBody[B](body:B)(implicitevidence$4:cats.Show[B],implicitevidence$5:com.github.agourlay.cornichon.resolver.Resolvable[B],implicitevidence$6:io.circe.Encoder[B]):com.github.agourlay.cornichon.http.HttpRequest[B]", "kind" : "def"}, {"label" : "addHeaders", "tail" : "(headers: (String, String)*): HttpRequest[A]", "member" : "com.github.agourlay.cornichon.http.HttpRequest.addHeaders", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#addHeaders(headers:(String,String)*):com.github.agourlay.cornichon.http.HttpRequest[A]", "kind" : "def"}, {"label" : "withHeaders", "tail" : "(headers: (String, String)*): HttpRequest[A]", "member" : "com.github.agourlay.cornichon.http.HttpRequest.withHeaders", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#withHeaders(headers:(String,String)*):com.github.agourlay.cornichon.http.HttpRequest[A]", "kind" : "def"}, {"label" : "addParams", "tail" : "(params: (String, String)*): HttpRequest[A]", "member" : "com.github.agourlay.cornichon.http.HttpRequest.addParams", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#addParams(params:(String,String)*):com.github.agourlay.cornichon.http.HttpRequest[A]", "kind" : "def"}, {"label" : "withParams", "tail" : "(params: (String, String)*): HttpRequest[A]", "member" : "com.github.agourlay.cornichon.http.HttpRequest.withParams", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#withParams(params:(String,String)*):com.github.agourlay.cornichon.http.HttpRequest[A]", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.http.HttpRequest#<init>", "error" : "unsupported entity"}, {"label" : "headers", "tail" : ": Seq[(String, String)]", "member" : "com.github.agourlay.cornichon.http.HttpRequest.headers", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#headers:Seq[(String,String)]", "kind" : "val"}, {"label" : "params", "tail" : ": Seq[(String, String)]", "member" : "com.github.agourlay.cornichon.http.HttpRequest.params", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#params:Seq[(String,String)]", "kind" : "val"}, {"label" : "body", "tail" : ": Option[A]", "member" : "com.github.agourlay.cornichon.http.HttpRequest.body", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#body:Option[A]", "kind" : "val"}, {"label" : "url", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.HttpRequest.url", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#url:String", "kind" : "val"}, {"label" : "method", "tail" : ": HttpMethod", "member" : "com.github.agourlay.cornichon.http.HttpRequest.method", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#method:com.github.agourlay.cornichon.http.HttpMethod", "kind" : "val"}, {"label" : "headersTitle", "tail" : "(): String", "member" : "com.github.agourlay.cornichon.http.BaseRequest.headersTitle", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#headersTitle:String", "kind" : "def"}, {"label" : "paramsTitle", "tail" : "(): String", "member" : "com.github.agourlay.cornichon.http.BaseRequest.paramsTitle", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#paramsTitle:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/http\/HttpRequest.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.http.HttpRequestsDsl", "members_trait" : [{"label" : "patch", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.patch", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequestsDsl.html#patch(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "put", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.put", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequestsDsl.html#put(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "post", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.post", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequestsDsl.html#post(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "delete", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.delete", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequestsDsl.html#delete(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "options", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.options", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequestsDsl.html#options(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "head", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.head", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequestsDsl.html#head(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "get", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.get", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequestsDsl.html#get(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequestsDsl.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequestsDsl.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequestsDsl.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequestsDsl.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequestsDsl.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequestsDsl.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequestsDsl.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequestsDsl.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequestsDsl.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequestsDsl.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequestsDsl.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequestsDsl.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequestsDsl.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequestsDsl.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequestsDsl.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequestsDsl.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequestsDsl.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequestsDsl.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpRequestsDsl.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/github\/agourlay\/cornichon\/http\/HttpRequestsDsl.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.http.HttpService", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html", "members_class" : [{"label" : "openWS", "tail" : "(url: String, takeWithin: FiniteDuration, params: Seq[(String, String)], headers: Seq[(String, String)], extractor: ResponseExtractor, expectedStatus: Option[Int]): (Session) â‡’ Future[Either[CornichonError, Session]]", "member" : "com.github.agourlay.cornichon.http.HttpService.openWS", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService.html#openWS(url:String,takeWithin:scala.concurrent.duration.FiniteDuration,params:Seq[(String,String)],headers:Seq[(String,String)],extractor:com.github.agourlay.cornichon.http.ResponseExtractor,expectedStatus:Option[Int]):com.github.agourlay.cornichon.core.Session=>scala.concurrent.Future[Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Session]]", "kind" : "def"}, {"label" : "openSSE", "tail" : "(url: String, takeWithin: FiniteDuration, params: Seq[(String, String)], headers: Seq[(String, String)], extractor: ResponseExtractor, expectedStatus: Option[Int]): (Session) â‡’ Future[Either[CornichonError, Session]]", "member" : "com.github.agourlay.cornichon.http.HttpService.openSSE", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService.html#openSSE(url:String,takeWithin:scala.concurrent.duration.FiniteDuration,params:Seq[(String,String)],headers:Seq[(String,String)],extractor:com.github.agourlay.cornichon.http.ResponseExtractor,expectedStatus:Option[Int]):com.github.agourlay.cornichon.core.Session=>scala.concurrent.Future[Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Session]]", "kind" : "def"}, {"label" : "streamEffect", "tail" : "(request: HttpStreamedRequest, expectedStatus: Option[Int], extractor: ResponseExtractor): (Session) â‡’ Future[Either[CornichonError, Session]]", "member" : "com.github.agourlay.cornichon.http.HttpService.streamEffect", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService.html#streamEffect(request:com.github.agourlay.cornichon.http.HttpStreamedRequest,expectedStatus:Option[Int],extractor:com.github.agourlay.cornichon.http.ResponseExtractor):com.github.agourlay.cornichon.core.Session=>scala.concurrent.Future[Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Session]]", "kind" : "def"}, {"label" : "requestEffect", "tail" : "(request: HttpRequest[A], extractor: ResponseExtractor, expectedStatus: Option[Int], ignoreFromWithHeaders: HeaderSelection)(arg0: Show[A], arg1: Resolvable[A], arg2: Encoder[A]): (Session) â‡’ Future[Either[CornichonError, Session]]", "member" : "com.github.agourlay.cornichon.http.HttpService.requestEffect", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService.html#requestEffect[A](request:com.github.agourlay.cornichon.http.HttpRequest[A],extractor:com.github.agourlay.cornichon.http.ResponseExtractor,expectedStatus:Option[Int],ignoreFromWithHeaders:com.github.agourlay.cornichon.http.HeaderSelection)(implicitevidence$10:cats.Show[A],implicitevidence$11:com.github.agourlay.cornichon.resolver.Resolvable[A],implicitevidence$12:io.circe.Encoder[A]):com.github.agourlay.cornichon.core.Session=>scala.concurrent.Future[Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Session]]", "kind" : "def"}, {"label" : "requestEffectT", "tail" : "(request: HttpRequest[A], extractor: ResponseExtractor, expectedStatus: Option[Int], ignoreFromWithHeaders: HeaderSelection)(arg0: Show[A], arg1: Resolvable[A], arg2: Encoder[A]): (Session) â‡’ EitherT[Future, CornichonError, Session]", "member" : "com.github.agourlay.cornichon.http.HttpService.requestEffectT", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService.html#requestEffectT[A](request:com.github.agourlay.cornichon.http.HttpRequest[A],extractor:com.github.agourlay.cornichon.http.ResponseExtractor,expectedStatus:Option[Int],ignoreFromWithHeaders:com.github.agourlay.cornichon.http.HeaderSelection)(implicitevidence$7:cats.Show[A],implicitevidence$8:com.github.agourlay.cornichon.resolver.Resolvable[A],implicitevidence$9:io.circe.Encoder[A]):com.github.agourlay.cornichon.core.Session=>cats.data.EitherT[scala.concurrent.Future,com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Session]", "kind" : "def"}, {"label" : "runStreamRequest", "tail" : "(r: HttpStreamedRequest, expectedStatus: Option[Int], extractor: ResponseExtractor)(s: Session): EitherT[Future, CornichonError, (CornichonHttpResponse, Session)]", "member" : "com.github.agourlay.cornichon.http.HttpService.runStreamRequest", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService.html#runStreamRequest(r:com.github.agourlay.cornichon.http.HttpStreamedRequest,expectedStatus:Option[Int],extractor:com.github.agourlay.cornichon.http.ResponseExtractor)(s:com.github.agourlay.cornichon.core.Session):cats.data.EitherT[scala.concurrent.Future,com.github.agourlay.cornichon.core.CornichonError,(com.github.agourlay.cornichon.http.CornichonHttpResponse,com.github.agourlay.cornichon.core.Session)]", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.http.HttpService#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "commonSessionExtraction", "tail" : "(session: Session, response: CornichonHttpResponse): Either[CornichonError, Session]", "member" : "com.github.agourlay.cornichon.http.HttpService.commonSessionExtraction", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#commonSessionExtraction(session:com.github.agourlay.cornichon.core.Session,response:com.github.agourlay.cornichon.http.CornichonHttpResponse):Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Session]", "kind" : "def"}, {"label" : "handleResponse", "tail" : "(resp: CornichonHttpResponse, expectedStatus: Option[Int], extractor: ResponseExtractor)(session: Session): Either[CornichonError, Session]", "member" : "com.github.agourlay.cornichon.http.HttpService.handleResponse", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#handleResponse(resp:com.github.agourlay.cornichon.http.CornichonHttpResponse,expectedStatus:Option[Int],extractor:com.github.agourlay.cornichon.http.ResponseExtractor)(session:com.github.agourlay.cornichon.core.Session):scala.util.Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Session]", "kind" : "def"}, {"label" : "fillInSessionWithResponse", "tail" : "(session: Session, response: CornichonHttpResponse, extractor: ResponseExtractor): Either[CornichonError, Session]", "member" : "com.github.agourlay.cornichon.http.HttpService.fillInSessionWithResponse", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#fillInSessionWithResponse(session:com.github.agourlay.cornichon.core.Session,response:com.github.agourlay.cornichon.http.CornichonHttpResponse,extractor:com.github.agourlay.cornichon.http.ResponseExtractor):Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Session]", "kind" : "def"}, {"label" : "expectStatusCode", "tail" : "(httpResponse: CornichonHttpResponse, expected: Option[Int]): Either[CornichonError, CornichonHttpResponse]", "member" : "com.github.agourlay.cornichon.http.HttpService.expectStatusCode", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#expectStatusCode(httpResponse:com.github.agourlay.cornichon.http.CornichonHttpResponse,expected:Option[Int]):Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.http.CornichonHttpResponse]", "kind" : "def"}, {"label" : "ignoreHeadersSelection", "tail" : "(headers: Seq[(String, String)], ignore: HeaderSelection): Seq[(String, String)]", "member" : "com.github.agourlay.cornichon.http.HttpService.ignoreHeadersSelection", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#ignoreHeadersSelection(headers:Seq[(String,String)],ignore:com.github.agourlay.cornichon.http.HeaderSelection):Seq[(String,String)]", "kind" : "def"}, {"label" : "configureRequest", "tail" : "(req: HttpRequest[A], config: Config)(arg0: Show[A]): HttpRequest[A]", "member" : "com.github.agourlay.cornichon.http.HttpService.configureRequest", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#configureRequest[A](req:com.github.agourlay.cornichon.http.HttpRequest[A],config:com.github.agourlay.cornichon.core.Config)(implicitevidence$13:cats.Show[A]):com.github.agourlay.cornichon.http.HttpRequest[A]", "kind" : "def"}, {"label" : "decodeSessionHeaders", "tail" : "(headers: String): Either[CornichonError, List[(String, String)]]", "member" : "com.github.agourlay.cornichon.http.HttpService.decodeSessionHeaders", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#decodeSessionHeaders(headers:String):Either[com.github.agourlay.cornichon.core.CornichonError,List[(String,String)]]", "kind" : "def"}, {"label" : "encodeSessionHeaders", "tail" : "(headers: Seq[(String, String)]): String", "member" : "com.github.agourlay.cornichon.http.HttpService.encodeSessionHeaders", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#encodeSessionHeaders(headers:Seq[(String,String)]):String", "kind" : "def"}, {"label" : "encodeSessionHeader", "tail" : "(name: String, value: String): String", "member" : "com.github.agourlay.cornichon.http.HttpService.encodeSessionHeader", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#encodeSessionHeader(name:String,value:String):String", "kind" : "def"}, {"label" : "extractWithHeadersSession", "tail" : "(session: Session): Either[CornichonError, Seq[(String, String)]]", "member" : "com.github.agourlay.cornichon.http.HttpService.extractWithHeadersSession", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#extractWithHeadersSession(session:com.github.agourlay.cornichon.core.Session):Either[com.github.agourlay.cornichon.core.CornichonError,Seq[(String,String)]]", "kind" : "def"}, {"label" : "SessionKeys", "tail" : "", "member" : "com.github.agourlay.cornichon.http.HttpService.SessionKeys", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#SessionKeys", "kind" : "object"}, {"label" : "rightNone", "tail" : ": Right[Nothing, None.type]", "member" : "com.github.agourlay.cornichon.http.HttpService.rightNone", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#rightNone:scala.util.Right[Nothing,None.type]", "kind" : "val"}, {"label" : "rightNil", "tail" : ": Right[Nothing, Nil.type]", "member" : "com.github.agourlay.cornichon.http.HttpService.rightNil", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#rightNil:scala.util.Right[Nothing,scala.collection.immutable.Nil.type]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpService$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/github\/agourlay\/cornichon\/http\/HttpService.html", "kind" : "class"}, {"name" : "com.github.agourlay.cornichon.http.HttpStream", "shortDescription" : "", "members_case class" : [{"member" : "com.github.agourlay.cornichon.http.HttpStream#<init>", "error" : "unsupported entity"}, {"label" : "name", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.HttpStream.name", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStream.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStream.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStream.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStream.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStream.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStream.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStream.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStream.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStream.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStream.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStream.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStream.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStream.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStream.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStream.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStream.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStream.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/http\/HttpStream.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.http.HttpStreamedRequest", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest$.html", "members_object" : [{"label" : "showStreamedRequest", "tail" : ": Show[HttpStreamedRequest]", "member" : "com.github.agourlay.cornichon.http.HttpStreamedRequest.showStreamedRequest", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest$.html#showStreamedRequest:cats.Show[com.github.agourlay.cornichon.http.HttpStreamedRequest]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "compactDescription", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.HttpStreamedRequest.compactDescription", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html#compactDescription:String", "kind" : "lazy val"}, {"label" : "addHeaders", "tail" : "(headers: (String, String)*): HttpStreamedRequest", "member" : "com.github.agourlay.cornichon.http.HttpStreamedRequest.addHeaders", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html#addHeaders(headers:(String,String)*):com.github.agourlay.cornichon.http.HttpStreamedRequest", "kind" : "def"}, {"label" : "withHeaders", "tail" : "(headers: (String, String)*): HttpStreamedRequest", "member" : "com.github.agourlay.cornichon.http.HttpStreamedRequest.withHeaders", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html#withHeaders(headers:(String,String)*):com.github.agourlay.cornichon.http.HttpStreamedRequest", "kind" : "def"}, {"label" : "addParams", "tail" : "(params: (String, String)*): HttpStreamedRequest", "member" : "com.github.agourlay.cornichon.http.HttpStreamedRequest.addParams", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html#addParams(params:(String,String)*):com.github.agourlay.cornichon.http.HttpStreamedRequest", "kind" : "def"}, {"label" : "withParams", "tail" : "(params: (String, String)*): HttpStreamedRequest", "member" : "com.github.agourlay.cornichon.http.HttpStreamedRequest.withParams", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html#withParams(params:(String,String)*):com.github.agourlay.cornichon.http.HttpStreamedRequest", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.http.HttpStreamedRequest#<init>", "error" : "unsupported entity"}, {"label" : "headers", "tail" : ": Seq[(String, String)]", "member" : "com.github.agourlay.cornichon.http.HttpStreamedRequest.headers", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html#headers:Seq[(String,String)]", "kind" : "val"}, {"label" : "params", "tail" : ": Seq[(String, String)]", "member" : "com.github.agourlay.cornichon.http.HttpStreamedRequest.params", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html#params:Seq[(String,String)]", "kind" : "val"}, {"label" : "takeWithin", "tail" : ": FiniteDuration", "member" : "com.github.agourlay.cornichon.http.HttpStreamedRequest.takeWithin", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html#takeWithin:scala.concurrent.duration.FiniteDuration", "kind" : "val"}, {"label" : "url", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.HttpStreamedRequest.url", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html#url:String", "kind" : "val"}, {"label" : "stream", "tail" : ": HttpStream", "member" : "com.github.agourlay.cornichon.http.HttpStreamedRequest.stream", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html#stream:com.github.agourlay.cornichon.http.HttpStream", "kind" : "val"}, {"label" : "headersTitle", "tail" : "(): String", "member" : "com.github.agourlay.cornichon.http.BaseRequest.headersTitle", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html#headersTitle:String", "kind" : "def"}, {"label" : "paramsTitle", "tail" : "(): String", "member" : "com.github.agourlay.cornichon.http.BaseRequest.paramsTitle", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html#paramsTitle:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/http\/HttpStreamedRequest.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.http.HttpStreams", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/http\/HttpStreams$.html", "members_object" : [{"label" : "WS", "tail" : ": HttpStream", "member" : "com.github.agourlay.cornichon.http.HttpStreams.WS", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreams$.html#WS:com.github.agourlay.cornichon.http.HttpStream", "kind" : "val"}, {"label" : "SSE", "tail" : ": HttpStream", "member" : "com.github.agourlay.cornichon.http.HttpStreams.SSE", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreams$.html#SSE:com.github.agourlay.cornichon.http.HttpStream", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreams$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreams$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreams$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreams$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreams$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreams$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreams$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreams$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreams$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreams$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreams$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreams$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreams$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreams$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreams$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreams$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreams$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreams$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/HttpStreams$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.agourlay.cornichon.http.MalformedHeadersError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.MalformedHeadersError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedHeadersError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.http.MalformedHeadersError#<init>", "error" : "unsupported entity"}, {"label" : "error", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.MalformedHeadersError.error", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedHeadersError.html#error:String", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedHeadersError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedHeadersError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedHeadersError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedHeadersError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedHeadersError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedHeadersError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedHeadersError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedHeadersError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedHeadersError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedHeadersError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedHeadersError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedHeadersError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedHeadersError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedHeadersError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedHeadersError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedHeadersError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedHeadersError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedHeadersError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedHeadersError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/http\/MalformedHeadersError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.http.MalformedUriError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.MalformedUriError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedUriError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.http.MalformedUriError#<init>", "error" : "unsupported entity"}, {"label" : "error", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.MalformedUriError.error", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedUriError.html#error:String", "kind" : "val"}, {"label" : "uri", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.MalformedUriError.uri", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedUriError.html#uri:String", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedUriError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedUriError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedUriError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedUriError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedUriError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedUriError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedUriError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedUriError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedUriError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedUriError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedUriError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedUriError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedUriError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedUriError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedUriError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedUriError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedUriError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedUriError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/MalformedUriError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/http\/MalformedUriError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.http.NoOpExtraction", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/http\/NoOpExtraction$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/NoOpExtraction$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/NoOpExtraction$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/NoOpExtraction$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/NoOpExtraction$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/NoOpExtraction$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/NoOpExtraction$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/NoOpExtraction$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/NoOpExtraction$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/NoOpExtraction$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/NoOpExtraction$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/NoOpExtraction$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/NoOpExtraction$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/NoOpExtraction$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/NoOpExtraction$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/NoOpExtraction$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/NoOpExtraction$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/NoOpExtraction$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/NoOpExtraction$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/NoOpExtraction$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.agourlay.cornichon.http.PathExtractor", "shortDescription" : "", "members_case class" : [{"member" : "com.github.agourlay.cornichon.http.PathExtractor#<init>", "error" : "unsupported entity"}, {"label" : "targetKey", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.PathExtractor.targetKey", "link" : "com\/github\/agourlay\/cornichon\/http\/PathExtractor.html#targetKey:String", "kind" : "val"}, {"label" : "path", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.PathExtractor.path", "link" : "com\/github\/agourlay\/cornichon\/http\/PathExtractor.html#path:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/PathExtractor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/PathExtractor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/PathExtractor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/PathExtractor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/PathExtractor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/PathExtractor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/PathExtractor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/PathExtractor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/PathExtractor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/PathExtractor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/PathExtractor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/PathExtractor.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/PathExtractor.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/PathExtractor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/PathExtractor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/PathExtractor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/http\/PathExtractor.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.http.QueryGQL", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL$.html", "members_object" : [{"label" : "emptyDocument", "tail" : ": Document", "member" : "com.github.agourlay.cornichon.http.QueryGQL.emptyDocument", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL$.html#emptyDocument:sangria.ast.Document", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "payload", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.QueryGQL.payload", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#payload:String", "kind" : "lazy val"}, {"label" : "querySource", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.QueryGQL.querySource", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#querySource:String", "kind" : "lazy val"}, {"label" : "withVariables", "tail" : "(newVariables: (String, A)*)(arg0: Encoder[A], arg1: Show[A]): QueryGQL", "member" : "com.github.agourlay.cornichon.http.QueryGQL.withVariables", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#withVariables[A](newVariables:(String,A)*)(implicitevidence$1:io.circe.Encoder[A],implicitevidence$2:cats.Show[A]):com.github.agourlay.cornichon.http.QueryGQL", "kind" : "def"}, {"label" : "withOperationName", "tail" : "(operationName: String): QueryGQL", "member" : "com.github.agourlay.cornichon.http.QueryGQL.withOperationName", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#withOperationName(operationName:String):com.github.agourlay.cornichon.http.QueryGQL", "kind" : "def"}, {"label" : "withQuery", "tail" : "(query: Document): QueryGQL", "member" : "com.github.agourlay.cornichon.http.QueryGQL.withQuery", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#withQuery(query:sangria.ast.Document):com.github.agourlay.cornichon.http.QueryGQL", "kind" : "def"}, {"label" : "addHeaders", "tail" : "(headers: (String, String)*): QueryGQL", "member" : "com.github.agourlay.cornichon.http.QueryGQL.addHeaders", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#addHeaders(headers:(String,String)*):com.github.agourlay.cornichon.http.QueryGQL", "kind" : "def"}, {"label" : "withHeaders", "tail" : "(headers: (String, String)*): QueryGQL", "member" : "com.github.agourlay.cornichon.http.QueryGQL.withHeaders", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#withHeaders(headers:(String,String)*):com.github.agourlay.cornichon.http.QueryGQL", "kind" : "def"}, {"label" : "addParams", "tail" : "(params: (String, String)*): QueryGQL", "member" : "com.github.agourlay.cornichon.http.QueryGQL.addParams", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#addParams(params:(String,String)*):com.github.agourlay.cornichon.http.QueryGQL", "kind" : "def"}, {"label" : "withParams", "tail" : "(params: (String, String)*): QueryGQL", "member" : "com.github.agourlay.cornichon.http.QueryGQL.withParams", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#withParams(params:(String,String)*):com.github.agourlay.cornichon.http.QueryGQL", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.http.QueryGQL#<init>", "error" : "unsupported entity"}, {"label" : "headers", "tail" : ": Seq[(String, String)]", "member" : "com.github.agourlay.cornichon.http.QueryGQL.headers", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#headers:Seq[(String,String)]", "kind" : "val"}, {"label" : "params", "tail" : ": Seq[(String, String)]", "member" : "com.github.agourlay.cornichon.http.QueryGQL.params", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#params:Seq[(String,String)]", "kind" : "val"}, {"label" : "variables", "tail" : ": Option[Map[String, Json]]", "member" : "com.github.agourlay.cornichon.http.QueryGQL.variables", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#variables:Option[Map[String,io.circe.Json]]", "kind" : "val"}, {"label" : "operationName", "tail" : ": Option[String]", "member" : "com.github.agourlay.cornichon.http.QueryGQL.operationName", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#operationName:Option[String]", "kind" : "val"}, {"label" : "query", "tail" : ": Document", "member" : "com.github.agourlay.cornichon.http.QueryGQL.query", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#query:sangria.ast.Document", "kind" : "val"}, {"label" : "url", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.QueryGQL.url", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#url:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/http\/QueryGQL.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.http.RequestError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.RequestError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/http\/RequestError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.http.RequestError#<init>", "error" : "unsupported entity"}, {"label" : "e", "tail" : ": Throwable", "member" : "com.github.agourlay.cornichon.http.RequestError.e", "link" : "com\/github\/agourlay\/cornichon\/http\/RequestError.html#e:Throwable", "kind" : "val"}, {"label" : "request", "tail" : ": A", "member" : "com.github.agourlay.cornichon.http.RequestError.request", "link" : "com\/github\/agourlay\/cornichon\/http\/RequestError.html#request:A", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/http\/RequestError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/http\/RequestError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/http\/RequestError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/RequestError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/RequestError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/RequestError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/RequestError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/RequestError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/RequestError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/RequestError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/RequestError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/RequestError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/RequestError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/RequestError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/RequestError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/RequestError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/RequestError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/RequestError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/RequestError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/http\/RequestError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.http.ResponseExtractor", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/ResponseExtractor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/ResponseExtractor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/ResponseExtractor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/ResponseExtractor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/ResponseExtractor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/ResponseExtractor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/ResponseExtractor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/ResponseExtractor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/ResponseExtractor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/ResponseExtractor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/ResponseExtractor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/ResponseExtractor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/ResponseExtractor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/ResponseExtractor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/ResponseExtractor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/ResponseExtractor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/ResponseExtractor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/ResponseExtractor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/ResponseExtractor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "com\/github\/agourlay\/cornichon\/http\/ResponseExtractor.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.http.RootExtractor", "shortDescription" : "", "members_case class" : [{"member" : "com.github.agourlay.cornichon.http.RootExtractor#<init>", "error" : "unsupported entity"}, {"label" : "targetKey", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.RootExtractor.targetKey", "link" : "com\/github\/agourlay\/cornichon\/http\/RootExtractor.html#targetKey:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/RootExtractor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/RootExtractor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/RootExtractor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/RootExtractor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/RootExtractor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/RootExtractor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/RootExtractor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/RootExtractor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/RootExtractor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/RootExtractor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/RootExtractor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/RootExtractor.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/RootExtractor.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/RootExtractor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/RootExtractor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/RootExtractor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/http\/RootExtractor.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.http.SelectAll", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/http\/SelectAll$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectAll$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectAll$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectAll$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectAll$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectAll$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectAll$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectAll$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectAll$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectAll$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectAll$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectAll$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectAll$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectAll$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectAll$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectAll$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectAll$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectAll$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectAll$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectAll$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.agourlay.cornichon.http.SelectNone", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/http\/SelectNone$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectNone$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectNone$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectNone$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectNone$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectNone$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectNone$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectNone$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectNone$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectNone$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectNone$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectNone$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectNone$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectNone$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectNone$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectNone$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectNone$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectNone$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectNone$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/SelectNone$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.agourlay.cornichon.http.SseError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.SseError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/http\/SseError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.http.SseError#<init>", "error" : "unsupported entity"}, {"label" : "e", "tail" : ": Throwable", "member" : "com.github.agourlay.cornichon.http.SseError.e", "link" : "com\/github\/agourlay\/cornichon\/http\/SseError.html#e:Throwable", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/http\/SseError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/http\/SseError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/http\/SseError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/SseError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/SseError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/SseError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/SseError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/SseError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/SseError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/SseError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/SseError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/SseError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/SseError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/SseError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/SseError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/SseError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/SseError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/SseError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/SseError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/http\/SseError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.http.StatusNonExpected", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.StatusNonExpected.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/http\/StatusNonExpected.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.http.StatusNonExpected#<init>", "error" : "unsupported entity"}, {"label" : "response", "tail" : ": CornichonHttpResponse", "member" : "com.github.agourlay.cornichon.http.StatusNonExpected.response", "link" : "com\/github\/agourlay\/cornichon\/http\/StatusNonExpected.html#response:com.github.agourlay.cornichon.http.CornichonHttpResponse", "kind" : "val"}, {"label" : "expected", "tail" : ": Int", "member" : "com.github.agourlay.cornichon.http.StatusNonExpected.expected", "link" : "com\/github\/agourlay\/cornichon\/http\/StatusNonExpected.html#expected:Int", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/http\/StatusNonExpected.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/http\/StatusNonExpected.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/http\/StatusNonExpected.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/StatusNonExpected.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/StatusNonExpected.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/StatusNonExpected.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/StatusNonExpected.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/StatusNonExpected.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/StatusNonExpected.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/StatusNonExpected.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/StatusNonExpected.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/StatusNonExpected.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/StatusNonExpected.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/StatusNonExpected.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/StatusNonExpected.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/StatusNonExpected.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/StatusNonExpected.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/StatusNonExpected.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/StatusNonExpected.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/http\/StatusNonExpected.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.http.TimeoutErrorAfter", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.TimeoutErrorAfter.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/http\/TimeoutErrorAfter.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.http.TimeoutErrorAfter#<init>", "error" : "unsupported entity"}, {"label" : "after", "tail" : ": FiniteDuration", "member" : "com.github.agourlay.cornichon.http.TimeoutErrorAfter.after", "link" : "com\/github\/agourlay\/cornichon\/http\/TimeoutErrorAfter.html#after:scala.concurrent.duration.FiniteDuration", "kind" : "val"}, {"label" : "request", "tail" : ": A", "member" : "com.github.agourlay.cornichon.http.TimeoutErrorAfter.request", "link" : "com\/github\/agourlay\/cornichon\/http\/TimeoutErrorAfter.html#request:A", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/http\/TimeoutErrorAfter.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/http\/TimeoutErrorAfter.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/http\/TimeoutErrorAfter.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/TimeoutErrorAfter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/TimeoutErrorAfter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/TimeoutErrorAfter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/TimeoutErrorAfter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/TimeoutErrorAfter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/TimeoutErrorAfter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/TimeoutErrorAfter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/TimeoutErrorAfter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/TimeoutErrorAfter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/TimeoutErrorAfter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/TimeoutErrorAfter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/TimeoutErrorAfter.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/TimeoutErrorAfter.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/TimeoutErrorAfter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/TimeoutErrorAfter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/TimeoutErrorAfter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/http\/TimeoutErrorAfter.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.http.UnmarshallingResponseError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.UnmarshallingResponseError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/http\/UnmarshallingResponseError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.http.UnmarshallingResponseError#<init>", "error" : "unsupported entity"}, {"label" : "response", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.UnmarshallingResponseError.response", "link" : "com\/github\/agourlay\/cornichon\/http\/UnmarshallingResponseError.html#response:String", "kind" : "val"}, {"label" : "e", "tail" : ": Throwable", "member" : "com.github.agourlay.cornichon.http.UnmarshallingResponseError.e", "link" : "com\/github\/agourlay\/cornichon\/http\/UnmarshallingResponseError.html#e:Throwable", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/http\/UnmarshallingResponseError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/http\/UnmarshallingResponseError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/http\/UnmarshallingResponseError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/UnmarshallingResponseError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/UnmarshallingResponseError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/UnmarshallingResponseError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/UnmarshallingResponseError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/UnmarshallingResponseError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/UnmarshallingResponseError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/UnmarshallingResponseError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/UnmarshallingResponseError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/UnmarshallingResponseError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/UnmarshallingResponseError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/UnmarshallingResponseError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/UnmarshallingResponseError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/UnmarshallingResponseError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/UnmarshallingResponseError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/UnmarshallingResponseError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/UnmarshallingResponseError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/http\/UnmarshallingResponseError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.http.WsUpgradeError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.WsUpgradeError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/http\/WsUpgradeError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.http.WsUpgradeError#<init>", "error" : "unsupported entity"}, {"label" : "status", "tail" : ": Int", "member" : "com.github.agourlay.cornichon.http.WsUpgradeError.status", "link" : "com\/github\/agourlay\/cornichon\/http\/WsUpgradeError.html#status:Int", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/http\/WsUpgradeError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/http\/WsUpgradeError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/http\/WsUpgradeError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/WsUpgradeError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/WsUpgradeError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/WsUpgradeError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/WsUpgradeError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/WsUpgradeError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/WsUpgradeError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/WsUpgradeError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/WsUpgradeError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/WsUpgradeError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/WsUpgradeError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/WsUpgradeError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/WsUpgradeError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/WsUpgradeError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/WsUpgradeError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/WsUpgradeError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/WsUpgradeError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/http\/WsUpgradeError.html", "kind" : "case class"}], "com.github.agourlay.cornichon" : [{"name" : "com.github.agourlay.cornichon.CornichonFeature", "members_trait" : [{"label" : "TheyWord", "tail" : "", "member" : "org.scalatest.AsyncWordSpecLike.TheyWord", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#TheyWordextendsAnyRef", "kind" : "final class"}, {"label" : "ItWord", "tail" : "", "member" : "org.scalatest.AsyncWordSpecLike.ItWord", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#ItWordextendsAnyRef", "kind" : "final class"}, {"label" : "AfterWord", "tail" : "", "member" : "org.scalatest.AsyncWordSpecLike.AfterWord", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#AfterWordextendsAnyRef", "kind" : "final class"}, {"label" : "WordSpecStringWrapper", "tail" : "", "member" : "org.scalatest.AsyncWordSpecLike.WordSpecStringWrapper", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#WordSpecStringWrapperextendsAnyRef", "kind" : "final class"}, {"label" : "ResultOfTaggedAsInvocationOnString", "tail" : "", "member" : "org.scalatest.AsyncWordSpecLike.ResultOfTaggedAsInvocationOnString", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#ResultOfTaggedAsInvocationOnStringextendsAnyRef", "kind" : "final class"}, {"label" : "StringCanWrapperForVerb", "tail" : "", "member" : "org.scalatest.words.CanVerb.StringCanWrapperForVerb", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#StringCanWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "StringMustWrapperForVerb", "tail" : "", "member" : "org.scalatest.words.MustVerb.StringMustWrapperForVerb", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#StringMustWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "StringShouldWrapperForVerb", "tail" : "", "member" : "org.scalatest.words.ShouldVerb.StringShouldWrapperForVerb", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#StringShouldWrapperForVerbextendsAnyRef", "kind" : "trait"}, {"label" : "NoArgAsyncTest", "tail" : "", "member" : "org.scalatest.AsyncTestSuite.NoArgAsyncTest", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#NoArgAsyncTestextends()=>org.scalatest.FutureOutcomewithTestData", "kind" : "trait"}, {"label" : "ResultOfCompleteInvocation", "tail" : "", "member" : "org.scalatest.CompleteLastly.ResultOfCompleteInvocation", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#ResultOfCompleteInvocation[T<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "AssertionsHelper", "tail" : "", "member" : "org.scalatest.Assertions.AssertionsHelper", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#AssertionsHelperextendsAnyRef", "kind" : "class"}, {"label" : "CheckingEqualizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.CheckingEqualizer", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#CheckingEqualizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "Equalizer", "tail" : "", "member" : "org.scalactic.TripleEqualsSupport.Equalizer", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#Equalizer[L<:<?>]extendsAnyRef", "kind" : "class"}, {"label" : "And", "tail" : "", "member" : "com.github.agourlay.cornichon.dsl.Dsl.And", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#And", "kind" : "object"}, {"label" : "Then", "tail" : "", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Then", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#Then", "kind" : "object"}, {"label" : "Given", "tail" : "", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Given", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#Given", "kind" : "object"}, {"label" : "When", "tail" : "", "member" : "com.github.agourlay.cornichon.dsl.Dsl.When", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#When", "kind" : "object"}, {"label" : "Starters", "tail" : "", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Starters", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#StartersextendsDynamic", "kind" : "sealed trait"}, {"label" : "run", "tail" : "(testName: Option[String], args: Args): Status", "member" : "com.github.agourlay.cornichon.scalatest.ScalatestFeature.run", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#run(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "afterAll", "tail" : "(): Unit", "member" : "com.github.agourlay.cornichon.scalatest.ScalatestFeature.afterAll", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#afterAll():Unit", "kind" : "def"}, {"label" : "beforeAll", "tail" : "(): Unit", "member" : "com.github.agourlay.cornichon.scalatest.ScalatestFeature.beforeAll", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#beforeAll():Unit", "kind" : "def"}, {"label" : "createTestSpecificReporter", "tail" : "(testSorter: DistributedTestSorter, testName: String): Reporter", "member" : "org.scalatest.ParallelTestExecution.createTestSpecificReporter", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#createTestSpecificReporter(testSorter:org.scalatest.DistributedTestSorter,testName:String):org.scalatest.Reporter", "kind" : "def"}, {"label" : "sortingTimeout", "tail" : "(): Span", "member" : "org.scalatest.ParallelTestExecution.sortingTimeout", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#sortingTimeout:org.scalatest.time.Span", "kind" : "def"}, {"label" : "newInstance", "tail" : "(): Suite with ParallelTestExecution", "member" : "org.scalatest.ParallelTestExecution.newInstance", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#newInstance:org.scalatest.Suitewithorg.scalatest.ParallelTestExecution", "kind" : "def"}, {"label" : "runTest", "tail" : "(testName: String, args: Args): Status", "member" : "org.scalatest.ParallelTestExecution.runTest", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#runTest(testName:String,args:org.scalatest.Args):org.scalatest.Status", "kind" : "final def"}, {"label" : "runTests", "tail" : "(testName: Option[String], args: Args): Status", "member" : "org.scalatest.ParallelTestExecution.runTests", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#runTests(testName:Option[String],args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "invokeBeforeAllAndAfterAllEvenIfNoTestsAreExpected", "tail" : ": Boolean", "member" : "org.scalatest.BeforeAndAfterAll.invokeBeforeAllAndAfterAllEvenIfNoTestsAreExpected", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#invokeBeforeAllAndAfterAllEvenIfNoTestsAreExpected:Boolean", "kind" : "val"}, {"label" : "testDataFor", "tail" : "(testName: String, theConfigMap: ConfigMap): TestData", "member" : "org.scalatest.AsyncWordSpecLike.testDataFor", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#testDataFor(testName:String,theConfigMap:org.scalatest.ConfigMap):org.scalatest.TestData", "kind" : "def"}, {"label" : "styleName", "tail" : ": String", "member" : "org.scalatest.AsyncWordSpecLike.styleName", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#styleName:String", "kind" : "final val"}, {"label" : "behave", "tail" : ": BehaveWord", "member" : "org.scalatest.AsyncWordSpecLike.behave", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#behave:org.scalatest.words.BehaveWord", "kind" : "val"}, {"label" : "testNames", "tail" : "(): Set[String]", "member" : "org.scalatest.AsyncWordSpecLike.testNames", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#testNames:Set[String]", "kind" : "def"}, {"label" : "tags", "tail" : "(): Map[String, Set[String]]", "member" : "org.scalatest.AsyncWordSpecLike.tags", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#tags:Map[String,Set[String]]", "kind" : "def"}, {"label" : "subjectWithAfterWordRegistrationFunction", "tail" : ": SubjectWithAfterWordRegistration", "member" : "org.scalatest.AsyncWordSpecLike.subjectWithAfterWordRegistrationFunction", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#subjectWithAfterWordRegistrationFunction:org.scalatest.words.SubjectWithAfterWordRegistration", "kind" : "implicit val"}, {"label" : "subjectRegistrationFunction", "tail" : ": StringVerbBlockRegistration", "member" : "org.scalatest.AsyncWordSpecLike.subjectRegistrationFunction", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#subjectRegistrationFunction:org.scalatest.words.StringVerbBlockRegistration", "kind" : "implicit val"}, {"label" : "convertToWordSpecStringWrapper", "tail" : "(s: String): WordSpecStringWrapper", "member" : "org.scalatest.AsyncWordSpecLike.convertToWordSpecStringWrapper", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#convertToWordSpecStringWrapper(s:String):AsyncWordSpecLike.this.WordSpecStringWrapper", "kind" : "implicit def"}, {"label" : "they", "tail" : ": TheyWord", "member" : "org.scalatest.AsyncWordSpecLike.they", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#they:AsyncWordSpecLike.this.TheyWord", "kind" : "val"}, {"label" : "it", "tail" : ": ItWord", "member" : "org.scalatest.AsyncWordSpecLike.it", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#it:AsyncWordSpecLike.this.ItWord", "kind" : "val"}, {"label" : "afterWord", "tail" : "(text: String): AfterWord", "member" : "org.scalatest.AsyncWordSpecLike.afterWord", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#afterWord(text:String):AsyncWordSpecLike.this.AfterWord", "kind" : "def"}, {"label" : "registerIgnoredAsyncTest", "tail" : "(testText: String, testTags: Tag*)(testFun: â‡’ Future[Assertion])(pos: Position): Unit", "member" : "org.scalatest.AsyncWordSpecLike.registerIgnoredAsyncTest", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#registerIgnoredAsyncTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>scala.concurrent.Future[org.scalatest.compatible.Assertion])(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "registerAsyncTest", "tail" : "(testText: String, testTags: Tag*)(testFun: â‡’ Future[Assertion])(pos: Position): Unit", "member" : "org.scalatest.AsyncWordSpecLike.registerAsyncTest", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#registerAsyncTest(testText:String,testTags:org.scalatest.Tag*)(testFun:=>scala.concurrent.Future[org.scalatest.compatible.Assertion])(implicitpos:org.scalactic.source.Position):Unit", "kind" : "final def"}, {"label" : "markup", "tail" : "(): Documenter", "member" : "org.scalatest.AsyncWordSpecLike.markup", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#markup:org.scalatest.Documenter", "kind" : "def"}, {"label" : "alert", "tail" : "(): Alerter", "member" : "org.scalatest.AsyncWordSpecLike.alert", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#alert:org.scalatest.Alerter", "kind" : "def"}, {"label" : "note", "tail" : "(): Notifier", "member" : "org.scalatest.AsyncWordSpecLike.note", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#note:org.scalatest.Notifier", "kind" : "def"}, {"label" : "info", "tail" : "(): Informer", "member" : "org.scalatest.AsyncWordSpecLike.info", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#info:org.scalatest.Informer", "kind" : "def"}, {"label" : "convertToStringCanWrapper", "tail" : "(o: String)(position: Position): StringCanWrapperForVerb", "member" : "org.scalatest.words.CanVerb.convertToStringCanWrapper", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#convertToStringCanWrapper(o:String)(implicitposition:org.scalactic.source.Position):CanVerb.this.StringCanWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertToStringMustWrapperForVerb", "tail" : "(o: String)(position: Position): StringMustWrapperForVerb", "member" : "org.scalatest.words.MustVerb.convertToStringMustWrapperForVerb", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#convertToStringMustWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):MustVerb.this.StringMustWrapperForVerb", "kind" : "implicit def"}, {"label" : "convertToStringShouldWrapperForVerb", "tail" : "(o: String)(position: Position): StringShouldWrapperForVerb", "member" : "org.scalatest.words.ShouldVerb.convertToStringShouldWrapperForVerb", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#convertToStringShouldWrapperForVerb(o:String)(implicitposition:org.scalactic.source.Position):ShouldVerb.this.StringShouldWrapperForVerb", "kind" : "implicit def"}, {"label" : "withFixture", "tail" : "(test: NoArgAsyncTest): FutureOutcome", "member" : "org.scalatest.AsyncTestSuite.withFixture", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#withFixture(test:AsyncTestSuite.this.NoArgAsyncTest):org.scalatest.FutureOutcome", "kind" : "def"}, {"label" : "parallelAsyncTestExecution", "tail" : "(): Boolean", "member" : "org.scalatest.AsyncTestSuite.parallelAsyncTestExecution", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#parallelAsyncTestExecution:Boolean", "kind" : "def"}, {"label" : "convertAssertionToFutureAssertion", "tail" : "(assertion: Assertion): Future[Assertion]", "member" : "org.scalatest.AsyncTestSuite.convertAssertionToFutureAssertion", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#convertAssertionToFutureAssertion(assertion:org.scalatest.compatible.Assertion):scala.concurrent.Future[org.scalatest.compatible.Assertion]", "kind" : "implicit def"}, {"label" : "executionContext", "tail" : "(): ExecutionContext", "member" : "org.scalatest.AsyncTestSuite.executionContext", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#executionContext:scala.concurrent.ExecutionContext", "kind" : "implicit def"}, {"label" : "complete", "tail" : "(completeBlock: â‡’ T)(futuristic: Futuristic[T]): ResultOfCompleteInvocation[T]", "member" : "org.scalatest.CompleteLastly.complete", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#complete[T](completeBlock:=>T)(implicitfuturistic:org.scalatest.enablers.Futuristic[T]):CompleteLastly.this.ResultOfCompleteInvocation[T]", "kind" : "def"}, {"label" : "recoverToSucceededIf", "tail" : "(future: Future[Any])(classTag: ClassTag[T], exCtx: ExecutionContext, pos: Position): Future[Assertion]", "member" : "org.scalatest.RecoverMethods.recoverToSucceededIf", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#recoverToSucceededIf[T<:AnyRef](future:scala.concurrent.Future[Any])(implicitclassTag:scala.reflect.ClassTag[T],implicitexCtx:scala.concurrent.ExecutionContext,implicitpos:org.scalactic.source.Position):scala.concurrent.Future[org.scalatest.Assertion]", "kind" : "def"}, {"label" : "recoverToExceptionIf", "tail" : "(future: Future[Any])(classTag: ClassTag[T], exCtx: ExecutionContext, pos: Position): Future[T]", "member" : "org.scalatest.RecoverMethods.recoverToExceptionIf", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#recoverToExceptionIf[T<:AnyRef](future:scala.concurrent.Future[Any])(implicitclassTag:scala.reflect.ClassTag[T],implicitexCtx:scala.concurrent.ExecutionContext,implicitpos:org.scalactic.source.Position):scala.concurrent.Future[T]", "kind" : "def"}, {"label" : "rerunner", "tail" : "(): Option[String]", "member" : "org.scalatest.Suite.rerunner", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#rerunner:Option[String]", "kind" : "def"}, {"label" : "expectedTestCount", "tail" : "(filter: Filter): Int", "member" : "org.scalatest.Suite.expectedTestCount", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#expectedTestCount(filter:org.scalatest.Filter):Int", "kind" : "def"}, {"label" : "suiteId", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteId", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#suiteId:String", "kind" : "def"}, {"label" : "suiteName", "tail" : "(): String", "member" : "org.scalatest.Suite.suiteName", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#suiteName:String", "kind" : "def"}, {"label" : "runNestedSuites", "tail" : "(args: Args): Status", "member" : "org.scalatest.Suite.runNestedSuites", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#runNestedSuites(args:org.scalatest.Args):org.scalatest.Status", "kind" : "def"}, {"label" : "execute", "tail" : "(): Unit", "member" : "org.scalatest.Suite.execute", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#execute:Unit", "kind" : "final def"}, {"label" : "execute", "tail" : "(testName: String, configMap: ConfigMap, color: Boolean, durations: Boolean, shortstacks: Boolean, fullstacks: Boolean, stats: Boolean): Unit", "member" : "org.scalatest.Suite.execute", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#execute(testName:String,configMap:org.scalatest.ConfigMap,color:Boolean,durations:Boolean,shortstacks:Boolean,fullstacks:Boolean,stats:Boolean):Unit", "kind" : "final def"}, {"label" : "nestedSuites", "tail" : "(): IndexedSeq[Suite]", "member" : "org.scalatest.Suite.nestedSuites", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#nestedSuites:scala.collection.immutable.IndexedSeq[org.scalatest.Suite]", "kind" : "def"}, {"label" : "succeed", "tail" : ": Assertion", "member" : "org.scalatest.Assertions.succeed", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#succeed:org.scalatest.Assertion", "kind" : "final val"}, {"label" : "pendingUntilFixed", "tail" : "(f: â‡’ Unit)(pos: Position): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pendingUntilFixed", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#pendingUntilFixed(f:=>Unit)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "pending", "tail" : "(): Assertion with PendingStatement", "member" : "org.scalatest.Assertions.pending", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#pending:org.scalatest.Assertionwithorg.scalatest.PendingStatement", "kind" : "def"}, {"label" : "withClue", "tail" : "(clue: Any)(fun: â‡’ T): T", "member" : "org.scalatest.Assertions.withClue", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#withClue[T](clue:Any)(fun:=>T):T", "kind" : "def"}, {"label" : "cancel", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#cancel(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#cancel(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#cancel(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "cancel", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.cancel", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#cancel()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#fail(cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String, cause: Throwable)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#fail(message:String,cause:Throwable)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "(message: String)(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#fail(message:String)(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "fail", "tail" : "()(pos: Position): Nothing", "member" : "org.scalatest.Assertions.fail", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#fail()(implicitpos:org.scalactic.source.Position):Nothing", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#assertResult(expected:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "assertResult", "tail" : "(expected: Any, clue: Any)(actual: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertResult", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#assertResult(expected:Any,clue:Any)(actual:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "trap", "tail" : "(f: â‡’ T): Throwable", "member" : "org.scalatest.Assertions.trap", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#trap[T](f:=>T):Throwable", "kind" : "def"}, {"label" : "assertThrows", "tail" : "(f: â‡’ Any)(classTag: ClassTag[T], pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertThrows", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#assertThrows[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "def"}, {"label" : "intercept", "tail" : "(f: â‡’ Any)(classTag: ClassTag[T], pos: Position): T", "member" : "org.scalatest.Assertions.intercept", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#intercept[T<:AnyRef](f:=>Any)(implicitclassTag:scala.reflect.ClassTag[T],implicitpos:org.scalactic.source.Position):T", "kind" : "def"}, {"label" : "assertCompiles", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertCompiles", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#assertCompiles(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertDoesNotCompile", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertDoesNotCompile", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#assertDoesNotCompile(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertTypeError", "tail" : "(code: String)(pos: Position): Assertion", "member" : "org.scalatest.Assertions.assertTypeError", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#assertTypeError(code:String)(implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#assume(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assume", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assume", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#assume(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assert", "tail" : "(condition: Boolean, clue: Any)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#assert(condition:Boolean,clue:Any)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "assertionsHelper", "tail" : ": AssertionsHelper", "member" : "org.scalatest.Assertions.assertionsHelper", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#assertionsHelper:Assertions.this.AssertionsHelper", "kind" : "val"}, {"label" : "assert", "tail" : "(condition: Boolean)(prettifier: Prettifier, pos: Position): Assertion", "member" : "org.scalatest.Assertions.assert", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#assert(condition:Boolean)(implicitprettifier:org.scalactic.Prettifier,implicitpos:org.scalactic.source.Position):org.scalatest.Assertion", "kind" : "macro def"}, {"label" : "convertEquivalenceToBToAConversionConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: (B) â‡’ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConversionConstraint", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#convertEquivalenceToBToAConversionConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "conversionCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], cnv: (B) â‡’ A): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.conversionCheckedConstraint", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#conversionCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitcnv:B=>A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConversionConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: (A) â‡’ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConversionConstraint", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#convertEquivalenceToAToBConversionConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityConversionCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], cnv: (A) â‡’ B): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityConversionCheckedConstraint", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#lowPriorityConversionCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitcnv:A=>B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToBToAConstraint", "tail" : "(equivalenceOfA: Equivalence[A])(ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToBToAConstraint", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#convertEquivalenceToBToAConstraint[A,B](equivalenceOfA:org.scalactic.Equivalence[A])(implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "typeCheckedConstraint", "tail" : "(equivalenceOfA: Equivalence[A], ev: <:<[B, A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.typeCheckedConstraint", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#typeCheckedConstraint[A,B](implicitequivalenceOfA:org.scalactic.Equivalence[A],implicitev:B<:<A):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "convertEquivalenceToAToBConstraint", "tail" : "(equivalenceOfB: Equivalence[B])(ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.convertEquivalenceToAToBConstraint", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#convertEquivalenceToAToBConstraint[A,B](equivalenceOfB:org.scalactic.Equivalence[B])(implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "lowPriorityTypeCheckedConstraint", "tail" : "(equivalenceOfB: Equivalence[B], ev: <:<[A, B]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.lowPriorityTypeCheckedConstraint", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#lowPriorityTypeCheckedConstraint[A,B](implicitequivalenceOfB:org.scalactic.Equivalence[B],implicitev:A<:<B):org.scalactic.CanEqual[A,B]", "kind" : "def"}, {"label" : "unconstrainedEquality", "tail" : "(equalityOfA: Equality[A]): CanEqual[A, B]", "member" : "org.scalactic.TripleEquals.unconstrainedEquality", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#unconstrainedEquality[A,B](implicitequalityOfA:org.scalactic.Equality[A]):org.scalactic.CanEqual[A,B]", "kind" : "implicit def"}, {"label" : "convertToCheckingEqualizer", "tail" : "(left: T): CheckingEqualizer[T]", "member" : "org.scalactic.TripleEquals.convertToCheckingEqualizer", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#convertToCheckingEqualizer[T](left:T):TripleEquals.this.CheckingEqualizer[T]", "kind" : "def"}, {"label" : "convertToEqualizer", "tail" : "(left: T): Equalizer[T]", "member" : "org.scalactic.TripleEquals.convertToEqualizer", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#convertToEqualizer[T](left:T):TripleEquals.this.Equalizer[T]", "kind" : "implicit def"}, {"label" : "!==", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#!==[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Spread[T]): TripleEqualsInvocationOnSpread[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#===[T](right:org.scalactic.TripleEqualsSupport.Spread[T]):org.scalactic.TripleEqualsSupport.TripleEqualsInvocationOnSpread[T]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#!==(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "===", "tail" : "(right: Null): TripleEqualsInvocation[Null]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#===(right:Null):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[Null]", "kind" : "def"}, {"label" : "!==", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.!==", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#!==[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "===", "tail" : "(right: T): TripleEqualsInvocation[T]", "member" : "org.scalactic.TripleEqualsSupport.===", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#===[T](right:T):org.scalactic.TripleEqualsSupport.TripleEqualsInvocation[T]", "kind" : "def"}, {"label" : "defaultEquality", "tail" : "(): Equality[A]", "member" : "org.scalactic.TripleEqualsSupport.defaultEquality", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#defaultEquality[A]:org.scalactic.Equality[A]", "kind" : "def"}, {"label" : "afterEachScenario", "tail" : "(step: Step): Unit", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.afterEachScenario", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#afterEachScenario(step:com.github.agourlay.cornichon.core.Step):Unit", "kind" : "def"}, {"label" : "beforeEachScenario", "tail" : "(step: Step): Unit", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.beforeEachScenario", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#beforeEachScenario(step:com.github.agourlay.cornichon.core.Step):Unit", "kind" : "def"}, {"label" : "afterFeature", "tail" : "(after: â‡’ Unit): Unit", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.afterFeature", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#afterFeature(after:=>Unit):Unit", "kind" : "def"}, {"label" : "beforeFeature", "tail" : "(before: â‡’ Unit): Unit", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.beforeFeature", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#beforeFeature(before:=>Unit):Unit", "kind" : "def"}, {"label" : "registerMatcher", "tail" : "(): List[Matcher]", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.registerMatcher", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#registerMatcher:List[com.github.agourlay.cornichon.matchers.Matcher]", "kind" : "def"}, {"label" : "registerExtractors", "tail" : "(): Map[String, Mapper]", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.registerExtractors", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#registerExtractors:Map[String,com.github.agourlay.cornichon.resolver.Mapper]", "kind" : "def"}, {"label" : "runScenario", "tail" : "(s: Scenario): Future[ScenarioReport]", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.runScenario", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#runScenario(s:com.github.agourlay.cornichon.core.Scenario):scala.concurrent.Future[com.github.agourlay.cornichon.core.ScenarioReport]", "kind" : "def"}, {"label" : "matcherResolver", "tail" : ": MatcherResolver", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.matcherResolver", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#matcherResolver:com.github.agourlay.cornichon.matchers.MatcherResolver", "kind" : "lazy val"}, {"label" : "placeholderResolver", "tail" : ": PlaceholderResolver", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.placeholderResolver", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#placeholderResolver:com.github.agourlay.cornichon.resolver.PlaceholderResolver", "kind" : "lazy val"}, {"label" : "executeScenariosInParallel", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.executeScenariosInParallel", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#executeScenariosInParallel:Boolean", "kind" : "lazy val"}, {"label" : "scheduler", "tail" : ": Scheduler", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.scheduler", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#scheduler:monix.execution.Scheduler", "kind" : "implicit lazy val"}, {"label" : "afterEachScenario", "tail" : ": List[Step]", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.afterEachScenario", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#afterEachScenario:List[com.github.agourlay.cornichon.core.Step]", "kind" : "val"}, {"label" : "beforeEachScenario", "tail" : ": List[Step]", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.beforeEachScenario", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#beforeEachScenario:List[com.github.agourlay.cornichon.core.Step]", "kind" : "val"}, {"label" : "print_step", "tail" : "(message: String): DebugStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.print_step", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#print_step(message:String):com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_session", "tail" : "(key: String, indice: Option[Int], transform: (String) â‡’ String): DebugStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.show_session", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#show_session(key:String,indice:Option[Int],transform:String=>String):com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_session", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.show_session", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#show_session:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "session_value", "tail" : "(key: String): SessionStepBuilder", "member" : "com.github.agourlay.cornichon.dsl.Dsl.session_value", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#session_value(key:String):com.github.agourlay.cornichon.dsl.SessionSteps.SessionStepBuilder", "kind" : "def"}, {"label" : "transform_session", "tail" : "(key: String)(map: (String) â‡’ String): EffectStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.transform_session", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#transform_session(key:String)(map:String=>String):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "rollback", "tail" : "(key: String): EffectStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.rollback", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#rollback(key:String):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "remove", "tail" : "(key: String): EffectStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.remove", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#remove(key:String):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "save", "tail" : "(input: (String, String)): EffectStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.save", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#save(input:(String,String)):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "wait", "tail" : "(duration: FiniteDuration): EffectStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.wait", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#wait(duration:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "WithDataInputs", "tail" : "(where: String): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.WithDataInputs", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#WithDataInputs(where:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "LogDuration", "tail" : "(label: String): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.LogDuration", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#LogDuration(label:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "Within", "tail" : "(maxDuration: FiniteDuration): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Within", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#Within(maxDuration:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "Concurrently", "tail" : "(factor: Int, maxTime: FiniteDuration): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Concurrently", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#Concurrently(factor:Int,maxTime:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "Eventually", "tail" : "(maxDuration: FiniteDuration, interval: FiniteDuration): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Eventually", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#Eventually(maxDuration:scala.concurrent.duration.FiniteDuration,interval:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "RepeatDuring", "tail" : "(duration: FiniteDuration): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.RepeatDuring", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#RepeatDuring(duration:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "RetryMax", "tail" : "(limit: Int): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.RetryMax", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#RetryMax(limit:Int):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "RepeatFrom", "tail" : "(elements: Iterable[ContainerType[A, Show]])(indice: String): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.RepeatFrom", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#RepeatFrom[A](elements:Iterable[com.github.agourlay.cornichon.dsl.ContainerType[A,cats.Show]])(indice:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "RepeatWith", "tail" : "(elements: ContainerType[Any, Show]*)(indice: String): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.RepeatWith", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#RepeatWith(elements:com.github.agourlay.cornichon.dsl.ContainerType[Any,cats.Show]*)(indice:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "Repeat", "tail" : "(times: Int, indice: String): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Repeat", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#Repeat(times:Int,indice:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "Repeat", "tail" : "(times: Int): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Repeat", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#Repeat(times:Int):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "AttachAs", "tail" : "(title: String): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.AttachAs", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#AttachAs(title:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "Attach", "tail" : "(): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Attach", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#Attach:com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "scenarioBuilder", "tail" : "(s: ScenarioBuilder): BodyElementCollector[Step, Scenario]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.scenarioBuilder", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#scenarioBuilder(s:Dsl.this.ScenarioBuilder):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Scenario]", "kind" : "implicit def"}, {"label" : "Scenario", "tail" : "(name: String): ScenarioBuilder", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Scenario", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#Scenario(name:String):Dsl.this.ScenarioBuilder", "kind" : "def"}, {"label" : "featureBuilder", "tail" : "(f: FeatureBuilder): BodyElementCollector[Scenario, FeatureDef]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.featureBuilder", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#featureBuilder(f:Dsl.this.FeatureBuilder):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Scenario,com.github.agourlay.cornichon.core.FeatureDef]", "kind" : "implicit def"}, {"label" : "Feature", "tail" : "(name: String): FeatureBuilder", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Feature", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#Feature(name:String):Dsl.this.FeatureBuilder", "kind" : "def"}, {"label" : "catsStdShowForBoolean", "tail" : ": Show[Boolean]", "member" : "cats.instances.BooleanInstances.catsStdShowForBoolean", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#catsStdShowForBoolean:cats.Show[Boolean]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBoolean", "tail" : ": Order[Boolean]", "member" : "cats.kernel.instances.BooleanInstances.catsKernelStdOrderForBoolean", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#catsKernelStdOrderForBoolean:cats.kernel.Order[Boolean]", "kind" : "implicit val"}, {"label" : "catsStdShowForDouble", "tail" : ": Show[Double]", "member" : "cats.instances.DoubleInstances.catsStdShowForDouble", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#catsStdShowForDouble:cats.Show[Double]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForDouble", "tail" : ": CommutativeGroup[Double]", "member" : "cats.kernel.instances.DoubleInstances.catsKernelStdGroupForDouble", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#catsKernelStdGroupForDouble:cats.kernel.CommutativeGroup[Double]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForDouble", "tail" : ": Order[Double]", "member" : "cats.kernel.instances.DoubleInstances.catsKernelStdOrderForDouble", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#catsKernelStdOrderForDouble:cats.kernel.Order[Double]", "kind" : "implicit val"}, {"label" : "catsStdShowForFloat", "tail" : ": Show[Float]", "member" : "cats.instances.FloatInstances.catsStdShowForFloat", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#catsStdShowForFloat:cats.Show[Float]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForFloat", "tail" : ": CommutativeGroup[Float]", "member" : "cats.kernel.instances.FloatInstances.catsKernelStdGroupForFloat", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#catsKernelStdGroupForFloat:cats.kernel.CommutativeGroup[Float]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForFloat", "tail" : ": Order[Float]", "member" : "cats.kernel.instances.FloatInstances.catsKernelStdOrderForFloat", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#catsKernelStdOrderForFloat:cats.kernel.Order[Float]", "kind" : "implicit val"}, {"label" : "catsStdShowForLong", "tail" : ": Show[Long]", "member" : "cats.instances.LongInstances.catsStdShowForLong", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#catsStdShowForLong:cats.Show[Long]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForLong", "tail" : ": CommutativeGroup[Long]", "member" : "cats.kernel.instances.LongInstances.catsKernelStdGroupForLong", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#catsKernelStdGroupForLong:cats.kernel.CommutativeGroup[Long]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForLong", "tail" : ": Order[Long]", "member" : "cats.kernel.instances.LongInstances.catsKernelStdOrderForLong", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#catsKernelStdOrderForLong:cats.kernel.Order[Long]", "kind" : "implicit val"}, {"label" : "catsStdShowForChar", "tail" : ": Show[Char]", "member" : "cats.instances.CharInstances.catsStdShowForChar", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#catsStdShowForChar:cats.Show[Char]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForChar", "tail" : ": CharOrder", "member" : "cats.kernel.instances.CharInstances.catsKernelStdOrderForChar", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#catsKernelStdOrderForChar:cats.kernel.instances.CharOrder", "kind" : "implicit val"}, {"label" : "catsStdShowForInt", "tail" : ": Show[Int]", "member" : "cats.instances.IntInstances.catsStdShowForInt", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#catsStdShowForInt:cats.Show[Int]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForInt", "tail" : ": CommutativeGroup[Int]", "member" : "cats.kernel.instances.IntInstances.catsKernelStdGroupForInt", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#catsKernelStdGroupForInt:cats.kernel.CommutativeGroup[Int]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForInt", "tail" : ": Order[Int]", "member" : "cats.kernel.instances.IntInstances.catsKernelStdOrderForInt", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#catsKernelStdOrderForInt:cats.kernel.Order[Int]", "kind" : "implicit val"}, {"label" : "catsStdShowForString", "tail" : ": Show[String]", "member" : "cats.instances.StringInstances.catsStdShowForString", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#catsStdShowForString:cats.Show[String]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForString", "tail" : ": Monoid[String]", "member" : "cats.kernel.instances.StringInstances.catsKernelStdMonoidForString", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#catsKernelStdMonoidForString:cats.kernel.Monoid[String]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForString", "tail" : ": Order[String]", "member" : "cats.kernel.instances.StringInstances.catsKernelStdOrderForString", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#catsKernelStdOrderForString:cats.kernel.Order[String]", "kind" : "implicit val"}, {"label" : "session_json_values", "tail" : "(k1: String, k2: String): JsonValuesStepBuilder", "member" : "com.github.agourlay.cornichon.json.JsonDsl.session_json_values", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#session_json_values(k1:String,k2:String):com.github.agourlay.cornichon.json.JsonSteps.JsonValuesStepBuilder", "kind" : "def"}, {"label" : "show_key_as_json", "tail" : "(key: String, indice: Option[Int]): DebugStep", "member" : "com.github.agourlay.cornichon.json.JsonDsl.show_key_as_json", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#show_key_as_json(key:String,indice:Option[Int]):com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "root", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.JsonDsl.root", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#root:String", "kind" : "val"}, {"label" : "WithHeaders", "tail" : "(headers: (String, String)*): BodyElementCollector[Step, Seq[Step]]", "member" : "com.github.agourlay.cornichon.http.HttpDsl.WithHeaders", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#WithHeaders(headers:(String,String)*):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,Seq[com.github.agourlay.cornichon.core.Step]]", "kind" : "def"}, {"label" : "WithBasicAuth", "tail" : "(userName: String, password: String): BodyElementCollector[Step, Seq[Step]]", "member" : "com.github.agourlay.cornichon.http.HttpDsl.WithBasicAuth", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#WithBasicAuth(userName:String,password:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,Seq[com.github.agourlay.cornichon.core.Step]]", "kind" : "def"}, {"label" : "show_with_headers", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_with_headers", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#show_with_headers:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_last_headers", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_last_headers", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#show_last_headers:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_last_body_json", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_last_body_json", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#show_last_body_json:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_last_body", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_last_body", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#show_last_body:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_last_status", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_last_status", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#show_last_status:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_last_response_json", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_last_response_json", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#show_last_response_json:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_last_response", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_last_response", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#show_last_response:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "save_header_value", "tail" : "(args: (String, String)*): EffectStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.save_header_value", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#save_header_value(args:(String,String)*):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "save_body_path", "tail" : "(args: (String, String)*): EffectStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.save_body_path", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#save_body_path(args:(String,String)*):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "save_body", "tail" : "(target: String): EffectStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.save_body", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#save_body(target:String):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "body", "tail" : "(): JsonStepBuilder", "member" : "com.github.agourlay.cornichon.http.HttpDsl.body", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#body:com.github.agourlay.cornichon.json.JsonSteps.JsonStepBuilder", "kind" : "def"}, {"label" : "headers", "tail" : "(): HeadersStepBuilder", "member" : "com.github.agourlay.cornichon.http.HttpDsl.headers", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#headers:com.github.agourlay.cornichon.http.steps.HeadersSteps.HeadersStepBuilder", "kind" : "def"}, {"label" : "status", "tail" : "(): StatusStepBuilder.type", "member" : "com.github.agourlay.cornichon.http.HttpDsl.status", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#status:com.github.agourlay.cornichon.http.steps.StatusSteps.StatusStepBuilder.type", "kind" : "def"}, {"label" : "open_sse", "tail" : "(url: String, takeWithin: FiniteDuration): HttpStreamedRequest", "member" : "com.github.agourlay.cornichon.http.HttpDsl.open_sse", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#open_sse(url:String,takeWithin:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.http.HttpStreamedRequest", "kind" : "def"}, {"label" : "query_gql", "tail" : "(url: String): QueryGQL", "member" : "com.github.agourlay.cornichon.http.HttpDsl.query_gql", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#query_gql(url:String):com.github.agourlay.cornichon.http.QueryGQL", "kind" : "def"}, {"label" : "queryGqlToHttpRequest", "tail" : "(queryGQL: QueryGQL): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpDsl.queryGqlToHttpRequest", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#queryGqlToHttpRequest(queryGQL:com.github.agourlay.cornichon.http.QueryGQL):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "implicit def"}, {"label" : "queryGqlToStep", "tail" : "(queryGQL: QueryGQL): EffectStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.queryGqlToStep", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#queryGqlToStep(queryGQL:com.github.agourlay.cornichon.http.QueryGQL):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "implicit def"}, {"label" : "httpStreamedRequestToStep", "tail" : "(request: HttpStreamedRequest): EffectStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.httpStreamedRequestToStep", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#httpStreamedRequestToStep(request:com.github.agourlay.cornichon.http.HttpStreamedRequest):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "implicit def"}, {"label" : "httpRequestToStep", "tail" : "(request: HttpRequest[A])(arg0: Show[A], arg1: Resolvable[A], arg2: Encoder[A]): EffectStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.httpRequestToStep", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#httpRequestToStep[A](request:com.github.agourlay.cornichon.http.HttpRequest[A])(implicitevidence$1:cats.Show[A],implicitevidence$2:com.github.agourlay.cornichon.resolver.Resolvable[A],implicitevidence$3:io.circe.Encoder[A]):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "implicit def"}, {"label" : "http", "tail" : ": HttpService", "member" : "com.github.agourlay.cornichon.http.HttpDsl.http", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#http:com.github.agourlay.cornichon.http.HttpService", "kind" : "lazy val"}, {"label" : "httpServiceByURL", "tail" : "(baseUrl: String, timeout: FiniteDuration): HttpService", "member" : "com.github.agourlay.cornichon.http.HttpDsl.httpServiceByURL", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#httpServiceByURL(baseUrl:String,timeout:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.http.HttpService", "kind" : "def"}, {"label" : "baseUrl", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.HttpDsl.baseUrl", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#baseUrl:String", "kind" : "lazy val"}, {"label" : "requestTimeout", "tail" : ": FiniteDuration", "member" : "com.github.agourlay.cornichon.http.HttpDsl.requestTimeout", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#requestTimeout:scala.concurrent.duration.FiniteDuration", "kind" : "lazy val"}, {"label" : "patch", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.patch", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#patch(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "put", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.put", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#put(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "post", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.post", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#post(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "delete", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.delete", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#delete(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "options", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.options", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#options(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "head", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.head", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#head(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "get", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.get", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#get(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "removeFromWithHeaders", "tail" : "(name: String)(s: Session): Either[CornichonError, Session]", "member" : "com.github.agourlay.cornichon.http.HttpDslOps.removeFromWithHeaders", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#removeFromWithHeaders(name:String)(s:com.github.agourlay.cornichon.core.Session):Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Session]", "kind" : "def"}, {"label" : "addToWithHeaders", "tail" : "(name: String, value: String)(s: Session): Either[CornichonError, Session]", "member" : "com.github.agourlay.cornichon.http.HttpDslOps.addToWithHeaders", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#addToWithHeaders(name:String,value:String)(s:com.github.agourlay.cornichon.core.Session):Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Session]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "feature", "tail" : "(): FeatureDef", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.feature", "link" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html#feature:com.github.agourlay.cornichon.core.FeatureDef", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/github\/agourlay\/cornichon\/CornichonFeature.html", "kind" : "trait"}], "com.github.agourlay.cornichon.experimental" : [{"name" : "com.github.agourlay.cornichon.experimental.CornichonFeature", "members_trait" : [{"label" : "And", "tail" : "", "member" : "com.github.agourlay.cornichon.dsl.Dsl.And", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#And", "kind" : "object"}, {"label" : "Then", "tail" : "", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Then", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#Then", "kind" : "object"}, {"label" : "Given", "tail" : "", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Given", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#Given", "kind" : "object"}, {"label" : "When", "tail" : "", "member" : "com.github.agourlay.cornichon.dsl.Dsl.When", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#When", "kind" : "object"}, {"label" : "Starters", "tail" : "", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Starters", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#StartersextendsDynamic", "kind" : "sealed trait"}, {"label" : "afterEachScenario", "tail" : "(step: Step): Unit", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.afterEachScenario", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#afterEachScenario(step:com.github.agourlay.cornichon.core.Step):Unit", "kind" : "def"}, {"label" : "beforeEachScenario", "tail" : "(step: Step): Unit", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.beforeEachScenario", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#beforeEachScenario(step:com.github.agourlay.cornichon.core.Step):Unit", "kind" : "def"}, {"label" : "afterFeature", "tail" : "(after: â‡’ Unit): Unit", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.afterFeature", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#afterFeature(after:=>Unit):Unit", "kind" : "def"}, {"label" : "beforeFeature", "tail" : "(before: â‡’ Unit): Unit", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.beforeFeature", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#beforeFeature(before:=>Unit):Unit", "kind" : "def"}, {"label" : "registerMatcher", "tail" : "(): List[Matcher]", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.registerMatcher", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#registerMatcher:List[com.github.agourlay.cornichon.matchers.Matcher]", "kind" : "def"}, {"label" : "registerExtractors", "tail" : "(): Map[String, Mapper]", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.registerExtractors", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#registerExtractors:Map[String,com.github.agourlay.cornichon.resolver.Mapper]", "kind" : "def"}, {"label" : "runScenario", "tail" : "(s: Scenario): Future[ScenarioReport]", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.runScenario", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#runScenario(s:com.github.agourlay.cornichon.core.Scenario):scala.concurrent.Future[com.github.agourlay.cornichon.core.ScenarioReport]", "kind" : "def"}, {"label" : "matcherResolver", "tail" : ": MatcherResolver", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.matcherResolver", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#matcherResolver:com.github.agourlay.cornichon.matchers.MatcherResolver", "kind" : "lazy val"}, {"label" : "placeholderResolver", "tail" : ": PlaceholderResolver", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.placeholderResolver", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#placeholderResolver:com.github.agourlay.cornichon.resolver.PlaceholderResolver", "kind" : "lazy val"}, {"label" : "executeScenariosInParallel", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.executeScenariosInParallel", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#executeScenariosInParallel:Boolean", "kind" : "lazy val"}, {"label" : "scheduler", "tail" : ": Scheduler", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.scheduler", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#scheduler:monix.execution.Scheduler", "kind" : "implicit lazy val"}, {"label" : "afterEachScenario", "tail" : ": List[Step]", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.afterEachScenario", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#afterEachScenario:List[com.github.agourlay.cornichon.core.Step]", "kind" : "val"}, {"label" : "beforeEachScenario", "tail" : ": List[Step]", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.beforeEachScenario", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#beforeEachScenario:List[com.github.agourlay.cornichon.core.Step]", "kind" : "val"}, {"label" : "print_step", "tail" : "(message: String): DebugStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.print_step", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#print_step(message:String):com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_session", "tail" : "(key: String, indice: Option[Int], transform: (String) â‡’ String): DebugStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.show_session", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#show_session(key:String,indice:Option[Int],transform:String=>String):com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_session", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.show_session", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#show_session:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "session_value", "tail" : "(key: String): SessionStepBuilder", "member" : "com.github.agourlay.cornichon.dsl.Dsl.session_value", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#session_value(key:String):com.github.agourlay.cornichon.dsl.SessionSteps.SessionStepBuilder", "kind" : "def"}, {"label" : "transform_session", "tail" : "(key: String)(map: (String) â‡’ String): EffectStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.transform_session", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#transform_session(key:String)(map:String=>String):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "rollback", "tail" : "(key: String): EffectStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.rollback", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#rollback(key:String):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "remove", "tail" : "(key: String): EffectStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.remove", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#remove(key:String):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "save", "tail" : "(input: (String, String)): EffectStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.save", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#save(input:(String,String)):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "wait", "tail" : "(duration: FiniteDuration): EffectStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.wait", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#wait(duration:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "WithDataInputs", "tail" : "(where: String): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.WithDataInputs", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#WithDataInputs(where:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "LogDuration", "tail" : "(label: String): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.LogDuration", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#LogDuration(label:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "Within", "tail" : "(maxDuration: FiniteDuration): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Within", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#Within(maxDuration:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "Concurrently", "tail" : "(factor: Int, maxTime: FiniteDuration): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Concurrently", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#Concurrently(factor:Int,maxTime:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "Eventually", "tail" : "(maxDuration: FiniteDuration, interval: FiniteDuration): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Eventually", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#Eventually(maxDuration:scala.concurrent.duration.FiniteDuration,interval:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "RepeatDuring", "tail" : "(duration: FiniteDuration): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.RepeatDuring", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#RepeatDuring(duration:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "RetryMax", "tail" : "(limit: Int): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.RetryMax", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#RetryMax(limit:Int):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "RepeatFrom", "tail" : "(elements: Iterable[ContainerType[A, Show]])(indice: String): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.RepeatFrom", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#RepeatFrom[A](elements:Iterable[com.github.agourlay.cornichon.dsl.ContainerType[A,cats.Show]])(indice:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "RepeatWith", "tail" : "(elements: ContainerType[Any, Show]*)(indice: String): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.RepeatWith", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#RepeatWith(elements:com.github.agourlay.cornichon.dsl.ContainerType[Any,cats.Show]*)(indice:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "Repeat", "tail" : "(times: Int, indice: String): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Repeat", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#Repeat(times:Int,indice:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "Repeat", "tail" : "(times: Int): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Repeat", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#Repeat(times:Int):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "AttachAs", "tail" : "(title: String): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.AttachAs", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#AttachAs(title:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "Attach", "tail" : "(): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Attach", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#Attach:com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "scenarioBuilder", "tail" : "(s: ScenarioBuilder): BodyElementCollector[Step, Scenario]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.scenarioBuilder", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#scenarioBuilder(s:Dsl.this.ScenarioBuilder):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Scenario]", "kind" : "implicit def"}, {"label" : "Scenario", "tail" : "(name: String): ScenarioBuilder", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Scenario", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#Scenario(name:String):Dsl.this.ScenarioBuilder", "kind" : "def"}, {"label" : "featureBuilder", "tail" : "(f: FeatureBuilder): BodyElementCollector[Scenario, FeatureDef]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.featureBuilder", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#featureBuilder(f:Dsl.this.FeatureBuilder):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Scenario,com.github.agourlay.cornichon.core.FeatureDef]", "kind" : "implicit def"}, {"label" : "Feature", "tail" : "(name: String): FeatureBuilder", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Feature", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#Feature(name:String):Dsl.this.FeatureBuilder", "kind" : "def"}, {"label" : "catsStdShowForBoolean", "tail" : ": Show[Boolean]", "member" : "cats.instances.BooleanInstances.catsStdShowForBoolean", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#catsStdShowForBoolean:cats.Show[Boolean]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBoolean", "tail" : ": Order[Boolean]", "member" : "cats.kernel.instances.BooleanInstances.catsKernelStdOrderForBoolean", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#catsKernelStdOrderForBoolean:cats.kernel.Order[Boolean]", "kind" : "implicit val"}, {"label" : "catsStdShowForDouble", "tail" : ": Show[Double]", "member" : "cats.instances.DoubleInstances.catsStdShowForDouble", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#catsStdShowForDouble:cats.Show[Double]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForDouble", "tail" : ": CommutativeGroup[Double]", "member" : "cats.kernel.instances.DoubleInstances.catsKernelStdGroupForDouble", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#catsKernelStdGroupForDouble:cats.kernel.CommutativeGroup[Double]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForDouble", "tail" : ": Order[Double]", "member" : "cats.kernel.instances.DoubleInstances.catsKernelStdOrderForDouble", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#catsKernelStdOrderForDouble:cats.kernel.Order[Double]", "kind" : "implicit val"}, {"label" : "catsStdShowForFloat", "tail" : ": Show[Float]", "member" : "cats.instances.FloatInstances.catsStdShowForFloat", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#catsStdShowForFloat:cats.Show[Float]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForFloat", "tail" : ": CommutativeGroup[Float]", "member" : "cats.kernel.instances.FloatInstances.catsKernelStdGroupForFloat", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#catsKernelStdGroupForFloat:cats.kernel.CommutativeGroup[Float]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForFloat", "tail" : ": Order[Float]", "member" : "cats.kernel.instances.FloatInstances.catsKernelStdOrderForFloat", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#catsKernelStdOrderForFloat:cats.kernel.Order[Float]", "kind" : "implicit val"}, {"label" : "catsStdShowForLong", "tail" : ": Show[Long]", "member" : "cats.instances.LongInstances.catsStdShowForLong", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#catsStdShowForLong:cats.Show[Long]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForLong", "tail" : ": CommutativeGroup[Long]", "member" : "cats.kernel.instances.LongInstances.catsKernelStdGroupForLong", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#catsKernelStdGroupForLong:cats.kernel.CommutativeGroup[Long]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForLong", "tail" : ": Order[Long]", "member" : "cats.kernel.instances.LongInstances.catsKernelStdOrderForLong", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#catsKernelStdOrderForLong:cats.kernel.Order[Long]", "kind" : "implicit val"}, {"label" : "catsStdShowForChar", "tail" : ": Show[Char]", "member" : "cats.instances.CharInstances.catsStdShowForChar", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#catsStdShowForChar:cats.Show[Char]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForChar", "tail" : ": CharOrder", "member" : "cats.kernel.instances.CharInstances.catsKernelStdOrderForChar", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#catsKernelStdOrderForChar:cats.kernel.instances.CharOrder", "kind" : "implicit val"}, {"label" : "catsStdShowForInt", "tail" : ": Show[Int]", "member" : "cats.instances.IntInstances.catsStdShowForInt", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#catsStdShowForInt:cats.Show[Int]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForInt", "tail" : ": CommutativeGroup[Int]", "member" : "cats.kernel.instances.IntInstances.catsKernelStdGroupForInt", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#catsKernelStdGroupForInt:cats.kernel.CommutativeGroup[Int]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForInt", "tail" : ": Order[Int]", "member" : "cats.kernel.instances.IntInstances.catsKernelStdOrderForInt", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#catsKernelStdOrderForInt:cats.kernel.Order[Int]", "kind" : "implicit val"}, {"label" : "catsStdShowForString", "tail" : ": Show[String]", "member" : "cats.instances.StringInstances.catsStdShowForString", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#catsStdShowForString:cats.Show[String]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForString", "tail" : ": Monoid[String]", "member" : "cats.kernel.instances.StringInstances.catsKernelStdMonoidForString", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#catsKernelStdMonoidForString:cats.kernel.Monoid[String]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForString", "tail" : ": Order[String]", "member" : "cats.kernel.instances.StringInstances.catsKernelStdOrderForString", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#catsKernelStdOrderForString:cats.kernel.Order[String]", "kind" : "implicit val"}, {"label" : "session_json_values", "tail" : "(k1: String, k2: String): JsonValuesStepBuilder", "member" : "com.github.agourlay.cornichon.json.JsonDsl.session_json_values", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#session_json_values(k1:String,k2:String):com.github.agourlay.cornichon.json.JsonSteps.JsonValuesStepBuilder", "kind" : "def"}, {"label" : "show_key_as_json", "tail" : "(key: String, indice: Option[Int]): DebugStep", "member" : "com.github.agourlay.cornichon.json.JsonDsl.show_key_as_json", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#show_key_as_json(key:String,indice:Option[Int]):com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "root", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.JsonDsl.root", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#root:String", "kind" : "val"}, {"label" : "WithHeaders", "tail" : "(headers: (String, String)*): BodyElementCollector[Step, Seq[Step]]", "member" : "com.github.agourlay.cornichon.http.HttpDsl.WithHeaders", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#WithHeaders(headers:(String,String)*):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,Seq[com.github.agourlay.cornichon.core.Step]]", "kind" : "def"}, {"label" : "WithBasicAuth", "tail" : "(userName: String, password: String): BodyElementCollector[Step, Seq[Step]]", "member" : "com.github.agourlay.cornichon.http.HttpDsl.WithBasicAuth", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#WithBasicAuth(userName:String,password:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,Seq[com.github.agourlay.cornichon.core.Step]]", "kind" : "def"}, {"label" : "show_with_headers", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_with_headers", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#show_with_headers:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_last_headers", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_last_headers", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#show_last_headers:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_last_body_json", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_last_body_json", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#show_last_body_json:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_last_body", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_last_body", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#show_last_body:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_last_status", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_last_status", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#show_last_status:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_last_response_json", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_last_response_json", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#show_last_response_json:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_last_response", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_last_response", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#show_last_response:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "save_header_value", "tail" : "(args: (String, String)*): EffectStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.save_header_value", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#save_header_value(args:(String,String)*):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "save_body_path", "tail" : "(args: (String, String)*): EffectStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.save_body_path", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#save_body_path(args:(String,String)*):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "save_body", "tail" : "(target: String): EffectStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.save_body", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#save_body(target:String):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "body", "tail" : "(): JsonStepBuilder", "member" : "com.github.agourlay.cornichon.http.HttpDsl.body", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#body:com.github.agourlay.cornichon.json.JsonSteps.JsonStepBuilder", "kind" : "def"}, {"label" : "headers", "tail" : "(): HeadersStepBuilder", "member" : "com.github.agourlay.cornichon.http.HttpDsl.headers", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#headers:com.github.agourlay.cornichon.http.steps.HeadersSteps.HeadersStepBuilder", "kind" : "def"}, {"label" : "status", "tail" : "(): StatusStepBuilder.type", "member" : "com.github.agourlay.cornichon.http.HttpDsl.status", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#status:com.github.agourlay.cornichon.http.steps.StatusSteps.StatusStepBuilder.type", "kind" : "def"}, {"label" : "open_sse", "tail" : "(url: String, takeWithin: FiniteDuration): HttpStreamedRequest", "member" : "com.github.agourlay.cornichon.http.HttpDsl.open_sse", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#open_sse(url:String,takeWithin:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.http.HttpStreamedRequest", "kind" : "def"}, {"label" : "query_gql", "tail" : "(url: String): QueryGQL", "member" : "com.github.agourlay.cornichon.http.HttpDsl.query_gql", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#query_gql(url:String):com.github.agourlay.cornichon.http.QueryGQL", "kind" : "def"}, {"label" : "queryGqlToHttpRequest", "tail" : "(queryGQL: QueryGQL): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpDsl.queryGqlToHttpRequest", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#queryGqlToHttpRequest(queryGQL:com.github.agourlay.cornichon.http.QueryGQL):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "implicit def"}, {"label" : "queryGqlToStep", "tail" : "(queryGQL: QueryGQL): EffectStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.queryGqlToStep", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#queryGqlToStep(queryGQL:com.github.agourlay.cornichon.http.QueryGQL):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "implicit def"}, {"label" : "httpStreamedRequestToStep", "tail" : "(request: HttpStreamedRequest): EffectStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.httpStreamedRequestToStep", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#httpStreamedRequestToStep(request:com.github.agourlay.cornichon.http.HttpStreamedRequest):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "implicit def"}, {"label" : "httpRequestToStep", "tail" : "(request: HttpRequest[A])(arg0: Show[A], arg1: Resolvable[A], arg2: Encoder[A]): EffectStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.httpRequestToStep", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#httpRequestToStep[A](request:com.github.agourlay.cornichon.http.HttpRequest[A])(implicitevidence$1:cats.Show[A],implicitevidence$2:com.github.agourlay.cornichon.resolver.Resolvable[A],implicitevidence$3:io.circe.Encoder[A]):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "implicit def"}, {"label" : "http", "tail" : ": HttpService", "member" : "com.github.agourlay.cornichon.http.HttpDsl.http", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#http:com.github.agourlay.cornichon.http.HttpService", "kind" : "lazy val"}, {"label" : "httpServiceByURL", "tail" : "(baseUrl: String, timeout: FiniteDuration): HttpService", "member" : "com.github.agourlay.cornichon.http.HttpDsl.httpServiceByURL", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#httpServiceByURL(baseUrl:String,timeout:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.http.HttpService", "kind" : "def"}, {"label" : "baseUrl", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.HttpDsl.baseUrl", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#baseUrl:String", "kind" : "lazy val"}, {"label" : "requestTimeout", "tail" : ": FiniteDuration", "member" : "com.github.agourlay.cornichon.http.HttpDsl.requestTimeout", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#requestTimeout:scala.concurrent.duration.FiniteDuration", "kind" : "lazy val"}, {"label" : "patch", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.patch", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#patch(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "put", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.put", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#put(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "post", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.post", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#post(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "delete", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.delete", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#delete(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "options", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.options", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#options(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "head", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.head", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#head(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "get", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.get", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#get(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "removeFromWithHeaders", "tail" : "(name: String)(s: Session): Either[CornichonError, Session]", "member" : "com.github.agourlay.cornichon.http.HttpDslOps.removeFromWithHeaders", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#removeFromWithHeaders(name:String)(s:com.github.agourlay.cornichon.core.Session):Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Session]", "kind" : "def"}, {"label" : "addToWithHeaders", "tail" : "(name: String, value: String)(s: Session): Either[CornichonError, Session]", "member" : "com.github.agourlay.cornichon.http.HttpDslOps.addToWithHeaders", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#addToWithHeaders(name:String,value:String)(s:com.github.agourlay.cornichon.core.Session):Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Session]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "feature", "tail" : "(): FeatureDef", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.feature", "link" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html#feature:com.github.agourlay.cornichon.core.FeatureDef", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/github\/agourlay\/cornichon\/experimental\/CornichonFeature.html", "kind" : "trait"}], "com.github.agourlay.cornichon.steps.regular" : [{"name" : "com.github.agourlay.cornichon.steps.regular.DebugStep", "shortDescription" : "", "members_case class" : [{"label" : "onSuccess", "tail" : "(result: String, initialRunState: RunState, executionTime: Duration): (Some[DebugLogInstruction], None.type)", "member" : "com.github.agourlay.cornichon.steps.regular.DebugStep.onSuccess", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/DebugStep.html#onSuccess(result:String,initialRunState:com.github.agourlay.cornichon.core.RunState,executionTime:scala.concurrent.duration.Duration):(Some[com.github.agourlay.cornichon.core.DebugLogInstruction],None.type)", "kind" : "def"}, {"label" : "onError", "tail" : "(errors: NonEmptyList[CornichonError], initialRunState: RunState): (Vector[FailureLogInstruction], FailedStep)", "member" : "com.github.agourlay.cornichon.steps.regular.DebugStep.onError", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/DebugStep.html#onError(errors:cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError],initialRunState:com.github.agourlay.cornichon.core.RunState):(Vector[com.github.agourlay.cornichon.core.FailureLogInstruction],com.github.agourlay.cornichon.core.FailedStep)", "kind" : "def"}, {"label" : "run", "tail" : "(initialRunState: RunState): Task[Either[NonEmptyList[CornichonError], String]]", "member" : "com.github.agourlay.cornichon.steps.regular.DebugStep.run", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/DebugStep.html#run(initialRunState:com.github.agourlay.cornichon.core.RunState):monix.eval.Task[Either[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError],String]]", "kind" : "def"}, {"label" : "setTitle", "tail" : "(newTitle: String): DebugStep", "member" : "com.github.agourlay.cornichon.steps.regular.DebugStep.setTitle", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/DebugStep.html#setTitle(newTitle:String):com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.steps.regular.DebugStep#<init>", "error" : "unsupported entity"}, {"label" : "title", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.regular.DebugStep.title", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/DebugStep.html#title:String", "kind" : "val"}, {"label" : "message", "tail" : ": (Session) â‡’ Either[CornichonError, String]", "member" : "com.github.agourlay.cornichon.steps.regular.DebugStep.message", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/DebugStep.html#message:com.github.agourlay.cornichon.core.Session=>Either[com.github.agourlay.cornichon.core.CornichonError,String]", "kind" : "val"}, {"label" : "run", "tail" : "(engine: Engine)(initialRunState: RunState): Task[(RunState, Either[FailedStep, Done])]", "member" : "com.github.agourlay.cornichon.core.ValueStep.run", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/DebugStep.html#run(engine:com.github.agourlay.cornichon.core.Engine)(initialRunState:com.github.agourlay.cornichon.core.RunState):monix.eval.Task[(com.github.agourlay.cornichon.core.RunState,Either[com.github.agourlay.cornichon.core.FailedStep,com.github.agourlay.cornichon.core.Done])]", "kind" : "def"}, {"label" : "chain", "tail" : "(others: (Session) â‡’ List[Step]): Step", "member" : "com.github.agourlay.cornichon.core.Step.chain", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/DebugStep.html#chain(others:com.github.agourlay.cornichon.core.Session=>List[com.github.agourlay.cornichon.core.Step]):com.github.agourlay.cornichon.core.Step", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/DebugStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/DebugStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/DebugStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/DebugStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/DebugStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/DebugStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/DebugStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/DebugStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/DebugStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/DebugStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/DebugStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/DebugStep.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/DebugStep.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/DebugStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/DebugStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/DebugStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/DebugStep.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.regular.EffectStep", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep$.html", "members_object" : [{"label" : "fromAsync", "tail" : "(title: String, effect: (Session) â‡’ Future[Session], show: Boolean)(ec: ExecutionContext): EffectStep", "member" : "com.github.agourlay.cornichon.steps.regular.EffectStep.fromAsync", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep$.html#fromAsync(title:String,effect:com.github.agourlay.cornichon.core.Session=>scala.concurrent.Future[com.github.agourlay.cornichon.core.Session],show:Boolean)(implicitec:scala.concurrent.ExecutionContext):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "fromSyncE", "tail" : "(title: String, effect: (Session) â‡’ Either[CornichonError, Session], show: Boolean): EffectStep", "member" : "com.github.agourlay.cornichon.steps.regular.EffectStep.fromSyncE", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep$.html#fromSyncE(title:String,effect:com.github.agourlay.cornichon.core.Session=>Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Session],show:Boolean):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "fromSync", "tail" : "(title: String, effect: (Session) â‡’ Session, show: Boolean): EffectStep", "member" : "com.github.agourlay.cornichon.steps.regular.EffectStep.fromSync", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep$.html#fromSync(title:String,effect:com.github.agourlay.cornichon.core.Session=>com.github.agourlay.cornichon.core.Session,show:Boolean):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "fromEitherT", "tail" : "(title: String, effect: (Session) â‡’ EitherT[Future, CornichonError, Session], show: Boolean): EffectStep", "member" : "com.github.agourlay.cornichon.steps.regular.EffectStep.fromEitherT", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep$.html#fromEitherT(title:String,effect:com.github.agourlay.cornichon.core.Session=>cats.data.EitherT[scala.concurrent.Future,com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Session],show:Boolean):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "chainEffects", "tail" : "(effectsStep: Seq[EffectStep])(ec: ExecutionContext): EffectStep", "member" : "com.github.agourlay.cornichon.steps.regular.EffectStep.chainEffects", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep$.html#chainEffects(effectsStep:Seq[com.github.agourlay.cornichon.steps.regular.EffectStep])(implicitec:scala.concurrent.ExecutionContext):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "chainSync", "tail" : "(chainedEffect: (Session) â‡’ Session)(ec: ExecutionContext): EffectStep", "member" : "com.github.agourlay.cornichon.steps.regular.EffectStep.chainSync", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#chainSync(chainedEffect:com.github.agourlay.cornichon.core.Session=>com.github.agourlay.cornichon.core.Session)(implicitec:scala.concurrent.ExecutionContext):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "chainSyncE", "tail" : "(chainedEffect: (Session) â‡’ Either[CornichonError, Session])(ec: ExecutionContext): EffectStep", "member" : "com.github.agourlay.cornichon.steps.regular.EffectStep.chainSyncE", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#chainSyncE(chainedEffect:com.github.agourlay.cornichon.core.Session=>Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Session])(implicitec:scala.concurrent.ExecutionContext):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "chain", "tail" : "(chainedEffect: (Session) â‡’ Future[Either[CornichonError, Session]])(ec: ExecutionContext): EffectStep", "member" : "com.github.agourlay.cornichon.steps.regular.EffectStep.chain", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#chain(chainedEffect:com.github.agourlay.cornichon.core.Session=>scala.concurrent.Future[Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Session]])(implicitec:scala.concurrent.ExecutionContext):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "chain", "tail" : "(others: List[EffectStep]): Step", "member" : "com.github.agourlay.cornichon.steps.regular.EffectStep.chain", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#chain(others:List[com.github.agourlay.cornichon.steps.regular.EffectStep]):com.github.agourlay.cornichon.core.Step", "kind" : "def"}, {"label" : "chain", "tail" : "(secondEffect: EffectStep)(ec: ExecutionContext): EffectStep", "member" : "com.github.agourlay.cornichon.steps.regular.EffectStep.chain", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#chain(secondEffect:com.github.agourlay.cornichon.steps.regular.EffectStep)(implicitec:scala.concurrent.ExecutionContext):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "onSuccess", "tail" : "(result: Session, initialRunState: RunState, executionTime: Duration): (Option[SuccessLogInstruction], Some[Session])", "member" : "com.github.agourlay.cornichon.steps.regular.EffectStep.onSuccess", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#onSuccess(result:com.github.agourlay.cornichon.core.Session,initialRunState:com.github.agourlay.cornichon.core.RunState,executionTime:scala.concurrent.duration.Duration):(Option[com.github.agourlay.cornichon.core.SuccessLogInstruction],Some[com.github.agourlay.cornichon.core.Session])", "kind" : "def"}, {"label" : "onError", "tail" : "(errors: NonEmptyList[CornichonError], initialRunState: RunState): (Vector[LogInstruction], FailedStep)", "member" : "com.github.agourlay.cornichon.steps.regular.EffectStep.onError", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#onError(errors:cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError],initialRunState:com.github.agourlay.cornichon.core.RunState):(Vector[com.github.agourlay.cornichon.core.LogInstruction],com.github.agourlay.cornichon.core.FailedStep)", "kind" : "def"}, {"label" : "run", "tail" : "(initialRunState: RunState): Task[Either[NonEmptyList[CornichonError], Session]]", "member" : "com.github.agourlay.cornichon.steps.regular.EffectStep.run", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#run(initialRunState:com.github.agourlay.cornichon.core.RunState):monix.eval.Task[Either[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError],com.github.agourlay.cornichon.core.Session]]", "kind" : "def"}, {"label" : "setTitle", "tail" : "(newTitle: String): EffectStep", "member" : "com.github.agourlay.cornichon.steps.regular.EffectStep.setTitle", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#setTitle(newTitle:String):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.steps.regular.EffectStep#<init>", "error" : "unsupported entity"}, {"label" : "show", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.steps.regular.EffectStep.show", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#show:Boolean", "kind" : "val"}, {"label" : "effect", "tail" : ": (Session) â‡’ Future[Either[CornichonError, Session]]", "member" : "com.github.agourlay.cornichon.steps.regular.EffectStep.effect", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#effect:com.github.agourlay.cornichon.core.Session=>scala.concurrent.Future[Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Session]]", "kind" : "val"}, {"label" : "title", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.regular.EffectStep.title", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#title:String", "kind" : "val"}, {"label" : "run", "tail" : "(engine: Engine)(initialRunState: RunState): Task[(RunState, Either[FailedStep, Done])]", "member" : "com.github.agourlay.cornichon.core.ValueStep.run", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#run(engine:com.github.agourlay.cornichon.core.Engine)(initialRunState:com.github.agourlay.cornichon.core.RunState):monix.eval.Task[(com.github.agourlay.cornichon.core.RunState,Either[com.github.agourlay.cornichon.core.FailedStep,com.github.agourlay.cornichon.core.Done])]", "kind" : "def"}, {"label" : "chain", "tail" : "(others: (Session) â‡’ List[Step]): Step", "member" : "com.github.agourlay.cornichon.core.Step.chain", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#chain(others:com.github.agourlay.cornichon.core.Session=>List[com.github.agourlay.cornichon.core.Step]):com.github.agourlay.cornichon.core.Step", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/EffectStep.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.regular.ResourceStep", "shortDescription" : "", "members_case class" : [{"label" : "onNestedSuccess", "tail" : "(resultRunState: RunState, initialRunState: RunState, executionTime: Duration): RunState", "member" : "com.github.agourlay.cornichon.steps.regular.ResourceStep.onNestedSuccess", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html#onNestedSuccess(resultRunState:com.github.agourlay.cornichon.core.RunState,initialRunState:com.github.agourlay.cornichon.core.RunState,executionTime:scala.concurrent.duration.Duration):com.github.agourlay.cornichon.core.RunState", "kind" : "def"}, {"label" : "onNestedError", "tail" : "(failedStep: FailedStep, resultRunState: RunState, initialRunState: RunState, executionTime: Duration): (RunState, FailedStep)", "member" : "com.github.agourlay.cornichon.steps.regular.ResourceStep.onNestedError", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html#onNestedError(failedStep:com.github.agourlay.cornichon.core.FailedStep,resultRunState:com.github.agourlay.cornichon.core.RunState,initialRunState:com.github.agourlay.cornichon.core.RunState,executionTime:scala.concurrent.duration.Duration):(com.github.agourlay.cornichon.core.RunState,com.github.agourlay.cornichon.core.FailedStep)", "kind" : "def"}, {"label" : "indentLog", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.steps.regular.ResourceStep.indentLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html#indentLog:Boolean", "kind" : "val"}, {"label" : "nestedToRun", "tail" : ": List[AttachAsStep]", "member" : "com.github.agourlay.cornichon.steps.regular.ResourceStep.nestedToRun", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html#nestedToRun:List[com.github.agourlay.cornichon.steps.wrapped.AttachAsStep]", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.steps.regular.ResourceStep#<init>", "error" : "unsupported entity"}, {"label" : "release", "tail" : ": Step", "member" : "com.github.agourlay.cornichon.steps.regular.ResourceStep.release", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html#release:com.github.agourlay.cornichon.core.Step", "kind" : "val"}, {"label" : "acquire", "tail" : ": Step", "member" : "com.github.agourlay.cornichon.steps.regular.ResourceStep.acquire", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html#acquire:com.github.agourlay.cornichon.core.Step", "kind" : "val"}, {"label" : "title", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.regular.ResourceStep.title", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html#title:String", "kind" : "val"}, {"label" : "successTitleLog", "tail" : "(depth: Int): SuccessLogInstruction", "member" : "com.github.agourlay.cornichon.core.SimpleWrapperStep.successTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html#successTitleLog(depth:Int):com.github.agourlay.cornichon.core.SuccessLogInstruction", "kind" : "def"}, {"label" : "failedTitleLog", "tail" : "(depth: Int): FailureLogInstruction", "member" : "com.github.agourlay.cornichon.core.SimpleWrapperStep.failedTitleLog", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html#failedTitleLog(depth:Int):com.github.agourlay.cornichon.core.FailureLogInstruction", "kind" : "def"}, {"label" : "setTitle", "tail" : "(newTitle: String): SimpleWrapperStep", "member" : "com.github.agourlay.cornichon.core.SimpleWrapperStep.setTitle", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html#setTitle(newTitle:String):com.github.agourlay.cornichon.core.SimpleWrapperStep", "kind" : "def"}, {"label" : "run", "tail" : "(engine: Engine)(initialRunState: RunState): Task[(RunState, Either[FailedStep, Done])]", "member" : "com.github.agourlay.cornichon.core.SimpleWrapperStep.run", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html#run(engine:com.github.agourlay.cornichon.core.Engine)(initialRunState:com.github.agourlay.cornichon.core.RunState):monix.eval.Task[(com.github.agourlay.cornichon.core.RunState,Either[com.github.agourlay.cornichon.core.FailedStep,com.github.agourlay.cornichon.core.Done])]", "kind" : "def"}, {"label" : "chain", "tail" : "(others: (Session) â‡’ List[Step]): Step", "member" : "com.github.agourlay.cornichon.core.Step.chain", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html#chain(others:com.github.agourlay.cornichon.core.Session=>List[com.github.agourlay.cornichon.core.Step]):com.github.agourlay.cornichon.core.Step", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/ResourceStep.html", "kind" : "case class"}], "com.github.agourlay.cornichon.feature" : [{"name" : "com.github.agourlay.cornichon.feature.BaseFeature", "members_trait" : [{"label" : "And", "tail" : "", "member" : "com.github.agourlay.cornichon.dsl.Dsl.And", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#And", "kind" : "object"}, {"label" : "Then", "tail" : "", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Then", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#Then", "kind" : "object"}, {"label" : "Given", "tail" : "", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Given", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#Given", "kind" : "object"}, {"label" : "When", "tail" : "", "member" : "com.github.agourlay.cornichon.dsl.Dsl.When", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#When", "kind" : "object"}, {"label" : "Starters", "tail" : "", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Starters", "link" : "com\/github\/agourlay\/cornichon\/dsl\/Dsl.html#StartersextendsDynamic", "kind" : "sealed trait"}, {"label" : "afterEachScenario", "tail" : "(step: Step): Unit", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.afterEachScenario", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#afterEachScenario(step:com.github.agourlay.cornichon.core.Step):Unit", "kind" : "def"}, {"label" : "beforeEachScenario", "tail" : "(step: Step): Unit", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.beforeEachScenario", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#beforeEachScenario(step:com.github.agourlay.cornichon.core.Step):Unit", "kind" : "def"}, {"label" : "afterFeature", "tail" : "(after: â‡’ Unit): Unit", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.afterFeature", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#afterFeature(after:=>Unit):Unit", "kind" : "def"}, {"label" : "beforeFeature", "tail" : "(before: â‡’ Unit): Unit", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.beforeFeature", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#beforeFeature(before:=>Unit):Unit", "kind" : "def"}, {"label" : "registerMatcher", "tail" : "(): List[Matcher]", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.registerMatcher", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#registerMatcher:List[com.github.agourlay.cornichon.matchers.Matcher]", "kind" : "def"}, {"label" : "registerExtractors", "tail" : "(): Map[String, Mapper]", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.registerExtractors", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#registerExtractors:Map[String,com.github.agourlay.cornichon.resolver.Mapper]", "kind" : "def"}, {"label" : "runScenario", "tail" : "(s: Scenario): Future[ScenarioReport]", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.runScenario", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#runScenario(s:com.github.agourlay.cornichon.core.Scenario):scala.concurrent.Future[com.github.agourlay.cornichon.core.ScenarioReport]", "kind" : "def"}, {"label" : "matcherResolver", "tail" : ": MatcherResolver", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.matcherResolver", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#matcherResolver:com.github.agourlay.cornichon.matchers.MatcherResolver", "kind" : "lazy val"}, {"label" : "placeholderResolver", "tail" : ": PlaceholderResolver", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.placeholderResolver", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#placeholderResolver:com.github.agourlay.cornichon.resolver.PlaceholderResolver", "kind" : "lazy val"}, {"label" : "executeScenariosInParallel", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.executeScenariosInParallel", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#executeScenariosInParallel:Boolean", "kind" : "lazy val"}, {"label" : "scheduler", "tail" : ": Scheduler", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.scheduler", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#scheduler:monix.execution.Scheduler", "kind" : "implicit lazy val"}, {"label" : "afterEachScenario", "tail" : ": List[Step]", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.afterEachScenario", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#afterEachScenario:List[com.github.agourlay.cornichon.core.Step]", "kind" : "val"}, {"label" : "beforeEachScenario", "tail" : ": List[Step]", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.beforeEachScenario", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#beforeEachScenario:List[com.github.agourlay.cornichon.core.Step]", "kind" : "val"}, {"label" : "print_step", "tail" : "(message: String): DebugStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.print_step", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#print_step(message:String):com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_session", "tail" : "(key: String, indice: Option[Int], transform: (String) â‡’ String): DebugStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.show_session", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#show_session(key:String,indice:Option[Int],transform:String=>String):com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_session", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.show_session", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#show_session:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "session_value", "tail" : "(key: String): SessionStepBuilder", "member" : "com.github.agourlay.cornichon.dsl.Dsl.session_value", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#session_value(key:String):com.github.agourlay.cornichon.dsl.SessionSteps.SessionStepBuilder", "kind" : "def"}, {"label" : "transform_session", "tail" : "(key: String)(map: (String) â‡’ String): EffectStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.transform_session", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#transform_session(key:String)(map:String=>String):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "rollback", "tail" : "(key: String): EffectStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.rollback", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#rollback(key:String):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "remove", "tail" : "(key: String): EffectStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.remove", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#remove(key:String):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "save", "tail" : "(input: (String, String)): EffectStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.save", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#save(input:(String,String)):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "wait", "tail" : "(duration: FiniteDuration): EffectStep", "member" : "com.github.agourlay.cornichon.dsl.Dsl.wait", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#wait(duration:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "WithDataInputs", "tail" : "(where: String): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.WithDataInputs", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#WithDataInputs(where:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "LogDuration", "tail" : "(label: String): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.LogDuration", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#LogDuration(label:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "Within", "tail" : "(maxDuration: FiniteDuration): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Within", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#Within(maxDuration:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "Concurrently", "tail" : "(factor: Int, maxTime: FiniteDuration): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Concurrently", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#Concurrently(factor:Int,maxTime:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "Eventually", "tail" : "(maxDuration: FiniteDuration, interval: FiniteDuration): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Eventually", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#Eventually(maxDuration:scala.concurrent.duration.FiniteDuration,interval:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "RepeatDuring", "tail" : "(duration: FiniteDuration): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.RepeatDuring", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#RepeatDuring(duration:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "RetryMax", "tail" : "(limit: Int): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.RetryMax", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#RetryMax(limit:Int):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "RepeatFrom", "tail" : "(elements: Iterable[ContainerType[A, Show]])(indice: String): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.RepeatFrom", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#RepeatFrom[A](elements:Iterable[com.github.agourlay.cornichon.dsl.ContainerType[A,cats.Show]])(indice:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "RepeatWith", "tail" : "(elements: ContainerType[Any, Show]*)(indice: String): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.RepeatWith", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#RepeatWith(elements:com.github.agourlay.cornichon.dsl.ContainerType[Any,cats.Show]*)(indice:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "Repeat", "tail" : "(times: Int, indice: String): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Repeat", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#Repeat(times:Int,indice:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "Repeat", "tail" : "(times: Int): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Repeat", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#Repeat(times:Int):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "AttachAs", "tail" : "(title: String): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.AttachAs", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#AttachAs(title:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "Attach", "tail" : "(): BodyElementCollector[Step, Step]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Attach", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#Attach:com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"label" : "scenarioBuilder", "tail" : "(s: ScenarioBuilder): BodyElementCollector[Step, Scenario]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.scenarioBuilder", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#scenarioBuilder(s:Dsl.this.ScenarioBuilder):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,com.github.agourlay.cornichon.core.Scenario]", "kind" : "implicit def"}, {"label" : "Scenario", "tail" : "(name: String): ScenarioBuilder", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Scenario", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#Scenario(name:String):Dsl.this.ScenarioBuilder", "kind" : "def"}, {"label" : "featureBuilder", "tail" : "(f: FeatureBuilder): BodyElementCollector[Scenario, FeatureDef]", "member" : "com.github.agourlay.cornichon.dsl.Dsl.featureBuilder", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#featureBuilder(f:Dsl.this.FeatureBuilder):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Scenario,com.github.agourlay.cornichon.core.FeatureDef]", "kind" : "implicit def"}, {"label" : "Feature", "tail" : "(name: String): FeatureBuilder", "member" : "com.github.agourlay.cornichon.dsl.Dsl.Feature", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#Feature(name:String):Dsl.this.FeatureBuilder", "kind" : "def"}, {"label" : "catsStdShowForBoolean", "tail" : ": Show[Boolean]", "member" : "cats.instances.BooleanInstances.catsStdShowForBoolean", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#catsStdShowForBoolean:cats.Show[Boolean]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForBoolean", "tail" : ": Order[Boolean]", "member" : "cats.kernel.instances.BooleanInstances.catsKernelStdOrderForBoolean", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#catsKernelStdOrderForBoolean:cats.kernel.Order[Boolean]", "kind" : "implicit val"}, {"label" : "catsStdShowForDouble", "tail" : ": Show[Double]", "member" : "cats.instances.DoubleInstances.catsStdShowForDouble", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#catsStdShowForDouble:cats.Show[Double]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForDouble", "tail" : ": CommutativeGroup[Double]", "member" : "cats.kernel.instances.DoubleInstances.catsKernelStdGroupForDouble", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#catsKernelStdGroupForDouble:cats.kernel.CommutativeGroup[Double]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForDouble", "tail" : ": Order[Double]", "member" : "cats.kernel.instances.DoubleInstances.catsKernelStdOrderForDouble", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#catsKernelStdOrderForDouble:cats.kernel.Order[Double]", "kind" : "implicit val"}, {"label" : "catsStdShowForFloat", "tail" : ": Show[Float]", "member" : "cats.instances.FloatInstances.catsStdShowForFloat", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#catsStdShowForFloat:cats.Show[Float]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForFloat", "tail" : ": CommutativeGroup[Float]", "member" : "cats.kernel.instances.FloatInstances.catsKernelStdGroupForFloat", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#catsKernelStdGroupForFloat:cats.kernel.CommutativeGroup[Float]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForFloat", "tail" : ": Order[Float]", "member" : "cats.kernel.instances.FloatInstances.catsKernelStdOrderForFloat", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#catsKernelStdOrderForFloat:cats.kernel.Order[Float]", "kind" : "implicit val"}, {"label" : "catsStdShowForLong", "tail" : ": Show[Long]", "member" : "cats.instances.LongInstances.catsStdShowForLong", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#catsStdShowForLong:cats.Show[Long]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForLong", "tail" : ": CommutativeGroup[Long]", "member" : "cats.kernel.instances.LongInstances.catsKernelStdGroupForLong", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#catsKernelStdGroupForLong:cats.kernel.CommutativeGroup[Long]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForLong", "tail" : ": Order[Long]", "member" : "cats.kernel.instances.LongInstances.catsKernelStdOrderForLong", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#catsKernelStdOrderForLong:cats.kernel.Order[Long]", "kind" : "implicit val"}, {"label" : "catsStdShowForChar", "tail" : ": Show[Char]", "member" : "cats.instances.CharInstances.catsStdShowForChar", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#catsStdShowForChar:cats.Show[Char]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForChar", "tail" : ": CharOrder", "member" : "cats.kernel.instances.CharInstances.catsKernelStdOrderForChar", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#catsKernelStdOrderForChar:cats.kernel.instances.CharOrder", "kind" : "implicit val"}, {"label" : "catsStdShowForInt", "tail" : ": Show[Int]", "member" : "cats.instances.IntInstances.catsStdShowForInt", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#catsStdShowForInt:cats.Show[Int]", "kind" : "implicit val"}, {"label" : "catsKernelStdGroupForInt", "tail" : ": CommutativeGroup[Int]", "member" : "cats.kernel.instances.IntInstances.catsKernelStdGroupForInt", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#catsKernelStdGroupForInt:cats.kernel.CommutativeGroup[Int]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForInt", "tail" : ": Order[Int]", "member" : "cats.kernel.instances.IntInstances.catsKernelStdOrderForInt", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#catsKernelStdOrderForInt:cats.kernel.Order[Int]", "kind" : "implicit val"}, {"label" : "catsStdShowForString", "tail" : ": Show[String]", "member" : "cats.instances.StringInstances.catsStdShowForString", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#catsStdShowForString:cats.Show[String]", "kind" : "implicit val"}, {"label" : "catsKernelStdMonoidForString", "tail" : ": Monoid[String]", "member" : "cats.kernel.instances.StringInstances.catsKernelStdMonoidForString", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#catsKernelStdMonoidForString:cats.kernel.Monoid[String]", "kind" : "implicit val"}, {"label" : "catsKernelStdOrderForString", "tail" : ": Order[String]", "member" : "cats.kernel.instances.StringInstances.catsKernelStdOrderForString", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#catsKernelStdOrderForString:cats.kernel.Order[String]", "kind" : "implicit val"}, {"label" : "session_json_values", "tail" : "(k1: String, k2: String): JsonValuesStepBuilder", "member" : "com.github.agourlay.cornichon.json.JsonDsl.session_json_values", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#session_json_values(k1:String,k2:String):com.github.agourlay.cornichon.json.JsonSteps.JsonValuesStepBuilder", "kind" : "def"}, {"label" : "show_key_as_json", "tail" : "(key: String, indice: Option[Int]): DebugStep", "member" : "com.github.agourlay.cornichon.json.JsonDsl.show_key_as_json", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#show_key_as_json(key:String,indice:Option[Int]):com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "root", "tail" : ": String", "member" : "com.github.agourlay.cornichon.json.JsonDsl.root", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#root:String", "kind" : "val"}, {"label" : "WithHeaders", "tail" : "(headers: (String, String)*): BodyElementCollector[Step, Seq[Step]]", "member" : "com.github.agourlay.cornichon.http.HttpDsl.WithHeaders", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#WithHeaders(headers:(String,String)*):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,Seq[com.github.agourlay.cornichon.core.Step]]", "kind" : "def"}, {"label" : "WithBasicAuth", "tail" : "(userName: String, password: String): BodyElementCollector[Step, Seq[Step]]", "member" : "com.github.agourlay.cornichon.http.HttpDsl.WithBasicAuth", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#WithBasicAuth(userName:String,password:String):com.github.agourlay.cornichon.dsl.BodyElementCollector[com.github.agourlay.cornichon.core.Step,Seq[com.github.agourlay.cornichon.core.Step]]", "kind" : "def"}, {"label" : "show_with_headers", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_with_headers", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#show_with_headers:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_last_headers", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_last_headers", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#show_last_headers:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_last_body_json", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_last_body_json", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#show_last_body_json:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_last_body", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_last_body", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#show_last_body:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_last_status", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_last_status", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#show_last_status:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_last_response_json", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_last_response_json", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#show_last_response_json:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "show_last_response", "tail" : "(): DebugStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.show_last_response", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#show_last_response:com.github.agourlay.cornichon.steps.regular.DebugStep", "kind" : "def"}, {"label" : "save_header_value", "tail" : "(args: (String, String)*): EffectStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.save_header_value", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#save_header_value(args:(String,String)*):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "save_body_path", "tail" : "(args: (String, String)*): EffectStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.save_body_path", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#save_body_path(args:(String,String)*):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "save_body", "tail" : "(target: String): EffectStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.save_body", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#save_body(target:String):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "body", "tail" : "(): JsonStepBuilder", "member" : "com.github.agourlay.cornichon.http.HttpDsl.body", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#body:com.github.agourlay.cornichon.json.JsonSteps.JsonStepBuilder", "kind" : "def"}, {"label" : "headers", "tail" : "(): HeadersStepBuilder", "member" : "com.github.agourlay.cornichon.http.HttpDsl.headers", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#headers:com.github.agourlay.cornichon.http.steps.HeadersSteps.HeadersStepBuilder", "kind" : "def"}, {"label" : "status", "tail" : "(): StatusStepBuilder.type", "member" : "com.github.agourlay.cornichon.http.HttpDsl.status", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#status:com.github.agourlay.cornichon.http.steps.StatusSteps.StatusStepBuilder.type", "kind" : "def"}, {"label" : "open_sse", "tail" : "(url: String, takeWithin: FiniteDuration): HttpStreamedRequest", "member" : "com.github.agourlay.cornichon.http.HttpDsl.open_sse", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#open_sse(url:String,takeWithin:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.http.HttpStreamedRequest", "kind" : "def"}, {"label" : "query_gql", "tail" : "(url: String): QueryGQL", "member" : "com.github.agourlay.cornichon.http.HttpDsl.query_gql", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#query_gql(url:String):com.github.agourlay.cornichon.http.QueryGQL", "kind" : "def"}, {"label" : "queryGqlToHttpRequest", "tail" : "(queryGQL: QueryGQL): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpDsl.queryGqlToHttpRequest", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#queryGqlToHttpRequest(queryGQL:com.github.agourlay.cornichon.http.QueryGQL):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "implicit def"}, {"label" : "queryGqlToStep", "tail" : "(queryGQL: QueryGQL): EffectStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.queryGqlToStep", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#queryGqlToStep(queryGQL:com.github.agourlay.cornichon.http.QueryGQL):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "implicit def"}, {"label" : "httpStreamedRequestToStep", "tail" : "(request: HttpStreamedRequest): EffectStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.httpStreamedRequestToStep", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#httpStreamedRequestToStep(request:com.github.agourlay.cornichon.http.HttpStreamedRequest):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "implicit def"}, {"label" : "httpRequestToStep", "tail" : "(request: HttpRequest[A])(arg0: Show[A], arg1: Resolvable[A], arg2: Encoder[A]): EffectStep", "member" : "com.github.agourlay.cornichon.http.HttpDsl.httpRequestToStep", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#httpRequestToStep[A](request:com.github.agourlay.cornichon.http.HttpRequest[A])(implicitevidence$1:cats.Show[A],implicitevidence$2:com.github.agourlay.cornichon.resolver.Resolvable[A],implicitevidence$3:io.circe.Encoder[A]):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "implicit def"}, {"label" : "http", "tail" : ": HttpService", "member" : "com.github.agourlay.cornichon.http.HttpDsl.http", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#http:com.github.agourlay.cornichon.http.HttpService", "kind" : "lazy val"}, {"label" : "httpServiceByURL", "tail" : "(baseUrl: String, timeout: FiniteDuration): HttpService", "member" : "com.github.agourlay.cornichon.http.HttpDsl.httpServiceByURL", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#httpServiceByURL(baseUrl:String,timeout:scala.concurrent.duration.FiniteDuration):com.github.agourlay.cornichon.http.HttpService", "kind" : "def"}, {"label" : "baseUrl", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.HttpDsl.baseUrl", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#baseUrl:String", "kind" : "lazy val"}, {"label" : "requestTimeout", "tail" : ": FiniteDuration", "member" : "com.github.agourlay.cornichon.http.HttpDsl.requestTimeout", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#requestTimeout:scala.concurrent.duration.FiniteDuration", "kind" : "lazy val"}, {"label" : "patch", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.patch", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#patch(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "put", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.put", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#put(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "post", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.post", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#post(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "delete", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.delete", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#delete(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "options", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.options", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#options(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "head", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.head", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#head(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "get", "tail" : "(url: String): HttpRequest[String]", "member" : "com.github.agourlay.cornichon.http.HttpRequestsDsl.get", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#get(url:String):com.github.agourlay.cornichon.http.HttpRequest[String]", "kind" : "def"}, {"label" : "removeFromWithHeaders", "tail" : "(name: String)(s: Session): Either[CornichonError, Session]", "member" : "com.github.agourlay.cornichon.http.HttpDslOps.removeFromWithHeaders", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#removeFromWithHeaders(name:String)(s:com.github.agourlay.cornichon.core.Session):Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Session]", "kind" : "def"}, {"label" : "addToWithHeaders", "tail" : "(name: String, value: String)(s: Session): Either[CornichonError, Session]", "member" : "com.github.agourlay.cornichon.http.HttpDslOps.addToWithHeaders", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#addToWithHeaders(name:String,value:String)(s:com.github.agourlay.cornichon.core.Session):Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Session]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "feature", "tail" : "(): FeatureDef", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.feature", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html#feature:com.github.agourlay.cornichon.core.FeatureDef", "kind" : "abstract def"}], "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature$.html", "members_object" : [{"label" : "shutDownGlobalResources", "tail" : "(): Future[Done]", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.shutDownGlobalResources", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature$.html#shutDownGlobalResources():scala.concurrent.Future[com.github.agourlay.cornichon.core.Done]", "kind" : "def"}, {"label" : "globalScheduler", "tail" : ": Scheduler", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.globalScheduler", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature$.html#globalScheduler:monix.execution.Scheduler", "kind" : "lazy val"}, {"label" : "addShutdownHook", "tail" : "(h: () â‡’ Future[_]): Unit", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.addShutdownHook", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature$.html#addShutdownHook(h:()=>scala.concurrent.Future[_]):Unit", "kind" : "def"}, {"label" : "config", "tail" : ": Config", "member" : "com.github.agourlay.cornichon.feature.BaseFeature.config", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature$.html#config:com.github.agourlay.cornichon.core.Config", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/github\/agourlay\/cornichon\/feature\/BaseFeature.html", "kind" : "trait"}], "com.github.agourlay.cornichon.kafka" : [{"name" : "com.github.agourlay.cornichon.kafka.KafkaConfig", "shortDescription" : "", "members_case class" : [{"member" : "com.github.agourlay.cornichon.kafka.KafkaConfig#<init>", "error" : "unsupported entity"}, {"label" : "consumer", "tail" : ": KafkaConsumerConfig", "member" : "com.github.agourlay.cornichon.kafka.KafkaConfig.consumer", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConfig.html#consumer:com.github.agourlay.cornichon.kafka.KafkaConsumerConfig", "kind" : "val"}, {"label" : "producer", "tail" : ": KafkaProducerConfig", "member" : "com.github.agourlay.cornichon.kafka.KafkaConfig.producer", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConfig.html#producer:com.github.agourlay.cornichon.kafka.KafkaProducerConfig", "kind" : "val"}, {"label" : "bootstrapServers", "tail" : ": String", "member" : "com.github.agourlay.cornichon.kafka.KafkaConfig.bootstrapServers", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConfig.html#bootstrapServers:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConfig.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConfig.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConfig.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConfig.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConfig.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConfig.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConfig.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConfig.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConfig.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConfig.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConfig.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConfig.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConfig.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConfig.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConfig.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConfig.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConfig.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.kafka.KafkaConsumerConfig", "shortDescription" : "", "members_case class" : [{"member" : "com.github.agourlay.cornichon.kafka.KafkaConsumerConfig#<init>", "error" : "unsupported entity"}, {"label" : "groupId", "tail" : ": String", "member" : "com.github.agourlay.cornichon.kafka.KafkaConsumerConfig.groupId", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConsumerConfig.html#groupId:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConsumerConfig.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConsumerConfig.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConsumerConfig.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConsumerConfig.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConsumerConfig.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConsumerConfig.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConsumerConfig.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConsumerConfig.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConsumerConfig.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConsumerConfig.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConsumerConfig.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConsumerConfig.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConsumerConfig.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConsumerConfig.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConsumerConfig.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConsumerConfig.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaConsumerConfig.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.kafka.KafkaDsl", "members_trait" : [{"label" : "read_json_from_topic", "tail" : "(topic: String, amount: Int, targetKey: Option[String], timeout: Int): EffectStep", "member" : "com.github.agourlay.cornichon.kafka.KafkaDsl.read_json_from_topic", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl.html#read_json_from_topic(topic:String,amount:Int,targetKey:Option[String],timeout:Int):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "read_from_topic", "tail" : "(topic: String, amount: Int, targetKey: Option[String], timeout: Int): EffectStep", "member" : "com.github.agourlay.cornichon.kafka.KafkaDsl.read_from_topic", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl.html#read_from_topic(topic:String,amount:Int,targetKey:Option[String],timeout:Int):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "put_topic", "tail" : "(topic: String, key: String, message: String): EffectStep", "member" : "com.github.agourlay.cornichon.kafka.KafkaDsl.put_topic", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl.html#put_topic(topic:String,key:String,message:String):com.github.agourlay.cornichon.steps.regular.EffectStep", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl$.html", "members_object" : [{"label" : "buildConsumerRecordJsonProjection", "tail" : "(f: (String) â‡’ String)(record: ConsumerRecord[String, String]): String", "member" : "com.github.agourlay.cornichon.kafka.KafkaDsl.buildConsumerRecordJsonProjection", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl$.html#buildConsumerRecordJsonProjection(f:String=>String)(record:org.apache.kafka.clients.consumer.ConsumerRecord[String,String]):String", "kind" : "def"}, {"label" : "buildProducerRecord", "tail" : "(topic: String, key: String, message: String): ProducerRecord[String, String]", "member" : "com.github.agourlay.cornichon.kafka.KafkaDsl.buildProducerRecord", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl$.html#buildProducerRecord(topic:String,key:String,message:String):org.apache.kafka.clients.producer.ProducerRecord[String,String]", "kind" : "def"}, {"label" : "consumer", "tail" : ": KafkaConsumer[String, String]", "member" : "com.github.agourlay.cornichon.kafka.KafkaDsl.consumer", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl$.html#consumer:org.apache.kafka.clients.consumer.KafkaConsumer[String,String]", "kind" : "lazy val"}, {"label" : "producer", "tail" : ": KafkaProducer[String, String]", "member" : "com.github.agourlay.cornichon.kafka.KafkaDsl.producer", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl$.html#producer:org.apache.kafka.clients.producer.KafkaProducer[String,String]", "kind" : "lazy val"}, {"label" : "kafkaConfig", "tail" : ": KafkaConfig", "member" : "com.github.agourlay.cornichon.kafka.KafkaDsl.kafkaConfig", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl$.html#kafkaConfig:com.github.agourlay.cornichon.kafka.KafkaConfig", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaDsl.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.kafka.KafkaProducerConfig", "shortDescription" : "", "members_case class" : [{"member" : "com.github.agourlay.cornichon.kafka.KafkaProducerConfig#<init>", "error" : "unsupported entity"}, {"label" : "retriesConfig", "tail" : ": Option[Int]", "member" : "com.github.agourlay.cornichon.kafka.KafkaProducerConfig.retriesConfig", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaProducerConfig.html#retriesConfig:Option[Int]", "kind" : "val"}, {"label" : "batchSizeInBytes", "tail" : ": Int", "member" : "com.github.agourlay.cornichon.kafka.KafkaProducerConfig.batchSizeInBytes", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaProducerConfig.html#batchSizeInBytes:Int", "kind" : "val"}, {"label" : "ack", "tail" : ": String", "member" : "com.github.agourlay.cornichon.kafka.KafkaProducerConfig.ack", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaProducerConfig.html#ack:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaProducerConfig.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaProducerConfig.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaProducerConfig.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaProducerConfig.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaProducerConfig.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaProducerConfig.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaProducerConfig.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaProducerConfig.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaProducerConfig.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaProducerConfig.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaProducerConfig.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaProducerConfig.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaProducerConfig.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaProducerConfig.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaProducerConfig.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaProducerConfig.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/kafka\/KafkaProducerConfig.html", "kind" : "case class"}], "com.github.agourlay.cornichon.matchers" : [{"name" : "com.github.agourlay.cornichon.matchers.DuplicateMatcherDefinition", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.matchers.DuplicateMatcherDefinition.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/matchers\/DuplicateMatcherDefinition.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.matchers.DuplicateMatcherDefinition#<init>", "error" : "unsupported entity"}, {"label" : "descriptions", "tail" : ": List[String]", "member" : "com.github.agourlay.cornichon.matchers.DuplicateMatcherDefinition.descriptions", "link" : "com\/github\/agourlay\/cornichon\/matchers\/DuplicateMatcherDefinition.html#descriptions:List[String]", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "com.github.agourlay.cornichon.matchers.DuplicateMatcherDefinition.name", "link" : "com\/github\/agourlay\/cornichon\/matchers\/DuplicateMatcherDefinition.html#name:String", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/matchers\/DuplicateMatcherDefinition.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/matchers\/DuplicateMatcherDefinition.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/matchers\/DuplicateMatcherDefinition.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/matchers\/DuplicateMatcherDefinition.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/matchers\/DuplicateMatcherDefinition.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/matchers\/DuplicateMatcherDefinition.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/matchers\/DuplicateMatcherDefinition.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/matchers\/DuplicateMatcherDefinition.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/matchers\/DuplicateMatcherDefinition.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/matchers\/DuplicateMatcherDefinition.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/DuplicateMatcherDefinition.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/DuplicateMatcherDefinition.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/DuplicateMatcherDefinition.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/matchers\/DuplicateMatcherDefinition.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/matchers\/DuplicateMatcherDefinition.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/matchers\/DuplicateMatcherDefinition.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/matchers\/DuplicateMatcherDefinition.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/DuplicateMatcherDefinition.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/DuplicateMatcherDefinition.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/matchers\/DuplicateMatcherDefinition.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.matchers.Matcher", "shortDescription" : "", "members_case class" : [{"label" : "fullKey", "tail" : ": String", "member" : "com.github.agourlay.cornichon.matchers.Matcher.fullKey", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matcher.html#fullKey:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.matchers.Matcher#<init>", "error" : "unsupported entity"}, {"label" : "predicate", "tail" : ": (Json) â‡’ Boolean", "member" : "com.github.agourlay.cornichon.matchers.Matcher.predicate", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matcher.html#predicate:io.circe.Json=>Boolean", "kind" : "val"}, {"label" : "description", "tail" : ": String", "member" : "com.github.agourlay.cornichon.matchers.Matcher.description", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matcher.html#description:String", "kind" : "val"}, {"label" : "key", "tail" : ": String", "member" : "com.github.agourlay.cornichon.matchers.Matcher.key", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matcher.html#key:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matcher.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matcher.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matcher.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matcher.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matcher.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matcher.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matcher.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matcher.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matcher.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matcher.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matcher.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matcher.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matcher.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matcher.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matcher.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matcher.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/matchers\/Matcher.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.matchers.MatcherAssertion", "members_trait" : [{"label" : "validated", "tail" : "(): ValidatedNel[CornichonError, Done]", "member" : "com.github.agourlay.cornichon.matchers.MatcherAssertion.validated", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion.html#validated:cats.data.ValidatedNel[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Done]", "kind" : "def"}, {"label" : "or", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.or", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion.html#or(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "andAll", "tail" : "(others: Seq[Assertion]): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.andAll", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion.html#andAll(others:Seq[com.github.agourlay.cornichon.steps.regular.assertStep.Assertion]):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "and", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.and", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion.html#and(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "input", "tail" : ": Json", "member" : "com.github.agourlay.cornichon.matchers.MatcherAssertion.input", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion.html#input:io.circe.Json", "kind" : "abstract val"}, {"label" : "m", "tail" : ": Matcher", "member" : "com.github.agourlay.cornichon.matchers.MatcherAssertion.m", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion.html#m:com.github.agourlay.cornichon.matchers.Matcher", "kind" : "abstract val"}], "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion$.html", "members_object" : [{"label" : "atJsonPath", "tail" : "(jsonPath: JsonPath, json: Json, matcher: Matcher): MatcherAssertion", "member" : "com.github.agourlay.cornichon.matchers.MatcherAssertion.atJsonPath", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion$.html#atJsonPath(jsonPath:com.github.agourlay.cornichon.json.JsonPath,json:io.circe.Json,matcher:com.github.agourlay.cornichon.matchers.Matcher):com.github.agourlay.cornichon.matchers.MatcherAssertion", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertion.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.matchers.MatcherAssertionError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.matchers.MatcherAssertionError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionError.html#baseErrorMessage:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.matchers.MatcherAssertionError#<init>", "error" : "unsupported entity"}, {"label" : "input", "tail" : ": Json", "member" : "com.github.agourlay.cornichon.matchers.MatcherAssertionError.input", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionError.html#input:io.circe.Json", "kind" : "val"}, {"label" : "m", "tail" : ": Matcher", "member" : "com.github.agourlay.cornichon.matchers.MatcherAssertionError.m", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionError.html#m:com.github.agourlay.cornichon.matchers.Matcher", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.matchers.MatcherAssertionEvaluationError", "shortDescription" : "", "members_case class" : [{"label" : "causedBy", "tail" : ": Some[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.matchers.MatcherAssertionEvaluationError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionEvaluationError.html#causedBy:Some[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.matchers.MatcherAssertionEvaluationError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionEvaluationError.html#baseErrorMessage:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.matchers.MatcherAssertionEvaluationError#<init>", "error" : "unsupported entity"}, {"label" : "error", "tail" : ": Throwable", "member" : "com.github.agourlay.cornichon.matchers.MatcherAssertionEvaluationError.error", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionEvaluationError.html#error:Throwable", "kind" : "val"}, {"label" : "input", "tail" : ": Json", "member" : "com.github.agourlay.cornichon.matchers.MatcherAssertionEvaluationError.input", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionEvaluationError.html#input:io.circe.Json", "kind" : "val"}, {"label" : "m", "tail" : ": Matcher", "member" : "com.github.agourlay.cornichon.matchers.MatcherAssertionEvaluationError.m", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionEvaluationError.html#m:com.github.agourlay.cornichon.matchers.Matcher", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionEvaluationError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionEvaluationError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionEvaluationError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionEvaluationError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionEvaluationError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionEvaluationError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionEvaluationError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionEvaluationError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionEvaluationError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionEvaluationError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionEvaluationError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionEvaluationError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionEvaluationError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionEvaluationError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionEvaluationError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionEvaluationError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionEvaluationError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionEvaluationError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherAssertionEvaluationError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.matchers.MatcherError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.matchers.MatcherError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherError.html#baseErrorMessage:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.matchers.MatcherError#<init>", "error" : "unsupported entity"}, {"label" : "error", "tail" : ": Throwable", "member" : "com.github.agourlay.cornichon.matchers.MatcherError.error", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherError.html#error:Throwable", "kind" : "val"}, {"label" : "input", "tail" : ": String", "member" : "com.github.agourlay.cornichon.matchers.MatcherError.input", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherError.html#input:String", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.matchers.MatcherKey", "shortDescription" : "", "members_case class" : [{"member" : "com.github.agourlay.cornichon.matchers.MatcherKey#<init>", "error" : "unsupported entity"}, {"label" : "key", "tail" : ": String", "member" : "com.github.agourlay.cornichon.matchers.MatcherKey.key", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherKey.html#key:String", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherKey.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherKey.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherKey.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherKey.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherKey.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherKey.html#==(x$1:Any):Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherKey.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.matchers.MatcherParser", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser$.html", "members_class" : [{"label" : "__SubParserInput", "tail" : "", "member" : "org.parboiled2.Parser.__SubParserInput", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#__SubParserInputextendsParserInput", "kind" : "class"}, {"label" : "TracingBubbleException", "tail" : "", "member" : "org.parboiled2.Parser.TracingBubbleException", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#TracingBubbleExceptionextendsRuntimeExceptionwithNoStackTrace", "kind" : "class"}, {"label" : "ActionOperator", "tail" : "", "member" : "org.parboiled2.RuleDSLActions.ActionOperator", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#ActionOperator[I<:<?>,O<:<?>,Ops<:<?>]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "WithSeparatedBy", "tail" : "", "member" : "org.parboiled2.RuleDSLCombinators.WithSeparatedBy", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#WithSeparatedBy[I<:<?>,O<:<?>]extendsAnyRef", "kind" : "trait"}, {"label" : "NTimes", "tail" : "", "member" : "org.parboiled2.RuleDSLCombinators.NTimes", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#NTimesextendsAnyRef", "kind" : "sealed trait"}, {"label" : "CharRangeSupport", "tail" : "", "member" : "org.parboiled2.RuleDSLBasics.CharRangeSupport", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#CharRangeSupportextendsAnyRef", "kind" : "sealed trait"}, {"label" : "Digits", "tail" : "(): Rule[HNil, HNil]", "member" : "com.github.agourlay.cornichon.matchers.MatcherParser.Digits", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#Digits:org.parboiled2.Rule[shapeless.HNil,shapeless.HNil]", "kind" : "def"}, {"label" : "Number", "tail" : "(): Rule[HNil, ::[Int, HNil]]", "member" : "com.github.agourlay.cornichon.matchers.MatcherParser.Number", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#Number:org.parboiled2.Rule[shapeless.HNil,Int::shapeless.HNil]", "kind" : "def"}, {"label" : "Ignore", "tail" : "(): Rule[HNil, HNil]", "member" : "com.github.agourlay.cornichon.matchers.MatcherParser.Ignore", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#Ignore:org.parboiled2.Rule[shapeless.HNil,shapeless.HNil]", "kind" : "def"}, {"label" : "MatcherTXT", "tail" : "(): Rule[HNil, ::[String, HNil]]", "member" : "com.github.agourlay.cornichon.matchers.MatcherParser.MatcherTXT", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#MatcherTXT:org.parboiled2.Rule[shapeless.HNil,String::shapeless.HNil]", "kind" : "def"}, {"label" : "MatcherRule", "tail" : "(): Rule[HNil, ::[MatcherKey, HNil]]", "member" : "com.github.agourlay.cornichon.matchers.MatcherParser.MatcherRule", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#MatcherRule:org.parboiled2.Rule[shapeless.HNil,com.github.agourlay.cornichon.matchers.MatcherKey::shapeless.HNil]", "kind" : "def"}, {"label" : "matchersRule", "tail" : "(): Rule[HNil, ::[Seq[MatcherKey], HNil]]", "member" : "com.github.agourlay.cornichon.matchers.MatcherParser.matchersRule", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#matchersRule:org.parboiled2.Rule[shapeless.HNil,scala.collection.immutable.Seq[com.github.agourlay.cornichon.matchers.MatcherKey]::shapeless.HNil]", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.matchers.MatcherParser#<init>", "error" : "unsupported entity"}, {"label" : "input", "tail" : ": ParserInput", "member" : "com.github.agourlay.cornichon.matchers.MatcherParser.input", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#input:org.parboiled2.ParserInput", "kind" : "val"}, {"label" : "__hardFail", "tail" : "(expected: String): Nothing", "member" : "org.parboiled2.Parser.__hardFail", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#__hardFail(expected:String):Nothing", "kind" : "def"}, {"label" : "__matchMapWrapped", "tail" : "(m: Map[String, Any]): Boolean", "member" : "org.parboiled2.Parser.__matchMapWrapped", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#__matchMapWrapped(m:Map[String,Any]):Boolean", "kind" : "def"}, {"label" : "__matchMap", "tail" : "(m: Map[String, Any]): Boolean", "member" : "org.parboiled2.Parser.__matchMap", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#__matchMap(m:Map[String,Any]):Boolean", "kind" : "def"}, {"label" : "__matchNoneOf", "tail" : "(string: String, ix: Int): Boolean", "member" : "org.parboiled2.Parser.__matchNoneOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#__matchNoneOf(string:String,ix:Int):Boolean", "kind" : "final def"}, {"label" : "__matchAnyOf", "tail" : "(string: String, ix: Int): Boolean", "member" : "org.parboiled2.Parser.__matchAnyOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#__matchAnyOf(string:String,ix:Int):Boolean", "kind" : "final def"}, {"label" : "__matchIgnoreCaseStringWrapped", "tail" : "(string: String, ix: Int): Boolean", "member" : "org.parboiled2.Parser.__matchIgnoreCaseStringWrapped", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#__matchIgnoreCaseStringWrapped(string:String,ix:Int):Boolean", "kind" : "final def"}, {"label" : "__matchIgnoreCaseString", "tail" : "(string: String, ix: Int): Boolean", "member" : "org.parboiled2.Parser.__matchIgnoreCaseString", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#__matchIgnoreCaseString(string:String,ix:Int):Boolean", "kind" : "final def"}, {"label" : "__matchStringWrapped", "tail" : "(string: String, ix: Int): Boolean", "member" : "org.parboiled2.Parser.__matchStringWrapped", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#__matchStringWrapped(string:String,ix:Int):Boolean", "kind" : "final def"}, {"label" : "__matchString", "tail" : "(string: String, ix: Int): Boolean", "member" : "org.parboiled2.Parser.__matchString", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#__matchString(string:String,ix:Int):Boolean", "kind" : "final def"}, {"label" : "__push", "tail" : "(value: Any): Boolean", "member" : "org.parboiled2.Parser.__push", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#__push(value:Any):Boolean", "kind" : "def"}, {"label" : "__bubbleUp", "tail" : "(prefix: List[NonTerminal], terminal: Terminal): Nothing", "member" : "org.parboiled2.Parser.__bubbleUp", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#__bubbleUp(prefix:List[org.parboiled2.RuleTrace.NonTerminal],terminal:org.parboiled2.RuleTrace.Terminal):Nothing", "kind" : "def"}, {"label" : "__bubbleUp", "tail" : "(terminal: Terminal): Nothing", "member" : "org.parboiled2.Parser.__bubbleUp", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#__bubbleUp(terminal:org.parboiled2.RuleTrace.Terminal):Nothing", "kind" : "def"}, {"label" : "__registerMismatch", "tail" : "(): Boolean", "member" : "org.parboiled2.Parser.__registerMismatch", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#__registerMismatch():Boolean", "kind" : "def"}, {"label" : "__exitQuiet", "tail" : "(saved: Int): Unit", "member" : "org.parboiled2.Parser.__exitQuiet", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#__exitQuiet(saved:Int):Unit", "kind" : "def"}, {"label" : "__enterQuiet", "tail" : "(): Int", "member" : "org.parboiled2.Parser.__enterQuiet", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#__enterQuiet():Int", "kind" : "def"}, {"label" : "__exitAtomic", "tail" : "(saved: Boolean): Unit", "member" : "org.parboiled2.Parser.__exitAtomic", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#__exitAtomic(saved:Boolean):Unit", "kind" : "def"}, {"label" : "__enterAtomic", "tail" : "(start: Int): Boolean", "member" : "org.parboiled2.Parser.__enterAtomic", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#__enterAtomic(start:Int):Boolean", "kind" : "def"}, {"label" : "__exitNotPredicate", "tail" : "(saved: AnyRef): Unit", "member" : "org.parboiled2.Parser.__exitNotPredicate", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#__exitNotPredicate(saved:AnyRef):Unit", "kind" : "def"}, {"label" : "__enterNotPredicate", "tail" : "(): AnyRef", "member" : "org.parboiled2.Parser.__enterNotPredicate", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#__enterNotPredicate():AnyRef", "kind" : "def"}, {"label" : "__restoreState", "tail" : "(mark: Mark): Unit", "member" : "org.parboiled2.Parser.__restoreState", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#__restoreState(mark:org.parboiled2.Parser.Mark):Unit", "kind" : "def"}, {"label" : "__saveState", "tail" : "(): Mark", "member" : "org.parboiled2.Parser.__saveState", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#__saveState:org.parboiled2.Parser.Mark", "kind" : "def"}, {"label" : "__updateMaxCursor", "tail" : "(): Boolean", "member" : "org.parboiled2.Parser.__updateMaxCursor", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#__updateMaxCursor():Boolean", "kind" : "def"}, {"label" : "__advance", "tail" : "(): Boolean", "member" : "org.parboiled2.Parser.__advance", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#__advance():Boolean", "kind" : "def"}, {"label" : "__run", "tail" : "(rule: â‡’ RuleN[L])(scheme: DeliveryScheme[L]): Result", "member" : "org.parboiled2.Parser.__run", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#__run[L<:shapeless.HList](rule:=>org.parboiled2.RuleN[L])(implicitscheme:org.parboiled2.Parser.DeliveryScheme[L]):scheme.Result", "kind" : "def"}, {"label" : "__inErrorAnalysis", "tail" : "(): Boolean", "member" : "org.parboiled2.Parser.__inErrorAnalysis", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#__inErrorAnalysis:Boolean", "kind" : "def"}, {"label" : "copyStateFrom", "tail" : "(other: Parser, offset: Int): Unit", "member" : "org.parboiled2.Parser.copyStateFrom", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#copyStateFrom(other:org.parboiled2.Parser,offset:Int):Unit", "kind" : "def"}, {"label" : "formatError", "tail" : "(error: ParseError, formatter: ErrorFormatter): String", "member" : "org.parboiled2.Parser.formatError", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#formatError(error:org.parboiled2.ParseError,formatter:org.parboiled2.ErrorFormatter):String", "kind" : "def"}, {"label" : "errorTraceCollectionLimit", "tail" : "(): Int", "member" : "org.parboiled2.Parser.errorTraceCollectionLimit", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#errorTraceCollectionLimit:Int", "kind" : "def"}, {"label" : "valueStack", "tail" : "(): ValueStack", "member" : "org.parboiled2.Parser.valueStack", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#valueStack:org.parboiled2.ValueStack", "kind" : "def"}, {"label" : "charAtRC", "tail" : "(offset: Int): Char", "member" : "org.parboiled2.Parser.charAtRC", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#charAtRC(offset:Int):Char", "kind" : "def"}, {"label" : "charAt", "tail" : "(offset: Int): Char", "member" : "org.parboiled2.Parser.charAt", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#charAt(offset:Int):Char", "kind" : "def"}, {"label" : "lastChar", "tail" : "(): Char", "member" : "org.parboiled2.Parser.lastChar", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#lastChar:Char", "kind" : "def"}, {"label" : "cursorChar", "tail" : "(): Char", "member" : "org.parboiled2.Parser.cursorChar", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#cursorChar:Char", "kind" : "def"}, {"label" : "cursor", "tail" : "(): Int", "member" : "org.parboiled2.Parser.cursor", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#cursor:Int", "kind" : "def"}, {"label" : "namedRule", "tail" : "(name: String)(r: Rule[I, O]): Rule[I, O]", "member" : "org.parboiled2.Parser.namedRule", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#namedRule[I<:shapeless.HList,O<:shapeless.HList](name:String)(r:org.parboiled2.Rule[I,O]):org.parboiled2.Rule[I,O]", "kind" : "macro def"}, {"label" : "rule", "tail" : "(r: Rule[I, O]): Rule[I, O]", "member" : "org.parboiled2.Parser.rule", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#rule[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O]):org.parboiled2.Rule[I,O]", "kind" : "macro def"}, {"label" : "rule2ActionOperator", "tail" : "(r: Rule[I, O])(ops: ActionOps[I, O]): ActionOperator[I, O, Out]", "member" : "org.parboiled2.RuleDSLActions.rule2ActionOperator", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#rule2ActionOperator[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O])(implicitops:org.parboiled2.support.ActionOps[I,O]):RuleDSLActions.this.ActionOperator[I,O,ops.Out]", "kind" : "implicit def"}, {"label" : "drop", "tail" : "(h: HListable[T]): PopRule[Out]", "member" : "org.parboiled2.RuleDSLActions.drop", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#drop[T](implicith:org.parboiled2.support.HListable[T]):org.parboiled2.PopRule[h.Out]", "kind" : "def"}, {"label" : "push", "tail" : "(value: T)(h: HListable[T]): RuleN[Out]", "member" : "org.parboiled2.RuleDSLActions.push", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#push[T](value:T)(implicith:org.parboiled2.support.HListable[T]):org.parboiled2.RuleN[h.Out]", "kind" : "def"}, {"label" : "run", "tail" : "(arg: T)(rr: RunResult[T]): Out", "member" : "org.parboiled2.RuleDSLActions.run", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#run[T](arg:T)(implicitrr:org.parboiled2.support.RunResult[T]):rr.Out", "kind" : "def"}, {"label" : "test", "tail" : "(condition: Boolean): Rule0", "member" : "org.parboiled2.RuleDSLActions.test", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#test(condition:Boolean):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "capture", "tail" : "(r: Rule[I, O])(p: Prepend[O, ::[String, HNil]]): Rule[I, Out]", "member" : "org.parboiled2.RuleDSLActions.capture", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#capture[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O])(implicitp:shapeless.ops.hlist.Prepend[O,String::shapeless.HNil]):org.parboiled2.Rule[I,p.Out]", "kind" : "def"}, {"label" : "rule2WithSeparatedBy", "tail" : "(r: Rule[I, O] with Repeated): WithSeparatedBy[I, O]", "member" : "org.parboiled2.RuleDSLCombinators.rule2WithSeparatedBy", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#rule2WithSeparatedBy[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O]withorg.parboiled2.Repeated):RuleDSLCombinators.this.WithSeparatedBy[I,O]", "kind" : "implicit def"}, {"label" : "range2NTimes", "tail" : "(range: Range): NTimes", "member" : "org.parboiled2.RuleDSLCombinators.range2NTimes", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#range2NTimes(range:Range):RuleDSLCombinators.this.NTimes", "kind" : "implicit def"}, {"label" : "int2NTimes", "tail" : "(i: Int): NTimes", "member" : "org.parboiled2.RuleDSLCombinators.int2NTimes", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#int2NTimes(i:Int):RuleDSLCombinators.this.NTimes", "kind" : "implicit def"}, {"label" : "runSubParser", "tail" : "(f: (ParserInput) â‡’ Rule[I, O]): Rule[I, O]", "member" : "org.parboiled2.RuleDSLCombinators.runSubParser", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#runSubParser[I<:shapeless.HList,O<:shapeless.HList](f:org.parboiled2.ParserInput=>org.parboiled2.Rule[I,O]):org.parboiled2.Rule[I,O]", "kind" : "def"}, {"label" : "quiet", "tail" : "(r: Rule[I, O]): Rule[I, O]", "member" : "org.parboiled2.RuleDSLCombinators.quiet", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#quiet[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O]):org.parboiled2.Rule[I,O]", "kind" : "def"}, {"label" : "atomic", "tail" : "(r: Rule[I, O]): Rule[I, O]", "member" : "org.parboiled2.RuleDSLCombinators.atomic", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#atomic[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O]):org.parboiled2.Rule[I,O]", "kind" : "def"}, {"label" : "&", "tail" : "(r: Rule[_, _]): Rule0", "member" : "org.parboiled2.RuleDSLCombinators.&", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#&(r:org.parboiled2.Rule[_,_]):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "oneOrMore", "tail" : "(r: Rule[I, O])(l: Lifter[Seq, I, O]): Rule[In, StrictOut] with Repeated", "member" : "org.parboiled2.RuleDSLCombinators.oneOrMore", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#oneOrMore[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O])(implicitl:org.parboiled2.support.Lifter[scala.collection.immutable.Seq,I,O]):org.parboiled2.Rule[l.In,l.StrictOut]withorg.parboiled2.Repeated", "kind" : "def"}, {"label" : "zeroOrMore", "tail" : "(r: Rule[I, O])(l: Lifter[Seq, I, O]): Rule[In, OptionalOut] with Repeated", "member" : "org.parboiled2.RuleDSLCombinators.zeroOrMore", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#zeroOrMore[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O])(implicitl:org.parboiled2.support.Lifter[scala.collection.immutable.Seq,I,O]):org.parboiled2.Rule[l.In,l.OptionalOut]withorg.parboiled2.Repeated", "kind" : "def"}, {"label" : "optional", "tail" : "(r: Rule[I, O])(l: Lifter[Option, I, O]): Rule[In, OptionalOut]", "member" : "org.parboiled2.RuleDSLCombinators.optional", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#optional[I<:shapeless.HList,O<:shapeless.HList](r:org.parboiled2.Rule[I,O])(implicitl:org.parboiled2.support.Lifter[Option,I,O]):org.parboiled2.Rule[l.In,l.OptionalOut]", "kind" : "def"}, {"label" : "str2CharRangeSupport", "tail" : "(s: String): CharRangeSupport", "member" : "org.parboiled2.RuleDSLBasics.str2CharRangeSupport", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#str2CharRangeSupport(s:String):RuleDSLBasics.this.CharRangeSupport", "kind" : "implicit def"}, {"label" : "failX", "tail" : "(expected: String): Rule[I, O]", "member" : "org.parboiled2.RuleDSLBasics.failX", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#failX[I<:shapeless.HList,O<:shapeless.HList](expected:String):org.parboiled2.Rule[I,O]", "kind" : "def"}, {"label" : "fail", "tail" : "(expected: String): Rule0", "member" : "org.parboiled2.RuleDSLBasics.fail", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#fail(expected:String):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "MISMATCH", "tail" : "(): Rule[I, O]", "member" : "org.parboiled2.RuleDSLBasics.MISMATCH", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#MISMATCH[I<:shapeless.HList,O<:shapeless.HList]:org.parboiled2.Rule[I,O]", "kind" : "def"}, {"label" : "MISMATCH0", "tail" : "(): Rule0", "member" : "org.parboiled2.RuleDSLBasics.MISMATCH0", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#MISMATCH0:org.parboiled2.Rule0", "kind" : "def"}, {"label" : "MATCH", "tail" : "(): Rule0", "member" : "org.parboiled2.RuleDSLBasics.MATCH", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#MATCH:org.parboiled2.Rule0", "kind" : "def"}, {"label" : "EOI", "tail" : "(): Char", "member" : "org.parboiled2.RuleDSLBasics.EOI", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#EOI:Char", "kind" : "def"}, {"label" : "ANY", "tail" : "(): Rule0", "member" : "org.parboiled2.RuleDSLBasics.ANY", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#ANY:org.parboiled2.Rule0", "kind" : "def"}, {"label" : "ignoreCase", "tail" : "(s: String): Rule0", "member" : "org.parboiled2.RuleDSLBasics.ignoreCase", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#ignoreCase(s:String):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "ignoreCase", "tail" : "(c: Char): Rule0", "member" : "org.parboiled2.RuleDSLBasics.ignoreCase", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#ignoreCase(c:Char):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "noneOf", "tail" : "(chars: String): Rule0", "member" : "org.parboiled2.RuleDSLBasics.noneOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#noneOf(chars:String):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "anyOf", "tail" : "(chars: String): Rule0", "member" : "org.parboiled2.RuleDSLBasics.anyOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#anyOf(chars:String):org.parboiled2.Rule0", "kind" : "def"}, {"label" : "valueMap", "tail" : "(m: Map[String, T])(h: HListable[T]): RuleN[Out]", "member" : "org.parboiled2.RuleDSLBasics.valueMap", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#valueMap[T](m:Map[String,T])(implicith:org.parboiled2.support.HListable[T]):org.parboiled2.RuleN[h.Out]", "kind" : "implicit def"}, {"label" : "predicate", "tail" : "(p: CharPredicate): Rule0", "member" : "org.parboiled2.RuleDSLBasics.predicate", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#predicate(p:org.parboiled2.CharPredicate):org.parboiled2.Rule0", "kind" : "implicit def"}, {"label" : "str", "tail" : "(s: String): Rule0", "member" : "org.parboiled2.RuleDSLBasics.str", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#str(s:String):org.parboiled2.Rule0", "kind" : "implicit def"}, {"label" : "ch", "tail" : "(c: Char): Rule0", "member" : "org.parboiled2.RuleDSLBasics.ch", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#ch(c:Char):org.parboiled2.Rule0", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "parse", "tail" : "(input: String): Either[CornichonError, List[MatcherKey]]", "member" : "com.github.agourlay.cornichon.matchers.MatcherParser.parse", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser$.html#parse(input:String):Either[com.github.agourlay.cornichon.core.CornichonError,List[com.github.agourlay.cornichon.matchers.MatcherKey]]", "kind" : "def"}, {"label" : "notAllowedInMatchers", "tail" : ": String", "member" : "com.github.agourlay.cornichon.matchers.MatcherParser.notAllowedInMatchers", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser$.html#notAllowedInMatchers:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParser.html", "kind" : "class"}, {"name" : "com.github.agourlay.cornichon.matchers.MatcherParsingError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.matchers.MatcherParsingError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParsingError.html#baseErrorMessage:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.matchers.MatcherParsingError#<init>", "error" : "unsupported entity"}, {"label" : "error", "tail" : ": String", "member" : "com.github.agourlay.cornichon.matchers.MatcherParsingError.error", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParsingError.html#error:String", "kind" : "val"}, {"label" : "input", "tail" : ": String", "member" : "com.github.agourlay.cornichon.matchers.MatcherParsingError.input", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParsingError.html#input:String", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParsingError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParsingError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParsingError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParsingError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParsingError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParsingError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParsingError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParsingError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParsingError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParsingError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParsingError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParsingError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParsingError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParsingError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParsingError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParsingError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParsingError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParsingError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParsingError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherParsingError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.matchers.MatcherResolver", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver$.html", "members_object" : [{"label" : "builtInMatchers", "tail" : ": List[Matcher]", "member" : "com.github.agourlay.cornichon.matchers.MatcherResolver.builtInMatchers", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver$.html#builtInMatchers:List[com.github.agourlay.cornichon.matchers.Matcher]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "prepareMatchers", "tail" : "(matchers: List[Matcher], expected: Json, actual: Json): (Json, Json, Seq[MatcherAssertion])", "member" : "com.github.agourlay.cornichon.matchers.MatcherResolver.prepareMatchers", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver.html#prepareMatchers(matchers:List[com.github.agourlay.cornichon.matchers.Matcher],expected:io.circe.Json,actual:io.circe.Json):(io.circe.Json,io.circe.Json,Seq[com.github.agourlay.cornichon.matchers.MatcherAssertion])", "kind" : "def"}, {"label" : "quoteMatchers", "tail" : "(input: String): String", "member" : "com.github.agourlay.cornichon.matchers.MatcherResolver.quoteMatchers", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver.html#quoteMatchers(input:String):String", "kind" : "def"}, {"label" : "findAllMatchers", "tail" : "(input: String): Either[CornichonError, List[Matcher]]", "member" : "com.github.agourlay.cornichon.matchers.MatcherResolver.findAllMatchers", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver.html#findAllMatchers(input:String):Either[com.github.agourlay.cornichon.core.CornichonError,List[com.github.agourlay.cornichon.matchers.Matcher]]", "kind" : "def"}, {"label" : "resolveMatcherKeys", "tail" : "(mk: MatcherKey): Either[CornichonError, Matcher]", "member" : "com.github.agourlay.cornichon.matchers.MatcherResolver.resolveMatcherKeys", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver.html#resolveMatcherKeys(mk:com.github.agourlay.cornichon.matchers.MatcherKey):Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.matchers.Matcher]", "kind" : "def"}, {"label" : "findMatcherKeys", "tail" : "(input: String): Either[CornichonError, List[MatcherKey]]", "member" : "com.github.agourlay.cornichon.matchers.MatcherResolver.findMatcherKeys", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver.html#findMatcherKeys(input:String):Either[com.github.agourlay.cornichon.core.CornichonError,List[com.github.agourlay.cornichon.matchers.MatcherKey]]", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.matchers.MatcherResolver#<init>", "error" : "unsupported entity"}, {"label" : "matchers", "tail" : ": List[Matcher]", "member" : "com.github.agourlay.cornichon.matchers.MatcherResolver.matchers", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver.html#matchers:List[com.github.agourlay.cornichon.matchers.Matcher]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherResolver.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.matchers.Matchers", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html", "members_object" : [{"label" : "anyTime", "tail" : ": Matcher", "member" : "com.github.agourlay.cornichon.matchers.Matchers.anyTime", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#anyTime:com.github.agourlay.cornichon.matchers.Matcher", "kind" : "val"}, {"label" : "anyDateTime", "tail" : ": Matcher", "member" : "com.github.agourlay.cornichon.matchers.Matchers.anyDateTime", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#anyDateTime:com.github.agourlay.cornichon.matchers.Matcher", "kind" : "val"}, {"label" : "anyDate", "tail" : ": Matcher", "member" : "com.github.agourlay.cornichon.matchers.Matchers.anyDate", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#anyDate:com.github.agourlay.cornichon.matchers.Matcher", "kind" : "val"}, {"label" : "anyAlphaNum", "tail" : ": Matcher", "member" : "com.github.agourlay.cornichon.matchers.Matchers.anyAlphaNum", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#anyAlphaNum:com.github.agourlay.cornichon.matchers.Matcher", "kind" : "val"}, {"label" : "anyBoolean", "tail" : ": Matcher", "member" : "com.github.agourlay.cornichon.matchers.Matchers.anyBoolean", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#anyBoolean:com.github.agourlay.cornichon.matchers.Matcher", "kind" : "val"}, {"label" : "anyUUID", "tail" : ": Matcher", "member" : "com.github.agourlay.cornichon.matchers.Matchers.anyUUID", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#anyUUID:com.github.agourlay.cornichon.matchers.Matcher", "kind" : "val"}, {"label" : "anyNegativeInteger", "tail" : ": Matcher", "member" : "com.github.agourlay.cornichon.matchers.Matchers.anyNegativeInteger", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#anyNegativeInteger:com.github.agourlay.cornichon.matchers.Matcher", "kind" : "val"}, {"label" : "anyPositiveInteger", "tail" : ": Matcher", "member" : "com.github.agourlay.cornichon.matchers.Matchers.anyPositiveInteger", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#anyPositiveInteger:com.github.agourlay.cornichon.matchers.Matcher", "kind" : "val"}, {"label" : "anyInteger", "tail" : ": Matcher", "member" : "com.github.agourlay.cornichon.matchers.Matchers.anyInteger", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#anyInteger:com.github.agourlay.cornichon.matchers.Matcher", "kind" : "val"}, {"label" : "anyObject", "tail" : ": Matcher", "member" : "com.github.agourlay.cornichon.matchers.Matchers.anyObject", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#anyObject:com.github.agourlay.cornichon.matchers.Matcher", "kind" : "val"}, {"label" : "anyArray", "tail" : ": Matcher", "member" : "com.github.agourlay.cornichon.matchers.Matchers.anyArray", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#anyArray:com.github.agourlay.cornichon.matchers.Matcher", "kind" : "val"}, {"label" : "anyString", "tail" : ": Matcher", "member" : "com.github.agourlay.cornichon.matchers.Matchers.anyString", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#anyString:com.github.agourlay.cornichon.matchers.Matcher", "kind" : "val"}, {"label" : "isPresent", "tail" : ": Matcher", "member" : "com.github.agourlay.cornichon.matchers.Matchers.isPresent", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#isPresent:com.github.agourlay.cornichon.matchers.Matcher", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/Matchers$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.agourlay.cornichon.matchers.MatcherUndefined", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.matchers.MatcherUndefined.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherUndefined.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.matchers.MatcherUndefined#<init>", "error" : "unsupported entity"}, {"label" : "name", "tail" : ": String", "member" : "com.github.agourlay.cornichon.matchers.MatcherUndefined.name", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherUndefined.html#name:String", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherUndefined.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherUndefined.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherUndefined.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherUndefined.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherUndefined.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherUndefined.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherUndefined.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherUndefined.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherUndefined.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherUndefined.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherUndefined.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherUndefined.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherUndefined.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherUndefined.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherUndefined.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherUndefined.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherUndefined.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherUndefined.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherUndefined.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/matchers\/MatcherUndefined.html", "kind" : "case class"}], "com.github.agourlay" : [], "com.github.agourlay.cornichon.steps.regular.assertStep" : [{"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "members_trait" : [{"label" : "or", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.or", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion.html#or(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "andAll", "tail" : "(others: Seq[Assertion]): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.andAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion.html#andAll(others:Seq[com.github.agourlay.cornichon.steps.regular.assertStep.Assertion]):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "and", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.and", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion.html#and(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "validated", "tail" : "(): ValidatedNel[CornichonError, Done]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.validated", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion.html#validated:cats.data.ValidatedNel[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Done]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion$.html", "members_object" : [{"label" : "any", "tail" : "(assertions: List[Assertion]): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.any", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion$.html#any(assertions:List[com.github.agourlay.cornichon.steps.regular.assertStep.Assertion]):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "all", "tail" : "(assertions: List[Assertion]): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.all", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion$.html#all(assertions:List[com.github.agourlay.cornichon.steps.regular.assertStep.Assertion]):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "either", "tail" : "(v: Either[CornichonError, Assertion]): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.either", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion$.html#either(v:Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.steps.regular.assertStep.Assertion]):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "failWith", "tail" : "(error: CornichonError): Assertion { val validated: cats.data.ValidatedNel[com.github.agourlay.cornichon.core.CornichonError,Nothing] }", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.failWith", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion$.html#failWith(error:com.github.agourlay.cornichon.core.CornichonError):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion{valvalidated:cats.data.ValidatedNel[com.github.agourlay.cornichon.core.CornichonError,Nothing]}", "kind" : "def"}, {"label" : "failWith", "tail" : "(error: String): Assertion { val validated: cats.data.ValidatedNel[com.github.agourlay.cornichon.core.BasicError,Nothing] }", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.failWith", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion$.html#failWith(error:String):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion{valvalidated:cats.data.ValidatedNel[com.github.agourlay.cornichon.core.BasicError,Nothing]}", "kind" : "def"}, {"label" : "alwaysValid", "tail" : ": Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.alwaysValid", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion$.html#alwaysValid:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Assertion.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.AssertStep", "shortDescription" : "", "members_case class" : [{"label" : "runStepPredicate", "tail" : "(assertion: Assertion): Either[NonEmptyList[CornichonError], Done]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.AssertStep.runStepPredicate", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/AssertStep.html#runStepPredicate(assertion:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):Either[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError],com.github.agourlay.cornichon.core.Done]", "kind" : "def"}, {"label" : "onSuccess", "tail" : "(result: Done, initialRunState: RunState, executionTime: Duration): (Option[SuccessLogInstruction], None.type)", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.AssertStep.onSuccess", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/AssertStep.html#onSuccess(result:com.github.agourlay.cornichon.core.Done,initialRunState:com.github.agourlay.cornichon.core.RunState,executionTime:scala.concurrent.duration.Duration):(Option[com.github.agourlay.cornichon.core.SuccessLogInstruction],None.type)", "kind" : "def"}, {"label" : "onError", "tail" : "(errors: NonEmptyList[CornichonError], initialRunState: RunState): (Vector[LogInstruction], FailedStep)", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.AssertStep.onError", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/AssertStep.html#onError(errors:cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError],initialRunState:com.github.agourlay.cornichon.core.RunState):(Vector[com.github.agourlay.cornichon.core.LogInstruction],com.github.agourlay.cornichon.core.FailedStep)", "kind" : "def"}, {"label" : "run", "tail" : "(initialRunState: RunState): Task[Either[NonEmptyList[CornichonError], Done]]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.AssertStep.run", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/AssertStep.html#run(initialRunState:com.github.agourlay.cornichon.core.RunState):monix.eval.Task[Either[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError],com.github.agourlay.cornichon.core.Done]]", "kind" : "def"}, {"label" : "setTitle", "tail" : "(newTitle: String): AssertStep", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.AssertStep.setTitle", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/AssertStep.html#setTitle(newTitle:String):com.github.agourlay.cornichon.steps.regular.assertStep.AssertStep", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.steps.regular.assertStep.AssertStep#<init>", "error" : "unsupported entity"}, {"label" : "show", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.AssertStep.show", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/AssertStep.html#show:Boolean", "kind" : "val"}, {"label" : "action", "tail" : ": (Session) â‡’ Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.AssertStep.action", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/AssertStep.html#action:com.github.agourlay.cornichon.core.Session=>com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "val"}, {"label" : "title", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.AssertStep.title", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/AssertStep.html#title:String", "kind" : "val"}, {"label" : "run", "tail" : "(engine: Engine)(initialRunState: RunState): Task[(RunState, Either[FailedStep, Done])]", "member" : "com.github.agourlay.cornichon.core.ValueStep.run", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/AssertStep.html#run(engine:com.github.agourlay.cornichon.core.Engine)(initialRunState:com.github.agourlay.cornichon.core.RunState):monix.eval.Task[(com.github.agourlay.cornichon.core.RunState,Either[com.github.agourlay.cornichon.core.FailedStep,com.github.agourlay.cornichon.core.Done])]", "kind" : "def"}, {"label" : "chain", "tail" : "(others: (Session) â‡’ List[Step]): Step", "member" : "com.github.agourlay.cornichon.core.Step.chain", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/AssertStep.html#chain(others:com.github.agourlay.cornichon.core.Session=>List[com.github.agourlay.cornichon.core.Step]):com.github.agourlay.cornichon.core.Step", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/AssertStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/AssertStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/AssertStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/AssertStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/AssertStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/AssertStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/AssertStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/AssertStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/AssertStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/AssertStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/AssertStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/AssertStep.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/AssertStep.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/AssertStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/AssertStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/AssertStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/AssertStep.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.BetweenAssertion", "shortDescription" : "", "members_case class" : [{"label" : "validated", "tail" : ": ValidatedNel[CornichonError, Done]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.BetweenAssertion.validated", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/BetweenAssertion.html#validated:cats.data.ValidatedNel[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Done]", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.steps.regular.assertStep.BetweenAssertion#<init>", "error" : "unsupported entity"}, {"label" : "high", "tail" : ": A", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.BetweenAssertion.high", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/BetweenAssertion.html#high:A", "kind" : "val"}, {"label" : "inspected", "tail" : ": A", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.BetweenAssertion.inspected", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/BetweenAssertion.html#inspected:A", "kind" : "val"}, {"label" : "low", "tail" : ": A", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.BetweenAssertion.low", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/BetweenAssertion.html#low:A", "kind" : "val"}, {"label" : "or", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.or", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/BetweenAssertion.html#or(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "andAll", "tail" : "(others: Seq[Assertion]): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.andAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/BetweenAssertion.html#andAll(others:Seq[com.github.agourlay.cornichon.steps.regular.assertStep.Assertion]):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "and", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.and", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/BetweenAssertion.html#and(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/BetweenAssertion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/BetweenAssertion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/BetweenAssertion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/BetweenAssertion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/BetweenAssertion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/BetweenAssertion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/BetweenAssertion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/BetweenAssertion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/BetweenAssertion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/BetweenAssertion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/BetweenAssertion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/BetweenAssertion.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/BetweenAssertion.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/BetweenAssertion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/BetweenAssertion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/BetweenAssertion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/BetweenAssertion.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionAssertion", "shortDescription" : "", "members_class" : [{"member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionAssertion#<init>", "error" : "unsupported entity"}, {"label" : "or", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.or", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionAssertion.html#or(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "andAll", "tail" : "(others: Seq[Assertion]): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.andAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionAssertion.html#andAll(others:Seq[com.github.agourlay.cornichon.steps.regular.assertStep.Assertion]):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "and", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.and", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionAssertion.html#and(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionAssertion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionAssertion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionAssertion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionAssertion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionAssertion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionAssertion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionAssertion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionAssertion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionAssertion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionAssertion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionAssertion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionAssertion.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionAssertion.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionAssertion.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionAssertion.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionAssertion.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionAssertion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionAssertion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionAssertion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "validated", "tail" : "(): ValidatedNel[CornichonError, Done]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.validated", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionAssertion.html#validated:cats.data.ValidatedNel[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Done]", "kind" : "abstract def"}], "class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionAssertion.html", "kind" : "class"}, {"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionEmptyAssertion", "shortDescription" : "", "members_case class" : [{"label" : "validated", "tail" : ": ValidatedNel[CornichonError, Done]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionEmptyAssertion.validated", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertion.html#validated:cats.data.ValidatedNel[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Done]", "kind" : "val"}, {"label" : "withName", "tail" : "(collectionName: String): CollectionEmptyAssertion[A]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionEmptyAssertion.withName", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertion.html#withName(collectionName:String):com.github.agourlay.cornichon.steps.regular.assertStep.CollectionEmptyAssertion[A]", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionEmptyAssertion#<init>", "error" : "unsupported entity"}, {"label" : "name", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionEmptyAssertion.name", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertion.html#name:String", "kind" : "val"}, {"label" : "collection", "tail" : ": Iterable[A]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionEmptyAssertion.collection", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertion.html#collection:Iterable[A]", "kind" : "val"}, {"label" : "or", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.or", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertion.html#or(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "andAll", "tail" : "(others: Seq[Assertion]): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.andAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertion.html#andAll(others:Seq[com.github.agourlay.cornichon.steps.regular.assertStep.Assertion]):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "and", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.and", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertion.html#and(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertion.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertion.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertion.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionEmptyAssertionError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionEmptyAssertionError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertionError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionEmptyAssertionError#<init>", "error" : "unsupported entity"}, {"label" : "name", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionEmptyAssertionError.name", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertionError.html#name:String", "kind" : "val"}, {"label" : "collection", "tail" : ": Iterable[A]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionEmptyAssertionError.collection", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertionError.html#collection:Iterable[A]", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertionError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertionError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertionError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertionError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertionError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertionError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertionError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertionError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertionError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertionError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertionError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertionError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertionError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertionError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertionError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertionError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertionError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertionError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertionError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionEmptyAssertionError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionNotEmptyAssertion", "shortDescription" : "", "members_case class" : [{"label" : "validated", "tail" : ": ValidatedNel[CornichonError, Done]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionNotEmptyAssertion.validated", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertion.html#validated:cats.data.ValidatedNel[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Done]", "kind" : "val"}, {"label" : "withName", "tail" : "(collectionName: String): CollectionNotEmptyAssertion[A]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionNotEmptyAssertion.withName", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertion.html#withName(collectionName:String):com.github.agourlay.cornichon.steps.regular.assertStep.CollectionNotEmptyAssertion[A]", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionNotEmptyAssertion#<init>", "error" : "unsupported entity"}, {"label" : "name", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionNotEmptyAssertion.name", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertion.html#name:String", "kind" : "val"}, {"label" : "collection", "tail" : ": Iterable[A]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionNotEmptyAssertion.collection", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertion.html#collection:Iterable[A]", "kind" : "val"}, {"label" : "or", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.or", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertion.html#or(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "andAll", "tail" : "(others: Seq[Assertion]): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.andAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertion.html#andAll(others:Seq[com.github.agourlay.cornichon.steps.regular.assertStep.Assertion]):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "and", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.and", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertion.html#and(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertion.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertion.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertion.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionNotEmptyAssertionError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionNotEmptyAssertionError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertionError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionNotEmptyAssertionError#<init>", "error" : "unsupported entity"}, {"label" : "name", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionNotEmptyAssertionError.name", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertionError.html#name:String", "kind" : "val"}, {"label" : "collection", "tail" : ": Iterable[A]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionNotEmptyAssertionError.collection", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertionError.html#collection:Iterable[A]", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertionError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertionError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertionError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertionError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertionError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertionError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertionError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertionError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertionError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertionError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertionError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertionError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertionError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertionError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertionError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertionError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertionError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertionError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertionError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionNotEmptyAssertionError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionsContainSameElements", "shortDescription" : "", "members_case class" : [{"label" : "validated", "tail" : ": ValidatedNel[CornichonError, Done]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionsContainSameElements.validated", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElements.html#validated:cats.data.ValidatedNel[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Done]", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionsContainSameElements#<init>", "error" : "unsupported entity"}, {"label" : "left", "tail" : ": Seq[A]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionsContainSameElements.left", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElements.html#left:Seq[A]", "kind" : "val"}, {"label" : "right", "tail" : ": Seq[A]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionsContainSameElements.right", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElements.html#right:Seq[A]", "kind" : "val"}, {"label" : "or", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.or", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElements.html#or(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "andAll", "tail" : "(others: Seq[Assertion]): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.andAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElements.html#andAll(others:Seq[com.github.agourlay.cornichon.steps.regular.assertStep.Assertion]):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "and", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.and", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElements.html#and(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElements.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElements.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElements.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElements.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElements.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElements.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElements.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElements.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElements.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElements.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElements.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElements.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElements.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElements.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElements.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElements.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElements.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionsContainSameElementsAssertionError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionsContainSameElementsAssertionError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElementsAssertionError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionsContainSameElementsAssertionError#<init>", "error" : "unsupported entity"}, {"label" : "deleted", "tail" : ": Seq[A]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionsContainSameElementsAssertionError.deleted", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElementsAssertionError.html#deleted:Seq[A]", "kind" : "val"}, {"label" : "added", "tail" : ": Seq[A]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionsContainSameElementsAssertionError.added", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElementsAssertionError.html#added:Seq[A]", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElementsAssertionError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElementsAssertionError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElementsAssertionError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElementsAssertionError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElementsAssertionError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElementsAssertionError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElementsAssertionError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElementsAssertionError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElementsAssertionError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElementsAssertionError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElementsAssertionError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElementsAssertionError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElementsAssertionError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElementsAssertionError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElementsAssertionError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElementsAssertionError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElementsAssertionError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElementsAssertionError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElementsAssertionError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionsContainSameElementsAssertionError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionSizeAssertion", "shortDescription" : "", "members_case class" : [{"label" : "validated", "tail" : ": ValidatedNel[CornichonError, Done]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionSizeAssertion.validated", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertion.html#validated:cats.data.ValidatedNel[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Done]", "kind" : "val"}, {"label" : "withName", "tail" : "(collectionName: String): CollectionSizeAssertion[A]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionSizeAssertion.withName", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertion.html#withName(collectionName:String):com.github.agourlay.cornichon.steps.regular.assertStep.CollectionSizeAssertion[A]", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionSizeAssertion#<init>", "error" : "unsupported entity"}, {"label" : "name", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionSizeAssertion.name", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertion.html#name:String", "kind" : "val"}, {"label" : "size", "tail" : ": Int", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionSizeAssertion.size", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertion.html#size:Int", "kind" : "val"}, {"label" : "collection", "tail" : ": Iterable[A]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionSizeAssertion.collection", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertion.html#collection:Iterable[A]", "kind" : "val"}, {"label" : "or", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.or", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertion.html#or(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "andAll", "tail" : "(others: Seq[Assertion]): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.andAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertion.html#andAll(others:Seq[com.github.agourlay.cornichon.steps.regular.assertStep.Assertion]):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "and", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.and", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertion.html#and(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertion.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertion.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertion.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionSizeAssertionError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionSizeAssertionError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertionError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionSizeAssertionError#<init>", "error" : "unsupported entity"}, {"label" : "name", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionSizeAssertionError.name", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertionError.html#name:String", "kind" : "val"}, {"label" : "size", "tail" : ": Int", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionSizeAssertionError.size", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertionError.html#size:Int", "kind" : "val"}, {"label" : "collection", "tail" : ": Iterable[A]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CollectionSizeAssertionError.collection", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertionError.html#collection:Iterable[A]", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertionError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertionError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertionError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertionError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertionError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertionError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertionError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertionError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertionError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertionError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertionError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertionError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertionError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertionError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertionError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertionError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertionError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertionError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertionError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CollectionSizeAssertionError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.CustomMessageAssertionError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CustomMessageAssertionError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageAssertionError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CustomMessageAssertionError#<init>", "error" : "unsupported entity"}, {"label" : "detailedAssertion", "tail" : ": (A) â‡’ String", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CustomMessageAssertionError.detailedAssertion", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageAssertionError.html#detailedAssertion:A=>String", "kind" : "val"}, {"label" : "result", "tail" : ": A", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CustomMessageAssertionError.result", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageAssertionError.html#result:A", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageAssertionError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageAssertionError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageAssertionError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageAssertionError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageAssertionError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageAssertionError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageAssertionError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageAssertionError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageAssertionError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageAssertionError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageAssertionError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageAssertionError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageAssertionError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageAssertionError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageAssertionError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageAssertionError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageAssertionError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageAssertionError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageAssertionError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageAssertionError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.CustomMessageEqualityAssertion", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion$.html", "members_object" : [{"label" : "fromSession", "tail" : "(s: Session, key: SessionKey)(transformSessionValue: (Session, String) â‡’ Either[CornichonError, (A, A, (A) â‡’ String)])(arg0: Eq[A]): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CustomMessageEqualityAssertion.fromSession", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion$.html#fromSession[A](s:com.github.agourlay.cornichon.core.Session,key:com.github.agourlay.cornichon.core.SessionKey)(transformSessionValue:(com.github.agourlay.cornichon.core.Session,String)=>Either[com.github.agourlay.cornichon.core.CornichonError,(A,A,A=>String)])(implicitevidence$8:cats.Eq[A]):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "assertionError", "tail" : ": CustomMessageAssertionError[A]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CustomMessageEqualityAssertion.assertionError", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion.html#assertionError:com.github.agourlay.cornichon.steps.regular.assertStep.CustomMessageAssertionError[A]", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CustomMessageEqualityAssertion#<init>", "error" : "unsupported entity"}, {"label" : "negate", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CustomMessageEqualityAssertion.negate", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion.html#negate:Boolean", "kind" : "val"}, {"label" : "customMessage", "tail" : ": (A) â‡’ String", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CustomMessageEqualityAssertion.customMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion.html#customMessage:A=>String", "kind" : "val"}, {"label" : "actual", "tail" : ": A", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CustomMessageEqualityAssertion.actual", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion.html#actual:A", "kind" : "val"}, {"label" : "expected", "tail" : ": A", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.CustomMessageEqualityAssertion.expected", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion.html#expected:A", "kind" : "val"}, {"label" : "validated", "tail" : ": ValidatedNel[CornichonError, Done]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.EqualityAssertion.validated", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion.html#validated:cats.data.ValidatedNel[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Done]", "kind" : "val"}, {"label" : "expectedEqualsActual", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.EqualityAssertion.expectedEqualsActual", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion.html#expectedEqualsActual:Boolean", "kind" : "val"}, {"label" : "or", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.or", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion.html#or(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "andAll", "tail" : "(others: Seq[Assertion]): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.andAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion.html#andAll(others:Seq[com.github.agourlay.cornichon.steps.regular.assertStep.Assertion]):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "and", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.and", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion.html#and(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/CustomMessageEqualityAssertion.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.Diff", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "diff", "tail" : "(left: A, right: A): Option[String]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Diff.diff", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff.html#diff(left:A,right:A):Option[String]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html", "members_object" : [{"label" : "intFloat", "tail" : ": Diff[Float]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Diff.intFloat", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#intFloat:com.github.agourlay.cornichon.steps.regular.assertStep.Diff[Float]", "kind" : "implicit val"}, {"label" : "longDiff", "tail" : ": Diff[Long]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Diff.longDiff", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#longDiff:com.github.agourlay.cornichon.steps.regular.assertStep.Diff[Long]", "kind" : "implicit val"}, {"label" : "doubleDiff", "tail" : ": Diff[Double]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Diff.doubleDiff", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#doubleDiff:com.github.agourlay.cornichon.steps.regular.assertStep.Diff[Double]", "kind" : "implicit val"}, {"label" : "intDiff", "tail" : ": Diff[Int]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Diff.intDiff", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#intDiff:com.github.agourlay.cornichon.steps.regular.assertStep.Diff[Int]", "kind" : "implicit val"}, {"label" : "immutableSetDiff", "tail" : "(arg0: Show[A]): Diff[Set[A]]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Diff.immutableSetDiff", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#immutableSetDiff[A](implicitevidence$7:cats.Show[A]):com.github.agourlay.cornichon.steps.regular.assertStep.Diff[Set[A]]", "kind" : "implicit def"}, {"label" : "arrayDiff", "tail" : "(arg0: Show[A]): Diff[Array[A]]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Diff.arrayDiff", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#arrayDiff[A](implicitevidence$6:cats.Show[A]):com.github.agourlay.cornichon.steps.regular.assertStep.Diff[Array[A]]", "kind" : "implicit def"}, {"label" : "vectorDiff", "tail" : "(arg0: Show[A]): Diff[Vector[A]]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Diff.vectorDiff", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#vectorDiff[A](implicitevidence$5:cats.Show[A]):com.github.agourlay.cornichon.steps.regular.assertStep.Diff[Vector[A]]", "kind" : "implicit def"}, {"label" : "listDiff", "tail" : "(arg0: Show[A]): Diff[List[A]]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Diff.listDiff", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#listDiff[A](implicitevidence$4:cats.Show[A]):com.github.agourlay.cornichon.steps.regular.assertStep.Diff[List[A]]", "kind" : "implicit def"}, {"label" : "seqDiff", "tail" : "(arg0: Show[A]): Diff[Seq[A]]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Diff.seqDiff", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#seqDiff[A](implicitevidence$3:cats.Show[A]):com.github.agourlay.cornichon.steps.regular.assertStep.Diff[Seq[A]]", "kind" : "implicit def"}, {"label" : "notOrderedCollectionDiff", "tail" : "(left: Set[A], right: Set[A])(arg0: Show[A]): String", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Diff.notOrderedCollectionDiff", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#notOrderedCollectionDiff[A](left:Set[A],right:Set[A])(implicitevidence$2:cats.Show[A]):String", "kind" : "def"}, {"label" : "orderedCollectionDiff", "tail" : "(left: Seq[A], right: Seq[A])(arg0: Show[A]): String", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Diff.orderedCollectionDiff", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#orderedCollectionDiff[A](left:Seq[A],right:Seq[A])(implicitevidence$1:cats.Show[A]):String", "kind" : "def"}, {"label" : "booleanDiff", "tail" : ": Diff[Boolean]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Diff.booleanDiff", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#booleanDiff:com.github.agourlay.cornichon.steps.regular.assertStep.Diff[Boolean]", "kind" : "implicit val"}, {"label" : "stringDiff", "tail" : ": Diff[String]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Diff.stringDiff", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#stringDiff:com.github.agourlay.cornichon.steps.regular.assertStep.Diff[String]", "kind" : "implicit val"}, {"label" : "jsonDiff", "tail" : ": Diff[Json]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Diff.jsonDiff", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#jsonDiff:com.github.agourlay.cornichon.steps.regular.assertStep.Diff[io.circe.Json]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(diff: Diff[A]): Diff[A]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Diff.apply", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#apply[A](implicitdiff:com.github.agourlay.cornichon.steps.regular.assertStep.Diff[A]):com.github.agourlay.cornichon.steps.regular.assertStep.Diff[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/Diff.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.EqualityAssertion", "shortDescription" : "", "members_class" : [{"label" : "validated", "tail" : ": ValidatedNel[CornichonError, Done]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.EqualityAssertion.validated", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html#validated:cats.data.ValidatedNel[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Done]", "kind" : "val"}, {"label" : "expectedEqualsActual", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.EqualityAssertion.expectedEqualsActual", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html#expectedEqualsActual:Boolean", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.steps.regular.assertStep.EqualityAssertion#<init>", "error" : "unsupported entity"}, {"label" : "or", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.or", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html#or(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "andAll", "tail" : "(others: Seq[Assertion]): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.andAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html#andAll(others:Seq[com.github.agourlay.cornichon.steps.regular.assertStep.Assertion]):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "and", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.and", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html#and(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "assertionError", "tail" : ": CornichonError", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.EqualityAssertion.assertionError", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html#assertionError:com.github.agourlay.cornichon.core.CornichonError", "kind" : "abstract val"}, {"label" : "negate", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.EqualityAssertion.negate", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html#negate:Boolean", "kind" : "abstract val"}, {"label" : "actual", "tail" : ": A", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.EqualityAssertion.actual", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html#actual:A", "kind" : "abstract val"}, {"label" : "expected", "tail" : ": A", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.EqualityAssertion.expected", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html#expected:A", "kind" : "abstract val"}], "class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/EqualityAssertion.html", "kind" : "class"}, {"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.GenericEqualityAssertion", "shortDescription" : "", "members_case class" : [{"label" : "assertionError", "tail" : ": GenericEqualityAssertionError[A]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.GenericEqualityAssertion.assertionError", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertion.html#assertionError:com.github.agourlay.cornichon.steps.regular.assertStep.GenericEqualityAssertionError[A]", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.steps.regular.assertStep.GenericEqualityAssertion#<init>", "error" : "unsupported entity"}, {"label" : "negate", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.GenericEqualityAssertion.negate", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertion.html#negate:Boolean", "kind" : "val"}, {"label" : "actual", "tail" : ": A", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.GenericEqualityAssertion.actual", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertion.html#actual:A", "kind" : "val"}, {"label" : "expected", "tail" : ": A", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.GenericEqualityAssertion.expected", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertion.html#expected:A", "kind" : "val"}, {"label" : "validated", "tail" : ": ValidatedNel[CornichonError, Done]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.EqualityAssertion.validated", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertion.html#validated:cats.data.ValidatedNel[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Done]", "kind" : "val"}, {"label" : "expectedEqualsActual", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.EqualityAssertion.expectedEqualsActual", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertion.html#expectedEqualsActual:Boolean", "kind" : "val"}, {"label" : "or", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.or", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertion.html#or(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "andAll", "tail" : "(others: Seq[Assertion]): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.andAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertion.html#andAll(others:Seq[com.github.agourlay.cornichon.steps.regular.assertStep.Assertion]):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "and", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.and", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertion.html#and(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertion.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertion.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertion.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.GenericEqualityAssertionError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.GenericEqualityAssertionError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertionError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.steps.regular.assertStep.GenericEqualityAssertionError#<init>", "error" : "unsupported entity"}, {"label" : "negate", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.GenericEqualityAssertionError.negate", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertionError.html#negate:Boolean", "kind" : "val"}, {"label" : "actual", "tail" : ": A", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.GenericEqualityAssertionError.actual", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertionError.html#actual:A", "kind" : "val"}, {"label" : "expected", "tail" : ": A", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.GenericEqualityAssertionError.expected", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertionError.html#expected:A", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertionError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertionError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertionError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertionError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertionError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertionError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertionError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertionError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertionError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertionError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertionError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertionError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertionError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertionError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertionError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertionError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertionError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertionError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertionError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GenericEqualityAssertionError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.GreaterThanAssertion", "shortDescription" : "", "members_case class" : [{"label" : "validated", "tail" : ": ValidatedNel[CornichonError, Done]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.GreaterThanAssertion.validated", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertion.html#validated:cats.data.ValidatedNel[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Done]", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.steps.regular.assertStep.GreaterThanAssertion#<init>", "error" : "unsupported entity"}, {"label" : "right", "tail" : ": A", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.GreaterThanAssertion.right", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertion.html#right:A", "kind" : "val"}, {"label" : "left", "tail" : ": A", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.GreaterThanAssertion.left", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertion.html#left:A", "kind" : "val"}, {"label" : "or", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.or", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertion.html#or(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "andAll", "tail" : "(others: Seq[Assertion]): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.andAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertion.html#andAll(others:Seq[com.github.agourlay.cornichon.steps.regular.assertStep.Assertion]):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "and", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.and", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertion.html#and(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertion.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertion.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertion.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.GreaterThanAssertionError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.GreaterThanAssertionError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertionError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.steps.regular.assertStep.GreaterThanAssertionError#<init>", "error" : "unsupported entity"}, {"label" : "right", "tail" : ": A", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.GreaterThanAssertionError.right", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertionError.html#right:A", "kind" : "val"}, {"label" : "left", "tail" : ": A", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.GreaterThanAssertionError.left", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertionError.html#left:A", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertionError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertionError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertionError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertionError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertionError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertionError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertionError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertionError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertionError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertionError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertionError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertionError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertionError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertionError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertionError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertionError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertionError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertionError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertionError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/GreaterThanAssertionError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.LessThanAssertion", "shortDescription" : "", "members_case class" : [{"label" : "validated", "tail" : ": ValidatedNel[CornichonError, Done]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.LessThanAssertion.validated", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertion.html#validated:cats.data.ValidatedNel[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Done]", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.steps.regular.assertStep.LessThanAssertion#<init>", "error" : "unsupported entity"}, {"label" : "right", "tail" : ": A", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.LessThanAssertion.right", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertion.html#right:A", "kind" : "val"}, {"label" : "left", "tail" : ": A", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.LessThanAssertion.left", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertion.html#left:A", "kind" : "val"}, {"label" : "or", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.or", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertion.html#or(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "andAll", "tail" : "(others: Seq[Assertion]): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.andAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertion.html#andAll(others:Seq[com.github.agourlay.cornichon.steps.regular.assertStep.Assertion]):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "and", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.and", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertion.html#and(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertion.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertion.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertion.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.LessThanAssertionError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.LessThanAssertionError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertionError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.steps.regular.assertStep.LessThanAssertionError#<init>", "error" : "unsupported entity"}, {"label" : "right", "tail" : ": A", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.LessThanAssertionError.right", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertionError.html#right:A", "kind" : "val"}, {"label" : "left", "tail" : ": A", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.LessThanAssertionError.left", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertionError.html#left:A", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertionError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertionError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertionError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertionError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertionError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertionError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertionError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertionError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertionError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertionError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertionError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertionError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertionError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertionError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertionError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertionError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertionError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertionError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertionError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/LessThanAssertionError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.OrderAssertion", "shortDescription" : "", "members_class" : [{"member" : "com.github.agourlay.cornichon.steps.regular.assertStep.OrderAssertion#<init>", "error" : "unsupported entity"}, {"label" : "or", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.or", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/OrderAssertion.html#or(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "andAll", "tail" : "(others: Seq[Assertion]): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.andAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/OrderAssertion.html#andAll(others:Seq[com.github.agourlay.cornichon.steps.regular.assertStep.Assertion]):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "and", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.and", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/OrderAssertion.html#and(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/OrderAssertion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/OrderAssertion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/OrderAssertion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/OrderAssertion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/OrderAssertion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/OrderAssertion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/OrderAssertion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/OrderAssertion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/OrderAssertion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/OrderAssertion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/OrderAssertion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/OrderAssertion.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/OrderAssertion.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/OrderAssertion.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/OrderAssertion.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/OrderAssertion.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/OrderAssertion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/OrderAssertion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/OrderAssertion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "validated", "tail" : "(): ValidatedNel[CornichonError, Done]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.validated", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/OrderAssertion.html#validated:cats.data.ValidatedNel[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Done]", "kind" : "abstract def"}], "class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/OrderAssertion.html", "kind" : "class"}, {"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.RegexAssertion", "shortDescription" : "", "members_case class" : [{"label" : "validated", "tail" : ": ValidatedNel[CornichonError, Done]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.RegexAssertion.validated", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertion.html#validated:cats.data.ValidatedNel[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Done]", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.steps.regular.assertStep.RegexAssertion#<init>", "error" : "unsupported entity"}, {"label" : "expectedRegex", "tail" : ": Regex", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.RegexAssertion.expectedRegex", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertion.html#expectedRegex:scala.util.matching.Regex", "kind" : "val"}, {"label" : "input", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.RegexAssertion.input", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertion.html#input:String", "kind" : "val"}, {"label" : "or", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.or", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertion.html#or(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "andAll", "tail" : "(others: Seq[Assertion]): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.andAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertion.html#andAll(others:Seq[com.github.agourlay.cornichon.steps.regular.assertStep.Assertion]):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "and", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.and", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertion.html#and(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertion.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertion.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertion.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.RegexAssertionError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.RegexAssertionError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertionError.html#baseErrorMessage:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.steps.regular.assertStep.RegexAssertionError#<init>", "error" : "unsupported entity"}, {"label" : "expectedRegex", "tail" : ": Regex", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.RegexAssertionError.expectedRegex", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertionError.html#expectedRegex:scala.util.matching.Regex", "kind" : "val"}, {"label" : "input", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.RegexAssertionError.input", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertionError.html#input:String", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertionError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertionError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertionError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertionError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertionError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertionError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertionError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertionError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertionError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertionError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertionError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertionError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertionError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertionError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertionError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertionError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertionError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertionError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertionError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/RegexAssertionError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.StringAssertion", "shortDescription" : "", "members_class" : [{"member" : "com.github.agourlay.cornichon.steps.regular.assertStep.StringAssertion#<init>", "error" : "unsupported entity"}, {"label" : "or", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.or", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringAssertion.html#or(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "andAll", "tail" : "(others: Seq[Assertion]): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.andAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringAssertion.html#andAll(others:Seq[com.github.agourlay.cornichon.steps.regular.assertStep.Assertion]):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "and", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.and", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringAssertion.html#and(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringAssertion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringAssertion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringAssertion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringAssertion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringAssertion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringAssertion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringAssertion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringAssertion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringAssertion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringAssertion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringAssertion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringAssertion.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringAssertion.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringAssertion.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringAssertion.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringAssertion.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringAssertion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringAssertion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringAssertion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "validated", "tail" : "(): ValidatedNel[CornichonError, Done]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.validated", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringAssertion.html#validated:cats.data.ValidatedNel[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Done]", "kind" : "abstract def"}], "class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringAssertion.html", "kind" : "class"}, {"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.StringContainsAssertion", "shortDescription" : "", "members_case class" : [{"label" : "validated", "tail" : ": ValidatedNel[CornichonError, Done]", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.StringContainsAssertion.validated", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertion.html#validated:cats.data.ValidatedNel[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Done]", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.steps.regular.assertStep.StringContainsAssertion#<init>", "error" : "unsupported entity"}, {"label" : "expectedPart", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.StringContainsAssertion.expectedPart", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertion.html#expectedPart:String", "kind" : "val"}, {"label" : "input", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.StringContainsAssertion.input", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertion.html#input:String", "kind" : "val"}, {"label" : "or", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.or", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertion.html#or(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "andAll", "tail" : "(others: Seq[Assertion]): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.andAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertion.html#andAll(others:Seq[com.github.agourlay.cornichon.steps.regular.assertStep.Assertion]):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "and", "tail" : "(other: Assertion): Assertion", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.Assertion.and", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertion.html#and(other:com.github.agourlay.cornichon.steps.regular.assertStep.Assertion):com.github.agourlay.cornichon.steps.regular.assertStep.Assertion", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertion.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertion.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertion.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.steps.regular.assertStep.StringContainsAssertionError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.StringContainsAssertionError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertionError.html#baseErrorMessage:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.steps.regular.assertStep.StringContainsAssertionError#<init>", "error" : "unsupported entity"}, {"label" : "expectedPart", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.StringContainsAssertionError.expectedPart", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertionError.html#expectedPart:String", "kind" : "val"}, {"label" : "input", "tail" : ": String", "member" : "com.github.agourlay.cornichon.steps.regular.assertStep.StringContainsAssertionError.input", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertionError.html#input:String", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertionError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertionError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertionError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertionError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertionError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertionError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertionError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertionError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertionError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertionError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertionError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertionError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertionError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertionError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertionError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertionError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertionError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertionError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertionError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/steps\/regular\/assertStep\/StringContainsAssertionError.html", "kind" : "case class"}], "com.github.agourlay.cornichon.http.server" : [{"name" : "com.github.agourlay.cornichon.http.server.HttpMockServerResource", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource$.html", "members_object" : [{"label" : "SessionKeys", "tail" : "", "member" : "com.github.agourlay.cornichon.http.server.HttpMockServerResource.SessionKeys", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource$.html#SessionKeys", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "requestsResults", "tail" : "(mockRequestHandler: MockServerRequestHandler): Session", "member" : "com.github.agourlay.cornichon.http.server.HttpMockServerResource.requestsResults", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource.html#requestsResults(mockRequestHandler:com.github.agourlay.cornichon.http.server.MockServerRequestHandler):com.github.agourlay.cornichon.core.Session", "kind" : "def"}, {"label" : "startResource", "tail" : "(): Task[ResourceHandle]", "member" : "com.github.agourlay.cornichon.http.server.HttpMockServerResource.startResource", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource.html#startResource():monix.eval.Task[com.github.agourlay.cornichon.dsl.ResourceHandle]", "kind" : "def"}, {"label" : "closingTitle", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.server.HttpMockServerResource.closingTitle", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource.html#closingTitle:String", "kind" : "val"}, {"label" : "openingTitle", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.server.HttpMockServerResource.openingTitle", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource.html#openingTitle:String", "kind" : "val"}, {"label" : "sessionTarget", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.server.HttpMockServerResource.sessionTarget", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource.html#sessionTarget:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.http.server.HttpMockServerResource#<init>", "error" : "unsupported entity"}, {"label" : "portRange", "tail" : ": Option[Range]", "member" : "com.github.agourlay.cornichon.http.server.HttpMockServerResource.portRange", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource.html#portRange:Option[Range]", "kind" : "val"}, {"label" : "label", "tail" : ": String", "member" : "com.github.agourlay.cornichon.http.server.HttpMockServerResource.label", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource.html#label:String", "kind" : "val"}, {"label" : "interface", "tail" : ": Option[String]", "member" : "com.github.agourlay.cornichon.http.server.HttpMockServerResource.interface", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource.html#interface:Option[String]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpMockServerResource.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.http.server.HttpServer", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpServer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpServer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpServer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpServer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpServer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpServer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpServer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpServer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpServer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpServer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpServer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpServer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpServer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpServer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpServer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpServer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpServer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpServer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpServer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "startServer", "tail" : "(): Future[(String, CloseableResource)]", "member" : "com.github.agourlay.cornichon.http.server.HttpServer.startServer", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpServer.html#startServer():scala.concurrent.Future[(String,com.github.agourlay.cornichon.dsl.CloseableResource)]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/github\/agourlay\/cornichon\/http\/server\/HttpServer.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.http.server.MockHttpServer", "shortDescription" : "", "members_class" : [{"label" : "startServer", "tail" : "(): Future[(String, CloseableResource)]", "member" : "com.github.agourlay.cornichon.http.server.MockHttpServer.startServer", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServer.html#startServer():scala.concurrent.Future[(String,com.github.agourlay.cornichon.dsl.CloseableResource)]", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.http.server.MockHttpServer#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServer.html", "kind" : "class"}, {"name" : "com.github.agourlay.cornichon.http.server.MockHttpServerError", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServerError$.html", "members_object" : [{"label" : "baseErrorMessage", "tail" : "(): String", "member" : "com.github.agourlay.cornichon.http.server.MockHttpServerError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServerError$.html#baseErrorMessage:String", "kind" : "def"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServerError$.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServerError$.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServerError$.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServerError$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServerError$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServerError$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServerError$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServerError$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServerError$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServerError$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServerError$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServerError$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServerError$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServerError$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServerError$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServerError$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServerError$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServerError$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServerError$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockHttpServerError$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.agourlay.cornichon.http.server.MockServerRequestHandler", "shortDescription" : "", "members_class" : [{"label" : "saveRequest", "tail" : "(rawReq: Request): Task[Boolean]", "member" : "com.github.agourlay.cornichon.http.server.MockServerRequestHandler.saveRequest", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerRequestHandler.html#saveRequest(rawReq:org.http4s.Request):fs2.Task[Boolean]", "kind" : "def"}, {"label" : "httpMethodMapper", "tail" : "(method: Method): HttpMethod", "member" : "com.github.agourlay.cornichon.http.server.MockServerRequestHandler.httpMethodMapper", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerRequestHandler.html#httpMethodMapper(method:org.http4s.Method):com.github.agourlay.cornichon.http.HttpMethod", "kind" : "def"}, {"label" : "replyWithDelay", "tail" : "(t: Task[Response]): Task[Response]", "member" : "com.github.agourlay.cornichon.http.server.MockServerRequestHandler.replyWithDelay", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerRequestHandler.html#replyWithDelay(t:fs2.Task[org.http4s.Response]):fs2.Task[org.http4s.Response]", "kind" : "def"}, {"label" : "mockService", "tail" : ": org.http4s.HttpService", "member" : "com.github.agourlay.cornichon.http.server.MockServerRequestHandler.mockService", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerRequestHandler.html#mockService:org.http4s.HttpService", "kind" : "val"}, {"label" : "fetchRecordedRequestsAsJson", "tail" : "(): Vector[Json]", "member" : "com.github.agourlay.cornichon.http.server.MockServerRequestHandler.fetchRecordedRequestsAsJson", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerRequestHandler.html#fetchRecordedRequestsAsJson():scala.collection.immutable.Vector[io.circe.Json]", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.http.server.MockServerRequestHandler#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerRequestHandler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerRequestHandler.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerRequestHandler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerRequestHandler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerRequestHandler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerRequestHandler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerRequestHandler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerRequestHandler.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerRequestHandler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerRequestHandler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerRequestHandler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerRequestHandler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerRequestHandler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerRequestHandler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerRequestHandler.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerRequestHandler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerRequestHandler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerRequestHandler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerRequestHandler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerRequestHandler.html", "kind" : "class"}, {"name" : "com.github.agourlay.cornichon.http.server.MockServerStateHolder", "shortDescription" : "", "members_class" : [{"label" : "getDelay", "tail" : "(): Long", "member" : "com.github.agourlay.cornichon.http.server.MockServerStateHolder.getDelay", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#getDelay:Long", "kind" : "def"}, {"label" : "setDelay", "tail" : "(newDelay: Long): Unit", "member" : "com.github.agourlay.cornichon.http.server.MockServerStateHolder.setDelay", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#setDelay(newDelay:Long):Unit", "kind" : "def"}, {"label" : "getResponse", "tail" : "(): String", "member" : "com.github.agourlay.cornichon.http.server.MockServerStateHolder.getResponse", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#getResponse:String", "kind" : "def"}, {"label" : "setResponse", "tail" : "(newResponse: String): Unit", "member" : "com.github.agourlay.cornichon.http.server.MockServerStateHolder.setResponse", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#setResponse(newResponse:String):Unit", "kind" : "def"}, {"label" : "getBadRequestMode", "tail" : "(): Boolean", "member" : "com.github.agourlay.cornichon.http.server.MockServerStateHolder.getBadRequestMode", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#getBadRequestMode:Boolean", "kind" : "def"}, {"label" : "toggleBadRequestMode", "tail" : "(): Unit", "member" : "com.github.agourlay.cornichon.http.server.MockServerStateHolder.toggleBadRequestMode", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#toggleBadRequestMode():Unit", "kind" : "def"}, {"label" : "getErrorMode", "tail" : "(): Boolean", "member" : "com.github.agourlay.cornichon.http.server.MockServerStateHolder.getErrorMode", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#getErrorMode:Boolean", "kind" : "def"}, {"label" : "toggleErrorMode", "tail" : "(): Unit", "member" : "com.github.agourlay.cornichon.http.server.MockServerStateHolder.toggleErrorMode", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#toggleErrorMode():Unit", "kind" : "def"}, {"label" : "clearRegisteredRequest", "tail" : "(): Unit", "member" : "com.github.agourlay.cornichon.http.server.MockServerStateHolder.clearRegisteredRequest", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#clearRegisteredRequest():Unit", "kind" : "def"}, {"label" : "registerRequest", "tail" : "(req: HttpRequest[String]): Boolean", "member" : "com.github.agourlay.cornichon.http.server.MockServerStateHolder.registerRequest", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#registerRequest(req:com.github.agourlay.cornichon.http.HttpRequest[String]):Boolean", "kind" : "def"}, {"label" : "getReceivedRequest", "tail" : "(): Vector[HttpRequest[String]]", "member" : "com.github.agourlay.cornichon.http.server.MockServerStateHolder.getReceivedRequest", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#getReceivedRequest:Vector[com.github.agourlay.cornichon.http.HttpRequest[String]]", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.http.server.MockServerStateHolder#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/github\/agourlay\/cornichon\/http\/server\/MockServerStateHolder.html", "kind" : "class"}], "com.github.agourlay.cornichon.experimental.sbtinterface" : [{"name" : "com.github.agourlay.cornichon.experimental.sbtinterface.CornichonFingerprint", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFingerprint$.html", "members_object" : [{"label" : "requireNoArgConstructor", "tail" : "(): Boolean", "member" : "com.github.agourlay.cornichon.experimental.sbtinterface.CornichonFingerprint.requireNoArgConstructor", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFingerprint$.html#requireNoArgConstructor():Boolean", "kind" : "def"}, {"label" : "superclassName", "tail" : "(): String", "member" : "com.github.agourlay.cornichon.experimental.sbtinterface.CornichonFingerprint.superclassName", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFingerprint$.html#superclassName():String", "kind" : "def"}, {"label" : "isModule", "tail" : "(): Boolean", "member" : "com.github.agourlay.cornichon.experimental.sbtinterface.CornichonFingerprint.isModule", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFingerprint$.html#isModule():Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFingerprint$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFingerprint$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFingerprint$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFingerprint$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFingerprint$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFingerprint$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFingerprint$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFingerprint$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFingerprint$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFingerprint$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFingerprint$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFingerprint$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFingerprint$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFingerprint$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFingerprint$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFingerprint$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFingerprint$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFingerprint$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFingerprint$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.agourlay.cornichon.experimental.sbtinterface.CornichonFramework", "shortDescription" : "", "members_class" : [{"label" : "name", "tail" : "(): String", "member" : "com.github.agourlay.cornichon.experimental.sbtinterface.CornichonFramework.name", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFramework.html#name():String", "kind" : "def"}, {"label" : "runner", "tail" : "(args: Array[String], remoteArgs: Array[String], testClassLoader: ClassLoader): Runner", "member" : "com.github.agourlay.cornichon.experimental.sbtinterface.CornichonFramework.runner", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFramework.html#runner(args:Array[String],remoteArgs:Array[String],testClassLoader:ClassLoader):sbt.testing.Runner", "kind" : "def"}, {"label" : "fingerprints", "tail" : "(): Array[Fingerprint]", "member" : "com.github.agourlay.cornichon.experimental.sbtinterface.CornichonFramework.fingerprints", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFramework.html#fingerprints():Array[sbt.testing.Fingerprint]", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.experimental.sbtinterface.CornichonFramework#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFramework.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFramework.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFramework.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFramework.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFramework.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFramework.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFramework.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFramework.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFramework.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFramework.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFramework.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFramework.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFramework.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFramework.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFramework.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFramework.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFramework.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFramework.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFramework.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonFramework.html", "kind" : "class"}, {"name" : "com.github.agourlay.cornichon.experimental.sbtinterface.CornichonRunner", "shortDescription" : "", "members_class" : [{"label" : "done", "tail" : "(): String", "member" : "com.github.agourlay.cornichon.experimental.sbtinterface.CornichonRunner.done", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonRunner.html#done():String", "kind" : "def"}, {"label" : "tasks", "tail" : "(taskDefs: Array[TaskDef]): Array[Task]", "member" : "com.github.agourlay.cornichon.experimental.sbtinterface.CornichonRunner.tasks", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonRunner.html#tasks(taskDefs:Array[sbt.testing.TaskDef]):Array[sbt.testing.Task]", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.experimental.sbtinterface.CornichonRunner#<init>", "error" : "unsupported entity"}, {"label" : "remoteArgs", "tail" : ": Array[String]", "member" : "com.github.agourlay.cornichon.experimental.sbtinterface.CornichonRunner.remoteArgs", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonRunner.html#remoteArgs:Array[String]", "kind" : "val"}, {"label" : "args", "tail" : ": Array[String]", "member" : "com.github.agourlay.cornichon.experimental.sbtinterface.CornichonRunner.args", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonRunner.html#args:Array[String]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonRunner.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonRunner.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonRunner.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonRunner.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonRunner.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonRunner.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonRunner.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonRunner.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonRunner.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonRunner.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonRunner.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonRunner.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonRunner.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonRunner.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonRunner.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonRunner.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonRunner.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonRunner.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonRunner.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/CornichonRunner.html", "kind" : "class"}, {"name" : "com.github.agourlay.cornichon.experimental.sbtinterface.SbtCornichonTask", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask$.html", "members_class" : [{"label" : "failureEventBuilder", "tail" : "(exception: Throwable): Event { ... \/* 6 definitions in type refinement *\/ }", "member" : "com.github.agourlay.cornichon.experimental.sbtinterface.SbtCornichonTask.failureEventBuilder", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#failureEventBuilder(exception:Throwable):sbt.testing.Event{valstatus:sbt.testing.Status;valthrowable:sbt.testing.OptionalThrowable;valfullyQualifiedName:String;valselector:sbt.testing.Selector;valfingerprint:sbt.testing.Fingerprint;valduration:Long}", "kind" : "def"}, {"label" : "eventBuilder", "tail" : "(sr: ScenarioReport, durationInMillis: Long): Event { ... \/* 6 definitions in type refinement *\/ }", "member" : "com.github.agourlay.cornichon.experimental.sbtinterface.SbtCornichonTask.eventBuilder", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#eventBuilder(sr:com.github.agourlay.cornichon.core.ScenarioReport,durationInMillis:Long):sbt.testing.Event{valstatus:sbt.testing.Status;valthrowable:sbt.testing.OptionalThrowable;valfullyQualifiedName:String;valselector:sbt.testing.Selector;valfingerprint:sbt.testing.Fingerprint;valduration:Long}", "kind" : "def"}, {"label" : "failureErrorMessage", "tail" : "(featureClass: Class[_], scenarioName: String): String", "member" : "com.github.agourlay.cornichon.experimental.sbtinterface.SbtCornichonTask.failureErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#failureErrorMessage(featureClass:Class[_],scenarioName:String):String", "kind" : "def"}, {"label" : "printResultLogs", "tail" : "(featureClass: Class[_])(sr: ScenarioReport): Unit", "member" : "com.github.agourlay.cornichon.experimental.sbtinterface.SbtCornichonTask.printResultLogs", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#printResultLogs(featureClass:Class[_])(sr:com.github.agourlay.cornichon.core.ScenarioReport):Unit", "kind" : "def"}, {"label" : "runScenario", "tail" : "(feature: BaseFeature, eventHandler: EventHandler)(s: Scenario): Future[ScenarioReport]", "member" : "com.github.agourlay.cornichon.experimental.sbtinterface.SbtCornichonTask.runScenario", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#runScenario(feature:com.github.agourlay.cornichon.feature.BaseFeature,eventHandler:sbt.testing.EventHandler)(s:com.github.agourlay.cornichon.core.Scenario):scala.concurrent.Future[com.github.agourlay.cornichon.core.ScenarioReport]", "kind" : "def"}, {"label" : "replayCommand", "tail" : "(featureClass: Class[_], scenarioName: String): String", "member" : "com.github.agourlay.cornichon.experimental.sbtinterface.SbtCornichonTask.replayCommand", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#replayCommand(featureClass:Class[_],scenarioName:String):String", "kind" : "def"}, {"label" : "filterScenarios", "tail" : "(feature: FeatureDef): List[Scenario]", "member" : "com.github.agourlay.cornichon.experimental.sbtinterface.SbtCornichonTask.filterScenarios", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#filterScenarios(feature:com.github.agourlay.cornichon.core.FeatureDef):List[com.github.agourlay.cornichon.core.Scenario]", "kind" : "def"}, {"label" : "executeFeature", "tail" : "(eventHandler: EventHandler): Future[Done]", "member" : "com.github.agourlay.cornichon.experimental.sbtinterface.SbtCornichonTask.executeFeature", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#executeFeature(eventHandler:sbt.testing.EventHandler):scala.concurrent.Future[com.github.agourlay.cornichon.core.Done]", "kind" : "def"}, {"label" : "execute", "tail" : "(eventHandler: EventHandler, loggers: Array[Logger]): Array[Task]", "member" : "com.github.agourlay.cornichon.experimental.sbtinterface.SbtCornichonTask.execute", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#execute(eventHandler:sbt.testing.EventHandler,loggers:Array[sbt.testing.Logger]):Array[sbt.testing.Task]", "kind" : "def"}, {"label" : "taskDef", "tail" : "(): TaskDef", "member" : "com.github.agourlay.cornichon.experimental.sbtinterface.SbtCornichonTask.taskDef", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#taskDef():sbt.testing.TaskDef", "kind" : "def"}, {"label" : "tags", "tail" : "(): Array[String]", "member" : "com.github.agourlay.cornichon.experimental.sbtinterface.SbtCornichonTask.tags", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#tags():Array[String]", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.experimental.sbtinterface.SbtCornichonTask#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "emptyScenarioReportsF", "tail" : ": Future[List[ScenarioReport]]", "member" : "com.github.agourlay.cornichon.experimental.sbtinterface.SbtCornichonTask.emptyScenarioReportsF", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask$.html#emptyScenarioReportsF:scala.concurrent.Future[List[com.github.agourlay.cornichon.core.ScenarioReport]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/github\/agourlay\/cornichon\/experimental\/sbtinterface\/SbtCornichonTask.html", "kind" : "class"}], "com.github.agourlay.cornichon.http.steps" : [{"name" : "com.github.agourlay.cornichon.http.steps.HeadersSteps", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/http\/steps\/HeadersSteps$.html", "members_object" : [{"label" : "headersContainFieldWithNameError", "tail" : "(name: String, sourceHeaders: Seq[(String, String)]): (Boolean) â‡’ String", "member" : "com.github.agourlay.cornichon.http.steps.HeadersSteps.headersContainFieldWithNameError", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HeadersSteps$.html#headersContainFieldWithNameError(name:String,sourceHeaders:Seq[(String,String)]):Boolean=>String", "kind" : "def"}, {"label" : "headersDoesNotContainFieldWithNameError", "tail" : "(name: String, sourceHeaders: Seq[(String, String)]): (Boolean) â‡’ String", "member" : "com.github.agourlay.cornichon.http.steps.HeadersSteps.headersDoesNotContainFieldWithNameError", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HeadersSteps$.html#headersDoesNotContainFieldWithNameError(name:String,sourceHeaders:Seq[(String,String)]):Boolean=>String", "kind" : "def"}, {"label" : "headersDoesNotContainError", "tail" : "(expected: String, sourceArray: String): (Boolean) â‡’ String", "member" : "com.github.agourlay.cornichon.http.steps.HeadersSteps.headersDoesNotContainError", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HeadersSteps$.html#headersDoesNotContainError(expected:String,sourceArray:String):Boolean=>String", "kind" : "def"}, {"label" : "HeadersNameStepBuilder", "tail" : "", "member" : "com.github.agourlay.cornichon.http.steps.HeadersSteps.HeadersNameStepBuilder", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HeadersSteps$.html#HeadersNameStepBuilderextendsProductwithSerializable", "kind" : "case class"}, {"label" : "HeadersStepBuilder", "tail" : "", "member" : "com.github.agourlay.cornichon.http.steps.HeadersSteps.HeadersStepBuilder", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HeadersSteps$.html#HeadersStepBuilderextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HeadersSteps$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HeadersSteps$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HeadersSteps$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HeadersSteps$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HeadersSteps$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HeadersSteps$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HeadersSteps$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HeadersSteps$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HeadersSteps$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HeadersSteps$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HeadersSteps$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HeadersSteps$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HeadersSteps$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HeadersSteps$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HeadersSteps$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HeadersSteps$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HeadersSteps$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HeadersSteps$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HeadersSteps$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.agourlay.cornichon.http.steps.HttpListenSteps", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/http\/steps\/HttpListenSteps$.html", "members_object" : [{"label" : "HttpListenStepBuilder", "tail" : "", "member" : "com.github.agourlay.cornichon.http.steps.HttpListenSteps.HttpListenStepBuilder", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HttpListenSteps$.html#HttpListenStepBuilderextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HttpListenSteps$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HttpListenSteps$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HttpListenSteps$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HttpListenSteps$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HttpListenSteps$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HttpListenSteps$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HttpListenSteps$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HttpListenSteps$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HttpListenSteps$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HttpListenSteps$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HttpListenSteps$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HttpListenSteps$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HttpListenSteps$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HttpListenSteps$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HttpListenSteps$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HttpListenSteps$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HttpListenSteps$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HttpListenSteps$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/HttpListenSteps$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "com.github.agourlay.cornichon.http.steps.StatusSteps", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/http\/steps\/StatusSteps$.html", "members_object" : [{"label" : "statusKindError", "tail" : "(expectedKind: Int, actualStatus: Int, body: String): (Int) â‡’ String", "member" : "com.github.agourlay.cornichon.http.steps.StatusSteps.statusKindError", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/StatusSteps$.html#statusKindError(expectedKind:Int,actualStatus:Int,body:String):Int=>String", "kind" : "def"}, {"label" : "statusError", "tail" : "(expected: Int, body: String): (Int) â‡’ String", "member" : "com.github.agourlay.cornichon.http.steps.StatusSteps.statusError", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/StatusSteps$.html#statusError(expected:Int,body:String):Int=>String", "kind" : "def"}, {"label" : "withResponseBody", "tail" : "(body: String): String", "member" : "com.github.agourlay.cornichon.http.steps.StatusSteps.withResponseBody", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/StatusSteps$.html#withResponseBody(body:String):String", "kind" : "def"}, {"label" : "StatusStepBuilder", "tail" : "", "member" : "com.github.agourlay.cornichon.http.steps.StatusSteps.StatusStepBuilder", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/StatusSteps$.html#StatusStepBuilder", "kind" : "object"}, {"label" : "StatusKind", "tail" : "", "member" : "com.github.agourlay.cornichon.http.steps.StatusSteps.StatusKind", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/StatusSteps$.html#StatusKind", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/StatusSteps$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/StatusSteps$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/StatusSteps$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/StatusSteps$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/StatusSteps$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/StatusSteps$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/StatusSteps$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/StatusSteps$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/StatusSteps$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/StatusSteps$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/StatusSteps$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/StatusSteps$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/StatusSteps$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/StatusSteps$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/StatusSteps$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/StatusSteps$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/StatusSteps$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/StatusSteps$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/http\/steps\/StatusSteps$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "com" : [], "com.github.agourlay.cornichon.core" : [{"name" : "com.github.agourlay.cornichon.core.BasicError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.BasicError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/core\/BasicError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.core.BasicError#<init>", "error" : "unsupported entity"}, {"label" : "error", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.BasicError.error", "link" : "com\/github\/agourlay\/cornichon\/core\/BasicError.html#error:String", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/core\/BasicError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/core\/BasicError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/core\/BasicError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/BasicError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/BasicError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/BasicError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/BasicError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/BasicError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/BasicError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/BasicError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/BasicError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/BasicError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/BasicError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/BasicError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/BasicError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/BasicError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/BasicError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/BasicError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/BasicError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/core\/BasicError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.core.Config", "shortDescription" : "", "members_case class" : [{"member" : "com.github.agourlay.cornichon.core.Config#<init>", "error" : "unsupported entity"}, {"label" : "addAcceptGzipByDefault", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.core.Config.addAcceptGzipByDefault", "link" : "com\/github\/agourlay\/cornichon\/core\/Config.html#addAcceptGzipByDefault:Boolean", "kind" : "val"}, {"label" : "failOnDuplicateHeaders", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.core.Config.failOnDuplicateHeaders", "link" : "com\/github\/agourlay\/cornichon\/core\/Config.html#failOnDuplicateHeaders:Boolean", "kind" : "val"}, {"label" : "warnOnDuplicateHeaders", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.core.Config.warnOnDuplicateHeaders", "link" : "com\/github\/agourlay\/cornichon\/core\/Config.html#warnOnDuplicateHeaders:Boolean", "kind" : "val"}, {"label" : "useExperimentalHttp4sClient", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.core.Config.useExperimentalHttp4sClient", "link" : "com\/github\/agourlay\/cornichon\/core\/Config.html#useExperimentalHttp4sClient:Boolean", "kind" : "val"}, {"label" : "traceRequests", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.core.Config.traceRequests", "link" : "com\/github\/agourlay\/cornichon\/core\/Config.html#traceRequests:Boolean", "kind" : "val"}, {"label" : "baseUrl", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.Config.baseUrl", "link" : "com\/github\/agourlay\/cornichon\/core\/Config.html#baseUrl:String", "kind" : "val"}, {"label" : "requestTimeout", "tail" : ": FiniteDuration", "member" : "com.github.agourlay.cornichon.core.Config.requestTimeout", "link" : "com\/github\/agourlay\/cornichon\/core\/Config.html#requestTimeout:scala.concurrent.duration.FiniteDuration", "kind" : "val"}, {"label" : "executeScenariosInParallel", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.core.Config.executeScenariosInParallel", "link" : "com\/github\/agourlay\/cornichon\/core\/Config.html#executeScenariosInParallel:Boolean", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/Config.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/Config.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/Config.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/Config.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/Config.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/Config.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/Config.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/Config.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/Config.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/Config.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/Config.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/Config.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/Config.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/Config.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/Config.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/Config.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/core\/Config.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.core.CornichonError", "members_trait" : [{"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "baseErrorMessage", "tail" : "(): String", "member" : "com.github.agourlay.cornichon.core.CornichonError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError.html#baseErrorMessage:String", "kind" : "abstract def"}], "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/core\/CornichonError$.html", "members_object" : [{"label" : "fromEither", "tail" : "", "member" : "com.github.agourlay.cornichon.core.CornichonError.fromEither", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError$.html#fromEither[A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "catchThrowable", "tail" : "(f: â‡’ A): Either[CornichonError, A]", "member" : "com.github.agourlay.cornichon.core.CornichonError.catchThrowable", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError$.html#catchThrowable[A](f:=>A):Either[com.github.agourlay.cornichon.core.CornichonError,A]", "kind" : "def"}, {"label" : "fromThrowable", "tail" : "(exception: Throwable): CornichonError", "member" : "com.github.agourlay.cornichon.core.CornichonError.fromThrowable", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError$.html#fromThrowable(exception:Throwable):com.github.agourlay.cornichon.core.CornichonError", "kind" : "def"}, {"label" : "genStacktrace", "tail" : "(exception: Throwable): String", "member" : "com.github.agourlay.cornichon.core.CornichonError.genStacktrace", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError$.html#genStacktrace(exception:Throwable):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonError$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/github\/agourlay\/cornichon\/core\/CornichonError.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.core.CornichonException", "shortDescription" : "", "members_case class" : [{"label" : "getMessage", "tail" : "(): String", "member" : "com.github.agourlay.cornichon.core.CornichonException.getMessage", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#getMessage():String", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.core.CornichonException#<init>", "error" : "unsupported entity"}, {"label" : "m", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonException.m", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#m:String", "kind" : "val"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "scala.util.control.NoStackTrace.fillInStackTrace", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/core\/CornichonException.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.core.DebugLogInstruction", "shortDescription" : "", "members_case class" : [{"label" : "colorized", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.DebugLogInstruction.colorized", "link" : "com\/github\/agourlay\/cornichon\/core\/DebugLogInstruction.html#colorized:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.core.DebugLogInstruction#<init>", "error" : "unsupported entity"}, {"label" : "duration", "tail" : ": Option[Duration]", "member" : "com.github.agourlay.cornichon.core.DebugLogInstruction.duration", "link" : "com\/github\/agourlay\/cornichon\/core\/DebugLogInstruction.html#duration:Option[scala.concurrent.duration.Duration]", "kind" : "val"}, {"label" : "marginNb", "tail" : ": Int", "member" : "com.github.agourlay.cornichon.core.DebugLogInstruction.marginNb", "link" : "com\/github\/agourlay\/cornichon\/core\/DebugLogInstruction.html#marginNb:Int", "kind" : "val"}, {"label" : "message", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.DebugLogInstruction.message", "link" : "com\/github\/agourlay\/cornichon\/core\/DebugLogInstruction.html#message:String", "kind" : "val"}, {"label" : "completeMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.LogInstruction.completeMessage", "link" : "com\/github\/agourlay\/cornichon\/core\/DebugLogInstruction.html#completeMessage:String", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/DebugLogInstruction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/DebugLogInstruction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/DebugLogInstruction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/DebugLogInstruction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/DebugLogInstruction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/DebugLogInstruction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/DebugLogInstruction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/DebugLogInstruction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/DebugLogInstruction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/DebugLogInstruction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/DebugLogInstruction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/DebugLogInstruction.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/DebugLogInstruction.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/DebugLogInstruction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/DebugLogInstruction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/DebugLogInstruction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/core\/DebugLogInstruction.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.core.Done", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/core\/Done$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/Done.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/Done.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/Done.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/Done.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/Done.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/Done.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/Done.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/Done.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/Done.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/Done.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/Done.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/Done.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/core\/Done.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/Done.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/core\/Done.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/core\/Done.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/Done.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/Done.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/Done.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "monoid", "tail" : ": Monoid[Done]", "member" : "com.github.agourlay.cornichon.core.Done.monoid", "link" : "com\/github\/agourlay\/cornichon\/core\/Done$.html#monoid:cats.kernel.Monoid[com.github.agourlay.cornichon.core.Done]", "kind" : "implicit val"}, {"label" : "futureDone", "tail" : ": Future[Done.type]", "member" : "com.github.agourlay.cornichon.core.Done.futureDone", "link" : "com\/github\/agourlay\/cornichon\/core\/Done$.html#futureDone:scala.concurrent.Future[com.github.agourlay.cornichon.core.Done.type]", "kind" : "val"}, {"label" : "validDone", "tail" : ": Valid[Done.type]", "member" : "com.github.agourlay.cornichon.core.Done.validDone", "link" : "com\/github\/agourlay\/cornichon\/core\/Done$.html#validDone:cats.data.Validated.Valid[com.github.agourlay.cornichon.core.Done.type]", "kind" : "val"}, {"label" : "rightDone", "tail" : ": Right[Nothing, Done.type]", "member" : "com.github.agourlay.cornichon.core.Done.rightDone", "link" : "com\/github\/agourlay\/cornichon\/core\/Done$.html#rightDone:scala.util.Right[Nothing,com.github.agourlay.cornichon.core.Done.type]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/Done$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/Done$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/Done$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/Done$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/Done$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/Done$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/Done$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/Done$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/Done$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/Done$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/Done$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/Done$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/Done$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/core\/Done$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/Done$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/Done$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/Done$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/github\/agourlay\/cornichon\/core\/Done.html", "kind" : "class"}, {"name" : "com.github.agourlay.cornichon.core.EmptyKey", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.EmptyKey.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/core\/EmptyKey.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.core.EmptyKey#<init>", "error" : "unsupported entity"}, {"label" : "s", "tail" : ": Session", "member" : "com.github.agourlay.cornichon.core.EmptyKey.s", "link" : "com\/github\/agourlay\/cornichon\/core\/EmptyKey.html#s:com.github.agourlay.cornichon.core.Session", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/core\/EmptyKey.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/core\/EmptyKey.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/core\/EmptyKey.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/EmptyKey.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/EmptyKey.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/EmptyKey.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/EmptyKey.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/EmptyKey.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/EmptyKey.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/EmptyKey.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/EmptyKey.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/EmptyKey.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/EmptyKey.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/EmptyKey.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/EmptyKey.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/EmptyKey.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/EmptyKey.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/EmptyKey.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/EmptyKey.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/core\/EmptyKey.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.core.Engine", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html", "members_class" : [{"label" : "runSteps", "tail" : "(remainingSteps: List[Step], initialRunState: RunState): Task[(RunState, Either[FailedStep, Done])]", "member" : "com.github.agourlay.cornichon.core.Engine.runSteps", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine.html#runSteps(remainingSteps:List[com.github.agourlay.cornichon.core.Step],initialRunState:com.github.agourlay.cornichon.core.RunState):monix.eval.Task[(com.github.agourlay.cornichon.core.RunState,Either[com.github.agourlay.cornichon.core.FailedStep,com.github.agourlay.cornichon.core.Done])]", "kind" : "def"}, {"label" : "runScenarioTask", "tail" : "(session: Session, context: FeatureExecutionContext)(scenario: Scenario): Task[ScenarioReport]", "member" : "com.github.agourlay.cornichon.core.Engine.runScenarioTask", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine.html#runScenarioTask(session:com.github.agourlay.cornichon.core.Session,context:com.github.agourlay.cornichon.core.FeatureExecutionContext)(scenario:com.github.agourlay.cornichon.core.Scenario):monix.eval.Task[com.github.agourlay.cornichon.core.ScenarioReport]", "kind" : "def"}, {"label" : "runScenario", "tail" : "(session: Session, context: FeatureExecutionContext)(scenario: Scenario): Future[ScenarioReport]", "member" : "com.github.agourlay.cornichon.core.Engine.runScenario", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine.html#runScenario(session:com.github.agourlay.cornichon.core.Session,context:com.github.agourlay.cornichon.core.FeatureExecutionContext)(scenario:com.github.agourlay.cornichon.core.Scenario):scala.concurrent.Future[com.github.agourlay.cornichon.core.ScenarioReport]", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.core.Engine#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "errorLogs", "tail" : "(title: String, errors: NonEmptyList[CornichonError], depth: Int): Vector[FailureLogInstruction]", "member" : "com.github.agourlay.cornichon.core.Engine.errorLogs", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#errorLogs(title:String,errors:cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError],depth:Int):Vector[com.github.agourlay.cornichon.core.FailureLogInstruction]", "kind" : "def"}, {"label" : "handleThrowable", "tail" : "(currentStep: Step, runState: RunState, error: Throwable): (RunState, Either[FailedStep, Done])", "member" : "com.github.agourlay.cornichon.core.Engine.handleThrowable", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#handleThrowable(currentStep:com.github.agourlay.cornichon.core.Step,runState:com.github.agourlay.cornichon.core.RunState,error:Throwable):(com.github.agourlay.cornichon.core.RunState,Either[com.github.agourlay.cornichon.core.FailedStep,com.github.agourlay.cornichon.core.Done])", "kind" : "def"}, {"label" : "handleErrors", "tail" : "(currentStep: Step, runState: RunState, errors: NonEmptyList[CornichonError]): (RunState, Either[FailedStep, Done])", "member" : "com.github.agourlay.cornichon.core.Engine.handleErrors", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#handleErrors(currentStep:com.github.agourlay.cornichon.core.Step,runState:com.github.agourlay.cornichon.core.RunState,errors:cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]):(com.github.agourlay.cornichon.core.RunState,Either[com.github.agourlay.cornichon.core.FailedStep,com.github.agourlay.cornichon.core.Done])", "kind" : "def"}, {"label" : "errorsToFailureStep", "tail" : "(currentStep: Step, depth: Int, errors: NonEmptyList[CornichonError]): (Vector[LogInstruction], FailedStep)", "member" : "com.github.agourlay.cornichon.core.Engine.errorsToFailureStep", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#errorsToFailureStep(currentStep:com.github.agourlay.cornichon.core.Step,depth:Int,errors:cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]):(Vector[com.github.agourlay.cornichon.core.LogInstruction],com.github.agourlay.cornichon.core.FailedStep)", "kind" : "def"}, {"label" : "successLog", "tail" : "(title: String, depth: Int, show: Boolean, duration: Duration): Option[SuccessLogInstruction]", "member" : "com.github.agourlay.cornichon.core.Engine.successLog", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#successLog(title:String,depth:Int,show:Boolean,duration:scala.concurrent.duration.Duration):Option[com.github.agourlay.cornichon.core.SuccessLogInstruction]", "kind" : "def"}, {"label" : "withStepTitleResolver", "tail" : "(resolver: PlaceholderResolver)(scheduler: Scheduler): Engine", "member" : "com.github.agourlay.cornichon.core.Engine.withStepTitleResolver", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#withStepTitleResolver(resolver:com.github.agourlay.cornichon.resolver.PlaceholderResolver)(implicitscheduler:monix.execution.Scheduler):com.github.agourlay.cornichon.core.Engine", "kind" : "def"}, {"label" : "noOpStage", "tail" : ": Task[(RunState, Valid[Done.type])]", "member" : "com.github.agourlay.cornichon.core.Engine.noOpStage", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#noOpStage:monix.eval.Task[(com.github.agourlay.cornichon.core.RunState,cats.data.Validated.Valid[com.github.agourlay.cornichon.core.Done.type])]", "kind" : "val"}, {"label" : "cleanupLog", "tail" : ": InfoLogInstruction", "member" : "com.github.agourlay.cornichon.core.Engine.cleanupLog", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#cleanupLog:com.github.agourlay.cornichon.core.InfoLogInstruction", "kind" : "val"}, {"label" : "finallyLog", "tail" : ": InfoLogInstruction", "member" : "com.github.agourlay.cornichon.core.Engine.finallyLog", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#finallyLog:com.github.agourlay.cornichon.core.InfoLogInstruction", "kind" : "val"}, {"label" : "mainLog", "tail" : ": InfoLogInstruction", "member" : "com.github.agourlay.cornichon.core.Engine.mainLog", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#mainLog:com.github.agourlay.cornichon.core.InfoLogInstruction", "kind" : "val"}, {"label" : "beforeLog", "tail" : ": InfoLogInstruction", "member" : "com.github.agourlay.cornichon.core.Engine.beforeLog", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#beforeLog:com.github.agourlay.cornichon.core.InfoLogInstruction", "kind" : "val"}, {"label" : "initMargin", "tail" : ": Int", "member" : "com.github.agourlay.cornichon.core.Engine.initMargin", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#initMargin:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/Engine$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/github\/agourlay\/cornichon\/core\/Engine.html", "kind" : "class"}, {"name" : "com.github.agourlay.cornichon.core.FailedStep", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/core\/FailedStep$.html", "members_object" : [{"label" : "fromSingle", "tail" : "(step: Step, error: CornichonError): FailedStep", "member" : "com.github.agourlay.cornichon.core.FailedStep.fromSingle", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep$.html#fromSingle(step:com.github.agourlay.cornichon.core.Step,error:com.github.agourlay.cornichon.core.CornichonError):com.github.agourlay.cornichon.core.FailedStep", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "messageForFailedStep", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.FailedStep.messageForFailedStep", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep.html#messageForFailedStep:String", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.core.FailedStep#<init>", "error" : "unsupported entity"}, {"label" : "errors", "tail" : ": NonEmptyList[CornichonError]", "member" : "com.github.agourlay.cornichon.core.FailedStep.errors", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep.html#errors:cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]", "kind" : "val"}, {"label" : "step", "tail" : ": Step", "member" : "com.github.agourlay.cornichon.core.FailedStep.step", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep.html#step:com.github.agourlay.cornichon.core.Step", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/FailedStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/core\/FailedStep.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.core.FailureLogInstruction", "shortDescription" : "", "members_case class" : [{"label" : "colorized", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.FailureLogInstruction.colorized", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureLogInstruction.html#colorized:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.core.FailureLogInstruction#<init>", "error" : "unsupported entity"}, {"label" : "duration", "tail" : ": Option[Duration]", "member" : "com.github.agourlay.cornichon.core.FailureLogInstruction.duration", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureLogInstruction.html#duration:Option[scala.concurrent.duration.Duration]", "kind" : "val"}, {"label" : "marginNb", "tail" : ": Int", "member" : "com.github.agourlay.cornichon.core.FailureLogInstruction.marginNb", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureLogInstruction.html#marginNb:Int", "kind" : "val"}, {"label" : "message", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.FailureLogInstruction.message", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureLogInstruction.html#message:String", "kind" : "val"}, {"label" : "completeMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.LogInstruction.completeMessage", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureLogInstruction.html#completeMessage:String", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureLogInstruction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureLogInstruction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureLogInstruction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureLogInstruction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureLogInstruction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureLogInstruction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureLogInstruction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureLogInstruction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureLogInstruction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureLogInstruction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureLogInstruction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureLogInstruction.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureLogInstruction.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureLogInstruction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureLogInstruction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureLogInstruction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/core\/FailureLogInstruction.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.core.FailureScenarioReport", "shortDescription" : "", "members_case class" : [{"label" : "msg", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.FailureScenarioReport.msg", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureScenarioReport.html#msg:String", "kind" : "val"}, {"label" : "isSuccess", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.core.FailureScenarioReport.isSuccess", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureScenarioReport.html#isSuccess:Boolean", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.core.FailureScenarioReport#<init>", "error" : "unsupported entity"}, {"label" : "logs", "tail" : ": Vector[LogInstruction]", "member" : "com.github.agourlay.cornichon.core.FailureScenarioReport.logs", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureScenarioReport.html#logs:Vector[com.github.agourlay.cornichon.core.LogInstruction]", "kind" : "val"}, {"label" : "session", "tail" : ": Session", "member" : "com.github.agourlay.cornichon.core.FailureScenarioReport.session", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureScenarioReport.html#session:com.github.agourlay.cornichon.core.Session", "kind" : "val"}, {"label" : "failedSteps", "tail" : ": NonEmptyList[FailedStep]", "member" : "com.github.agourlay.cornichon.core.FailureScenarioReport.failedSteps", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureScenarioReport.html#failedSteps:cats.data.NonEmptyList[com.github.agourlay.cornichon.core.FailedStep]", "kind" : "val"}, {"label" : "scenarioName", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.FailureScenarioReport.scenarioName", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureScenarioReport.html#scenarioName:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureScenarioReport.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureScenarioReport.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureScenarioReport.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureScenarioReport.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureScenarioReport.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureScenarioReport.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureScenarioReport.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureScenarioReport.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureScenarioReport.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureScenarioReport.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureScenarioReport.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureScenarioReport.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureScenarioReport.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureScenarioReport.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureScenarioReport.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/FailureScenarioReport.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/core\/FailureScenarioReport.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.core.FeatureDef", "shortDescription" : "", "members_case class" : [{"label" : "focusedScenarios", "tail" : ": Set[String]", "member" : "com.github.agourlay.cornichon.core.FeatureDef.focusedScenarios", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureDef.html#focusedScenarios:scala.collection.immutable.Set[String]", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.core.FeatureDef#<init>", "error" : "unsupported entity"}, {"label" : "ignored", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.core.FeatureDef.ignored", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureDef.html#ignored:Boolean", "kind" : "val"}, {"label" : "scenarios", "tail" : ": List[Scenario]", "member" : "com.github.agourlay.cornichon.core.FeatureDef.scenarios", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureDef.html#scenarios:List[com.github.agourlay.cornichon.core.Scenario]", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.FeatureDef.name", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureDef.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureDef.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureDef.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureDef.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureDef.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureDef.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureDef.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureDef.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureDef.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureDef.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureDef.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureDef.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureDef.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureDef.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureDef.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureDef.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureDef.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/core\/FeatureDef.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.core.FeatureExecutionContext", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext$.html", "members_object" : [{"label" : "empty", "tail" : ": FeatureExecutionContext", "member" : "com.github.agourlay.cornichon.core.FeatureExecutionContext.empty", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext$.html#empty:com.github.agourlay.cornichon.core.FeatureExecutionContext", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "isPending", "tail" : "(scenario: Scenario): Boolean", "member" : "com.github.agourlay.cornichon.core.FeatureExecutionContext.isPending", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext.html#isPending(scenario:com.github.agourlay.cornichon.core.Scenario):Boolean", "kind" : "def"}, {"label" : "isIgnored", "tail" : "(scenario: Scenario): Boolean", "member" : "com.github.agourlay.cornichon.core.FeatureExecutionContext.isIgnored", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext.html#isIgnored(scenario:com.github.agourlay.cornichon.core.Scenario):Boolean", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.core.FeatureExecutionContext#<init>", "error" : "unsupported entity"}, {"label" : "focusedScenarios", "tail" : ": Set[String]", "member" : "com.github.agourlay.cornichon.core.FeatureExecutionContext.focusedScenarios", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext.html#focusedScenarios:Set[String]", "kind" : "val"}, {"label" : "featureIgnored", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.core.FeatureExecutionContext.featureIgnored", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext.html#featureIgnored:Boolean", "kind" : "val"}, {"label" : "finallySteps", "tail" : ": List[Step]", "member" : "com.github.agourlay.cornichon.core.FeatureExecutionContext.finallySteps", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext.html#finallySteps:List[com.github.agourlay.cornichon.core.Step]", "kind" : "val"}, {"label" : "beforeSteps", "tail" : ": List[Step]", "member" : "com.github.agourlay.cornichon.core.FeatureExecutionContext.beforeSteps", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext.html#beforeSteps:List[com.github.agourlay.cornichon.core.Step]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/core\/FeatureExecutionContext.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.core.IgnoreScenarioReport", "shortDescription" : "", "members_case class" : [{"label" : "isSuccess", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.core.IgnoreScenarioReport.isSuccess", "link" : "com\/github\/agourlay\/cornichon\/core\/IgnoreScenarioReport.html#isSuccess:Boolean", "kind" : "val"}, {"label" : "logs", "tail" : ": Vector[LogInstruction]", "member" : "com.github.agourlay.cornichon.core.IgnoreScenarioReport.logs", "link" : "com\/github\/agourlay\/cornichon\/core\/IgnoreScenarioReport.html#logs:scala.collection.immutable.Vector[com.github.agourlay.cornichon.core.LogInstruction]", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.core.IgnoreScenarioReport#<init>", "error" : "unsupported entity"}, {"label" : "session", "tail" : ": Session", "member" : "com.github.agourlay.cornichon.core.IgnoreScenarioReport.session", "link" : "com\/github\/agourlay\/cornichon\/core\/IgnoreScenarioReport.html#session:com.github.agourlay.cornichon.core.Session", "kind" : "val"}, {"label" : "scenarioName", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.IgnoreScenarioReport.scenarioName", "link" : "com\/github\/agourlay\/cornichon\/core\/IgnoreScenarioReport.html#scenarioName:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/IgnoreScenarioReport.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/IgnoreScenarioReport.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/IgnoreScenarioReport.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/IgnoreScenarioReport.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/IgnoreScenarioReport.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/IgnoreScenarioReport.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/IgnoreScenarioReport.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/IgnoreScenarioReport.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/IgnoreScenarioReport.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/IgnoreScenarioReport.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/IgnoreScenarioReport.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/IgnoreScenarioReport.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/IgnoreScenarioReport.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/IgnoreScenarioReport.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/IgnoreScenarioReport.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/IgnoreScenarioReport.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/core\/IgnoreScenarioReport.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.core.IllegalKey", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.IllegalKey.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/core\/IllegalKey.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.core.IllegalKey#<init>", "error" : "unsupported entity"}, {"label" : "key", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.IllegalKey.key", "link" : "com\/github\/agourlay\/cornichon\/core\/IllegalKey.html#key:String", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/core\/IllegalKey.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/core\/IllegalKey.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/core\/IllegalKey.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/IllegalKey.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/IllegalKey.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/IllegalKey.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/IllegalKey.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/IllegalKey.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/IllegalKey.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/IllegalKey.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/IllegalKey.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/IllegalKey.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/IllegalKey.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/IllegalKey.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/IllegalKey.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/IllegalKey.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/IllegalKey.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/IllegalKey.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/IllegalKey.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/core\/IllegalKey.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.core.IndiceNotFoundForKey", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.IndiceNotFoundForKey.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/core\/IndiceNotFoundForKey.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.core.IndiceNotFoundForKey#<init>", "error" : "unsupported entity"}, {"label" : "values", "tail" : ": Vector[String]", "member" : "com.github.agourlay.cornichon.core.IndiceNotFoundForKey.values", "link" : "com\/github\/agourlay\/cornichon\/core\/IndiceNotFoundForKey.html#values:Vector[String]", "kind" : "val"}, {"label" : "indice", "tail" : ": Int", "member" : "com.github.agourlay.cornichon.core.IndiceNotFoundForKey.indice", "link" : "com\/github\/agourlay\/cornichon\/core\/IndiceNotFoundForKey.html#indice:Int", "kind" : "val"}, {"label" : "key", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.IndiceNotFoundForKey.key", "link" : "com\/github\/agourlay\/cornichon\/core\/IndiceNotFoundForKey.html#key:String", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/core\/IndiceNotFoundForKey.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/core\/IndiceNotFoundForKey.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/core\/IndiceNotFoundForKey.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/IndiceNotFoundForKey.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/IndiceNotFoundForKey.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/IndiceNotFoundForKey.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/IndiceNotFoundForKey.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/IndiceNotFoundForKey.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/IndiceNotFoundForKey.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/IndiceNotFoundForKey.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/IndiceNotFoundForKey.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/IndiceNotFoundForKey.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/IndiceNotFoundForKey.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/IndiceNotFoundForKey.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/IndiceNotFoundForKey.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/IndiceNotFoundForKey.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/IndiceNotFoundForKey.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/IndiceNotFoundForKey.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/IndiceNotFoundForKey.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/core\/IndiceNotFoundForKey.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.core.InfoLogInstruction", "shortDescription" : "", "members_case class" : [{"label" : "colorized", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.InfoLogInstruction.colorized", "link" : "com\/github\/agourlay\/cornichon\/core\/InfoLogInstruction.html#colorized:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.core.InfoLogInstruction#<init>", "error" : "unsupported entity"}, {"label" : "duration", "tail" : ": Option[Duration]", "member" : "com.github.agourlay.cornichon.core.InfoLogInstruction.duration", "link" : "com\/github\/agourlay\/cornichon\/core\/InfoLogInstruction.html#duration:Option[scala.concurrent.duration.Duration]", "kind" : "val"}, {"label" : "marginNb", "tail" : ": Int", "member" : "com.github.agourlay.cornichon.core.InfoLogInstruction.marginNb", "link" : "com\/github\/agourlay\/cornichon\/core\/InfoLogInstruction.html#marginNb:Int", "kind" : "val"}, {"label" : "message", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.InfoLogInstruction.message", "link" : "com\/github\/agourlay\/cornichon\/core\/InfoLogInstruction.html#message:String", "kind" : "val"}, {"label" : "completeMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.LogInstruction.completeMessage", "link" : "com\/github\/agourlay\/cornichon\/core\/InfoLogInstruction.html#completeMessage:String", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/InfoLogInstruction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/InfoLogInstruction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/InfoLogInstruction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/InfoLogInstruction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/InfoLogInstruction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/InfoLogInstruction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/InfoLogInstruction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/InfoLogInstruction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/InfoLogInstruction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/InfoLogInstruction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/InfoLogInstruction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/InfoLogInstruction.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/InfoLogInstruction.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/InfoLogInstruction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/InfoLogInstruction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/InfoLogInstruction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/core\/InfoLogInstruction.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.core.LogDecoratorStep", "members_trait" : [{"label" : "successTitleLog", "tail" : "(depth: Int): SuccessLogInstruction", "member" : "com.github.agourlay.cornichon.core.LogDecoratorStep.successTitleLog", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html#successTitleLog(depth:Int):com.github.agourlay.cornichon.core.SuccessLogInstruction", "kind" : "def"}, {"label" : "failedTitleLog", "tail" : "(depth: Int): FailureLogInstruction", "member" : "com.github.agourlay.cornichon.core.LogDecoratorStep.failedTitleLog", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html#failedTitleLog(depth:Int):com.github.agourlay.cornichon.core.FailureLogInstruction", "kind" : "def"}, {"label" : "setTitle", "tail" : "(newTitle: String): LogDecoratorStep", "member" : "com.github.agourlay.cornichon.core.LogDecoratorStep.setTitle", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html#setTitle(newTitle:String):com.github.agourlay.cornichon.core.LogDecoratorStep", "kind" : "def"}, {"label" : "run", "tail" : "(engine: Engine)(initialRunState: RunState): Task[(RunState, Either[FailedStep, Done])]", "member" : "com.github.agourlay.cornichon.core.LogDecoratorStep.run", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html#run(engine:com.github.agourlay.cornichon.core.Engine)(initialRunState:com.github.agourlay.cornichon.core.RunState):monix.eval.Task[(com.github.agourlay.cornichon.core.RunState,Either[com.github.agourlay.cornichon.core.FailedStep,com.github.agourlay.cornichon.core.Done])]", "kind" : "def"}, {"label" : "chain", "tail" : "(others: (Session) â‡’ List[Step]): Step", "member" : "com.github.agourlay.cornichon.core.Step.chain", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html#chain(others:com.github.agourlay.cornichon.core.Session=>List[com.github.agourlay.cornichon.core.Step]):com.github.agourlay.cornichon.core.Step", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "onNestedSuccess", "tail" : "(resultLogs: Vector[LogInstruction], depth: Int, executionTime: Duration): Vector[LogInstruction]", "member" : "com.github.agourlay.cornichon.core.LogDecoratorStep.onNestedSuccess", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html#onNestedSuccess(resultLogs:Vector[com.github.agourlay.cornichon.core.LogInstruction],depth:Int,executionTime:scala.concurrent.duration.Duration):Vector[com.github.agourlay.cornichon.core.LogInstruction]", "kind" : "abstract def"}, {"label" : "onNestedError", "tail" : "(resultLogs: Vector[LogInstruction], depth: Int, executionTime: Duration): Vector[LogInstruction]", "member" : "com.github.agourlay.cornichon.core.LogDecoratorStep.onNestedError", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html#onNestedError(resultLogs:Vector[com.github.agourlay.cornichon.core.LogInstruction],depth:Int,executionTime:scala.concurrent.duration.Duration):Vector[com.github.agourlay.cornichon.core.LogInstruction]", "kind" : "abstract def"}, {"label" : "nestedToRun", "tail" : "(): List[Step]", "member" : "com.github.agourlay.cornichon.core.LogDecoratorStep.nestedToRun", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html#nestedToRun:List[com.github.agourlay.cornichon.core.Step]", "kind" : "abstract def"}, {"label" : "title", "tail" : "(): String", "member" : "com.github.agourlay.cornichon.core.Step.title", "link" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html#title:String", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/github\/agourlay\/cornichon\/core\/LogDecoratorStep.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.core.LogInstruction", "members_trait" : [{"label" : "completeMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.LogInstruction.completeMessage", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction.html#completeMessage:String", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "colorized", "tail" : "(): String", "member" : "com.github.agourlay.cornichon.core.LogInstruction.colorized", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction.html#colorized:String", "kind" : "abstract def"}, {"label" : "duration", "tail" : "(): Option[Duration]", "member" : "com.github.agourlay.cornichon.core.LogInstruction.duration", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction.html#duration:Option[scala.concurrent.duration.Duration]", "kind" : "abstract def"}, {"label" : "marginNb", "tail" : "(): Int", "member" : "com.github.agourlay.cornichon.core.LogInstruction.marginNb", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction.html#marginNb:Int", "kind" : "abstract def"}, {"label" : "message", "tail" : "(): String", "member" : "com.github.agourlay.cornichon.core.LogInstruction.message", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction.html#message:String", "kind" : "abstract def"}], "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction$.html", "members_object" : [{"label" : "printLogs", "tail" : "(logs: Seq[LogInstruction]): Unit", "member" : "com.github.agourlay.cornichon.core.LogInstruction.printLogs", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction$.html#printLogs(logs:Seq[com.github.agourlay.cornichon.core.LogInstruction]):Unit", "kind" : "def"}, {"label" : "physicalMargin", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.LogInstruction.physicalMargin", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction$.html#physicalMargin:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/github\/agourlay\/cornichon\/core\/LogInstruction.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.core.PendingScenarioReport", "shortDescription" : "", "members_case class" : [{"label" : "isSuccess", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.core.PendingScenarioReport.isSuccess", "link" : "com\/github\/agourlay\/cornichon\/core\/PendingScenarioReport.html#isSuccess:Boolean", "kind" : "val"}, {"label" : "logs", "tail" : ": Vector[LogInstruction]", "member" : "com.github.agourlay.cornichon.core.PendingScenarioReport.logs", "link" : "com\/github\/agourlay\/cornichon\/core\/PendingScenarioReport.html#logs:scala.collection.immutable.Vector[com.github.agourlay.cornichon.core.LogInstruction]", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.core.PendingScenarioReport#<init>", "error" : "unsupported entity"}, {"label" : "session", "tail" : ": Session", "member" : "com.github.agourlay.cornichon.core.PendingScenarioReport.session", "link" : "com\/github\/agourlay\/cornichon\/core\/PendingScenarioReport.html#session:com.github.agourlay.cornichon.core.Session", "kind" : "val"}, {"label" : "scenarioName", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.PendingScenarioReport.scenarioName", "link" : "com\/github\/agourlay\/cornichon\/core\/PendingScenarioReport.html#scenarioName:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/PendingScenarioReport.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/PendingScenarioReport.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/PendingScenarioReport.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/PendingScenarioReport.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/PendingScenarioReport.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/PendingScenarioReport.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/PendingScenarioReport.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/PendingScenarioReport.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/PendingScenarioReport.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/PendingScenarioReport.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/PendingScenarioReport.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/PendingScenarioReport.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/PendingScenarioReport.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/PendingScenarioReport.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/PendingScenarioReport.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/PendingScenarioReport.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/core\/PendingScenarioReport.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.core.RunState", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/core\/RunState$.html", "members_object" : [{"label" : "emptyRunState", "tail" : ": RunState", "member" : "com.github.agourlay.cornichon.core.RunState.emptyRunState", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState$.html#emptyRunState:com.github.agourlay.cornichon.core.RunState", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "mergeNested", "tail" : "(r: RunState, computationLogs: Vector[LogInstruction]): RunState", "member" : "com.github.agourlay.cornichon.core.RunState.mergeNested", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#mergeNested(r:com.github.agourlay.cornichon.core.RunState,computationLogs:Vector[com.github.agourlay.cornichon.core.LogInstruction]):com.github.agourlay.cornichon.core.RunState", "kind" : "def"}, {"label" : "mergeNested", "tail" : "(r: RunState): RunState", "member" : "com.github.agourlay.cornichon.core.RunState.mergeNested", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#mergeNested(r:com.github.agourlay.cornichon.core.RunState):com.github.agourlay.cornichon.core.RunState", "kind" : "def"}, {"label" : "resetCleanupSteps", "tail" : ": RunState", "member" : "com.github.agourlay.cornichon.core.RunState.resetCleanupSteps", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#resetCleanupSteps:com.github.agourlay.cornichon.core.RunState", "kind" : "lazy val"}, {"label" : "prependCleanupStepsFrom", "tail" : "(from: RunState): RunState", "member" : "com.github.agourlay.cornichon.core.RunState.prependCleanupStepsFrom", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#prependCleanupStepsFrom(from:com.github.agourlay.cornichon.core.RunState):com.github.agourlay.cornichon.core.RunState", "kind" : "def"}, {"label" : "prependCleanupSteps", "tail" : "(add: List[Step]): RunState", "member" : "com.github.agourlay.cornichon.core.RunState.prependCleanupSteps", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#prependCleanupSteps(add:List[com.github.agourlay.cornichon.core.Step]):com.github.agourlay.cornichon.core.RunState", "kind" : "def"}, {"label" : "prependCleanupStep", "tail" : "(add: Step): RunState", "member" : "com.github.agourlay.cornichon.core.RunState.prependCleanupStep", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#prependCleanupStep(add:com.github.agourlay.cornichon.core.Step):com.github.agourlay.cornichon.core.RunState", "kind" : "def"}, {"label" : "appendLog", "tail" : "(add: LogInstruction): RunState", "member" : "com.github.agourlay.cornichon.core.RunState.appendLog", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#appendLog(add:com.github.agourlay.cornichon.core.LogInstruction):com.github.agourlay.cornichon.core.RunState", "kind" : "def"}, {"label" : "appendLogsFrom", "tail" : "(from: RunState): RunState", "member" : "com.github.agourlay.cornichon.core.RunState.appendLogsFrom", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#appendLogsFrom(from:com.github.agourlay.cornichon.core.RunState):com.github.agourlay.cornichon.core.RunState", "kind" : "def"}, {"label" : "appendLogs", "tail" : "(add: Vector[LogInstruction]): RunState", "member" : "com.github.agourlay.cornichon.core.RunState.appendLogs", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#appendLogs(add:Vector[com.github.agourlay.cornichon.core.LogInstruction]):com.github.agourlay.cornichon.core.RunState", "kind" : "def"}, {"label" : "withLog", "tail" : "(log: LogInstruction): RunState", "member" : "com.github.agourlay.cornichon.core.RunState.withLog", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#withLog(log:com.github.agourlay.cornichon.core.LogInstruction):com.github.agourlay.cornichon.core.RunState", "kind" : "def"}, {"label" : "mergeSessions", "tail" : "(other: Session): RunState", "member" : "com.github.agourlay.cornichon.core.RunState.mergeSessions", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#mergeSessions(other:com.github.agourlay.cornichon.core.Session):com.github.agourlay.cornichon.core.RunState", "kind" : "def"}, {"label" : "addToSession", "tail" : "(key: String, value: String): RunState", "member" : "com.github.agourlay.cornichon.core.RunState.addToSession", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#addToSession(key:String,value:String):com.github.agourlay.cornichon.core.RunState", "kind" : "def"}, {"label" : "addToSession", "tail" : "(tuples: Seq[(String, String)]): RunState", "member" : "com.github.agourlay.cornichon.core.RunState.addToSession", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#addToSession(tuples:Seq[(String,String)]):com.github.agourlay.cornichon.core.RunState", "kind" : "def"}, {"label" : "withSession", "tail" : "(s: Session): RunState", "member" : "com.github.agourlay.cornichon.core.RunState.withSession", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#withSession(s:com.github.agourlay.cornichon.core.Session):com.github.agourlay.cornichon.core.RunState", "kind" : "def"}, {"label" : "sameLevelContext", "tail" : ": RunState", "member" : "com.github.agourlay.cornichon.core.RunState.sameLevelContext", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#sameLevelContext:com.github.agourlay.cornichon.core.RunState", "kind" : "lazy val"}, {"label" : "nestedContext", "tail" : ": RunState", "member" : "com.github.agourlay.cornichon.core.RunState.nestedContext", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#nestedContext:com.github.agourlay.cornichon.core.RunState", "kind" : "lazy val"}, {"label" : "resetLogs", "tail" : ": RunState", "member" : "com.github.agourlay.cornichon.core.RunState.resetLogs", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#resetLogs:com.github.agourlay.cornichon.core.RunState", "kind" : "lazy val"}, {"label" : "goDeeper", "tail" : ": RunState", "member" : "com.github.agourlay.cornichon.core.RunState.goDeeper", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#goDeeper:com.github.agourlay.cornichon.core.RunState", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.core.RunState#<init>", "error" : "unsupported entity"}, {"label" : "cleanupSteps", "tail" : ": List[Step]", "member" : "com.github.agourlay.cornichon.core.RunState.cleanupSteps", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#cleanupSteps:List[com.github.agourlay.cornichon.core.Step]", "kind" : "val"}, {"label" : "depth", "tail" : ": Int", "member" : "com.github.agourlay.cornichon.core.RunState.depth", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#depth:Int", "kind" : "val"}, {"label" : "logs", "tail" : ": Vector[LogInstruction]", "member" : "com.github.agourlay.cornichon.core.RunState.logs", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#logs:Vector[com.github.agourlay.cornichon.core.LogInstruction]", "kind" : "val"}, {"label" : "session", "tail" : ": Session", "member" : "com.github.agourlay.cornichon.core.RunState.session", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#session:com.github.agourlay.cornichon.core.Session", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/RunState.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/core\/RunState.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.core.Scenario", "shortDescription" : "", "members_case class" : [{"member" : "com.github.agourlay.cornichon.core.Scenario#<init>", "error" : "unsupported entity"}, {"label" : "focused", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.core.Scenario.focused", "link" : "com\/github\/agourlay\/cornichon\/core\/Scenario.html#focused:Boolean", "kind" : "val"}, {"label" : "pending", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.core.Scenario.pending", "link" : "com\/github\/agourlay\/cornichon\/core\/Scenario.html#pending:Boolean", "kind" : "val"}, {"label" : "ignored", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.core.Scenario.ignored", "link" : "com\/github\/agourlay\/cornichon\/core\/Scenario.html#ignored:Boolean", "kind" : "val"}, {"label" : "steps", "tail" : ": List[Step]", "member" : "com.github.agourlay.cornichon.core.Scenario.steps", "link" : "com\/github\/agourlay\/cornichon\/core\/Scenario.html#steps:List[com.github.agourlay.cornichon.core.Step]", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.Scenario.name", "link" : "com\/github\/agourlay\/cornichon\/core\/Scenario.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/Scenario.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/Scenario.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/Scenario.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/Scenario.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/Scenario.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/Scenario.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/Scenario.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/Scenario.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/Scenario.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/Scenario.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/Scenario.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/Scenario.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/Scenario.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/Scenario.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/Scenario.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/Scenario.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/core\/Scenario.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.core.ScenarioReport", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "logs", "tail" : "(): Vector[LogInstruction]", "member" : "com.github.agourlay.cornichon.core.ScenarioReport.logs", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport.html#logs:Vector[com.github.agourlay.cornichon.core.LogInstruction]", "kind" : "abstract def"}, {"label" : "session", "tail" : "(): Session", "member" : "com.github.agourlay.cornichon.core.ScenarioReport.session", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport.html#session:com.github.agourlay.cornichon.core.Session", "kind" : "abstract def"}, {"label" : "scenarioName", "tail" : "(): String", "member" : "com.github.agourlay.cornichon.core.ScenarioReport.scenarioName", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport.html#scenarioName:String", "kind" : "abstract def"}, {"label" : "isSuccess", "tail" : "(): Boolean", "member" : "com.github.agourlay.cornichon.core.ScenarioReport.isSuccess", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport.html#isSuccess:Boolean", "kind" : "abstract def"}], "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport$.html", "members_object" : [{"label" : "emptyLogs", "tail" : ": Vector[LogInstruction]", "member" : "com.github.agourlay.cornichon.core.ScenarioReport.emptyLogs", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport$.html#emptyLogs:scala.collection.immutable.Vector[com.github.agourlay.cornichon.core.LogInstruction]", "kind" : "val"}, {"label" : "build", "tail" : "(scenarioName: String, runState: RunState, result: ValidatedNel[FailedStep, Done]): ScenarioReport", "member" : "com.github.agourlay.cornichon.core.ScenarioReport.build", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport$.html#build(scenarioName:String,runState:com.github.agourlay.cornichon.core.RunState,result:cats.data.ValidatedNel[com.github.agourlay.cornichon.core.FailedStep,com.github.agourlay.cornichon.core.Done]):com.github.agourlay.cornichon.core.ScenarioReport", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "com\/github\/agourlay\/cornichon\/core\/ScenarioReport.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.core.ScenarioTitleLogInstruction", "shortDescription" : "", "members_case class" : [{"label" : "colorized", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.ScenarioTitleLogInstruction.colorized", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioTitleLogInstruction.html#colorized:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.core.ScenarioTitleLogInstruction#<init>", "error" : "unsupported entity"}, {"label" : "duration", "tail" : ": Option[Duration]", "member" : "com.github.agourlay.cornichon.core.ScenarioTitleLogInstruction.duration", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioTitleLogInstruction.html#duration:Option[scala.concurrent.duration.Duration]", "kind" : "val"}, {"label" : "marginNb", "tail" : ": Int", "member" : "com.github.agourlay.cornichon.core.ScenarioTitleLogInstruction.marginNb", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioTitleLogInstruction.html#marginNb:Int", "kind" : "val"}, {"label" : "message", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.ScenarioTitleLogInstruction.message", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioTitleLogInstruction.html#message:String", "kind" : "val"}, {"label" : "completeMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.LogInstruction.completeMessage", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioTitleLogInstruction.html#completeMessage:String", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioTitleLogInstruction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioTitleLogInstruction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioTitleLogInstruction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioTitleLogInstruction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioTitleLogInstruction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioTitleLogInstruction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioTitleLogInstruction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioTitleLogInstruction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioTitleLogInstruction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioTitleLogInstruction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioTitleLogInstruction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioTitleLogInstruction.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioTitleLogInstruction.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioTitleLogInstruction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioTitleLogInstruction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/ScenarioTitleLogInstruction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/core\/ScenarioTitleLogInstruction.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.core.Session", "shortDescription" : "", "object" : "com\/github\/agourlay\/cornichon\/core\/Session$.html", "members_object" : [{"label" : "KeyNotFoundInSession", "tail" : "", "member" : "com.github.agourlay.cornichon.core.Session.KeyNotFoundInSession", "link" : "com\/github\/agourlay\/cornichon\/core\/Session$.html#KeyNotFoundInSessionextendsCornichonErrorwithProductwithSerializable", "kind" : "case class"}, {"label" : "showSession", "tail" : ": Show[Session]", "member" : "com.github.agourlay.cornichon.core.Session.showSession", "link" : "com\/github\/agourlay\/cornichon\/core\/Session$.html#showSession:cats.Show[com.github.agourlay.cornichon.core.Session]", "kind" : "implicit val"}, {"label" : "monoidSession", "tail" : ": Monoid[Session]", "member" : "com.github.agourlay.cornichon.core.Session.monoidSession", "link" : "com\/github\/agourlay\/cornichon\/core\/Session$.html#monoidSession:cats.kernel.Monoid[com.github.agourlay.cornichon.core.Session]", "kind" : "implicit val"}, {"label" : "notAllowedInKey", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.Session.notAllowedInKey", "link" : "com\/github\/agourlay\/cornichon\/core\/Session$.html#notAllowedInKey:String", "kind" : "val"}, {"label" : "newEmpty", "tail" : ": Session", "member" : "com.github.agourlay.cornichon.core.Session.newEmpty", "link" : "com\/github\/agourlay\/cornichon\/core\/Session$.html#newEmpty:com.github.agourlay.cornichon.core.Session", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/Session$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/Session$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/Session$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/Session$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/Session$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/Session$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/Session$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/Session$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/Session$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/Session$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/Session$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/Session$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/core\/Session$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/Session$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/core\/Session$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/core\/Session$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/Session$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/Session$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/Session$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "rollbackKey", "tail" : "(key: String): Either[KeyNotFoundInSession, Session]", "member" : "com.github.agourlay.cornichon.core.Session.rollbackKey", "link" : "com\/github\/agourlay\/cornichon\/core\/Session.html#rollbackKey(key:String):scala.util.Either[com.github.agourlay.cornichon.core.Session.KeyNotFoundInSession,com.github.agourlay.cornichon.core.Session]", "kind" : "def"}, {"label" : "removeKey", "tail" : "(key: String): Session", "member" : "com.github.agourlay.cornichon.core.Session.removeKey", "link" : "com\/github\/agourlay\/cornichon\/core\/Session.html#removeKey(key:String):com.github.agourlay.cornichon.core.Session", "kind" : "def"}, {"label" : "addValuesUnsafe", "tail" : "(tuples: (String, String)*): Session", "member" : "com.github.agourlay.cornichon.core.Session.addValuesUnsafe", "link" : "com\/github\/agourlay\/cornichon\/core\/Session.html#addValuesUnsafe(tuples:(String,String)*):com.github.agourlay.cornichon.core.Session", "kind" : "def"}, {"label" : "addValues", "tail" : "(tuples: (String, String)*): Either[CornichonError, Session]", "member" : "com.github.agourlay.cornichon.core.Session.addValues", "link" : "com\/github\/agourlay\/cornichon\/core\/Session.html#addValues(tuples:(String,String)*):Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Session]", "kind" : "def"}, {"label" : "addValueUnsafe", "tail" : "(key: String, value: String): Session", "member" : "com.github.agourlay.cornichon.core.Session.addValueUnsafe", "link" : "com\/github\/agourlay\/cornichon\/core\/Session.html#addValueUnsafe(key:String,value:String):com.github.agourlay.cornichon.core.Session", "kind" : "def"}, {"label" : "addValue", "tail" : "(key: String, value: String): Either[CornichonError, Session]", "member" : "com.github.agourlay.cornichon.core.Session.addValue", "link" : "com\/github\/agourlay\/cornichon\/core\/Session.html#addValue(key:String,value:String):Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Session]", "kind" : "def"}, {"label" : "getHistory", "tail" : "(key: String): Either[KeyNotFoundInSession, Vector[String]]", "member" : "com.github.agourlay.cornichon.core.Session.getHistory", "link" : "com\/github\/agourlay\/cornichon\/core\/Session.html#getHistory(key:String):Either[com.github.agourlay.cornichon.core.Session.KeyNotFoundInSession,Vector[String]]", "kind" : "def"}, {"label" : "getList", "tail" : "(keys: Seq[String]): Either[CornichonError, List[String]]", "member" : "com.github.agourlay.cornichon.core.Session.getList", "link" : "com\/github\/agourlay\/cornichon\/core\/Session.html#getList(keys:Seq[String]):Either[com.github.agourlay.cornichon.core.CornichonError,List[String]]", "kind" : "def"}, {"label" : "get", "tail" : "(sessionKey: SessionKey): Either[CornichonError, String]", "member" : "com.github.agourlay.cornichon.core.Session.get", "link" : "com\/github\/agourlay\/cornichon\/core\/Session.html#get(sessionKey:com.github.agourlay.cornichon.core.SessionKey):Either[com.github.agourlay.cornichon.core.CornichonError,String]", "kind" : "def"}, {"label" : "get", "tail" : "(key: String, stackingIndice: Option[Int]): Either[CornichonError, String]", "member" : "com.github.agourlay.cornichon.core.Session.get", "link" : "com\/github\/agourlay\/cornichon\/core\/Session.html#get(key:String,stackingIndice:Option[Int]):Either[com.github.agourlay.cornichon.core.CornichonError,String]", "kind" : "def"}, {"label" : "getUnsafe", "tail" : "(key: String, stackingIndice: Option[Int]): String", "member" : "com.github.agourlay.cornichon.core.Session.getUnsafe", "link" : "com\/github\/agourlay\/cornichon\/core\/Session.html#getUnsafe(key:String,stackingIndice:Option[Int]):String", "kind" : "def"}, {"label" : "getOpt", "tail" : "(key: String, stackingIndice: Option[Int]): Option[String]", "member" : "com.github.agourlay.cornichon.core.Session.getOpt", "link" : "com\/github\/agourlay\/cornichon\/core\/Session.html#getOpt(key:String,stackingIndice:Option[Int]):Option[String]", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.core.Session#<init>", "error" : "unsupported entity"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/Session.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "com\/github\/agourlay\/cornichon\/core\/Session.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/Session.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/Session.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/Session.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "com\/github\/agourlay\/cornichon\/core\/Session.html#==(x$1:Any):Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/core\/Session.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.core.SessionKey", "shortDescription" : "", "members_case class" : [{"label" : "atIndex", "tail" : "(index: Int): SessionKey", "member" : "com.github.agourlay.cornichon.core.SessionKey.atIndex", "link" : "com\/github\/agourlay\/cornichon\/core\/SessionKey.html#atIndex(index:Int):com.github.agourlay.cornichon.core.SessionKey", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.core.SessionKey#<init>", "error" : "unsupported entity"}, {"label" : "index", "tail" : ": Option[Int]", "member" : "com.github.agourlay.cornichon.core.SessionKey.index", "link" : "com\/github\/agourlay\/cornichon\/core\/SessionKey.html#index:Option[Int]", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.SessionKey.name", "link" : "com\/github\/agourlay\/cornichon\/core\/SessionKey.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/SessionKey.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/SessionKey.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/SessionKey.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/SessionKey.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/SessionKey.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/SessionKey.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/SessionKey.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/SessionKey.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/SessionKey.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/SessionKey.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/SessionKey.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/SessionKey.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/SessionKey.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/SessionKey.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/SessionKey.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/SessionKey.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/core\/SessionKey.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.core.SimpleWrapperStep", "members_trait" : [{"label" : "successTitleLog", "tail" : "(depth: Int): SuccessLogInstruction", "member" : "com.github.agourlay.cornichon.core.SimpleWrapperStep.successTitleLog", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#successTitleLog(depth:Int):com.github.agourlay.cornichon.core.SuccessLogInstruction", "kind" : "def"}, {"label" : "failedTitleLog", "tail" : "(depth: Int): FailureLogInstruction", "member" : "com.github.agourlay.cornichon.core.SimpleWrapperStep.failedTitleLog", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#failedTitleLog(depth:Int):com.github.agourlay.cornichon.core.FailureLogInstruction", "kind" : "def"}, {"label" : "setTitle", "tail" : "(newTitle: String): SimpleWrapperStep", "member" : "com.github.agourlay.cornichon.core.SimpleWrapperStep.setTitle", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#setTitle(newTitle:String):com.github.agourlay.cornichon.core.SimpleWrapperStep", "kind" : "def"}, {"label" : "run", "tail" : "(engine: Engine)(initialRunState: RunState): Task[(RunState, Either[FailedStep, Done])]", "member" : "com.github.agourlay.cornichon.core.SimpleWrapperStep.run", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#run(engine:com.github.agourlay.cornichon.core.Engine)(initialRunState:com.github.agourlay.cornichon.core.RunState):monix.eval.Task[(com.github.agourlay.cornichon.core.RunState,Either[com.github.agourlay.cornichon.core.FailedStep,com.github.agourlay.cornichon.core.Done])]", "kind" : "def"}, {"label" : "indentLog", "tail" : "(): Boolean", "member" : "com.github.agourlay.cornichon.core.SimpleWrapperStep.indentLog", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#indentLog:Boolean", "kind" : "def"}, {"label" : "chain", "tail" : "(others: (Session) â‡’ List[Step]): Step", "member" : "com.github.agourlay.cornichon.core.Step.chain", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#chain(others:com.github.agourlay.cornichon.core.Session=>List[com.github.agourlay.cornichon.core.Step]):com.github.agourlay.cornichon.core.Step", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "onNestedSuccess", "tail" : "(resultRunState: RunState, initialRunState: RunState, executionTime: Duration): RunState", "member" : "com.github.agourlay.cornichon.core.SimpleWrapperStep.onNestedSuccess", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#onNestedSuccess(resultRunState:com.github.agourlay.cornichon.core.RunState,initialRunState:com.github.agourlay.cornichon.core.RunState,executionTime:scala.concurrent.duration.Duration):com.github.agourlay.cornichon.core.RunState", "kind" : "abstract def"}, {"label" : "onNestedError", "tail" : "(failedStep: FailedStep, resultRunState: RunState, initialRunState: RunState, executionTime: Duration): (RunState, FailedStep)", "member" : "com.github.agourlay.cornichon.core.SimpleWrapperStep.onNestedError", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#onNestedError(failedStep:com.github.agourlay.cornichon.core.FailedStep,resultRunState:com.github.agourlay.cornichon.core.RunState,initialRunState:com.github.agourlay.cornichon.core.RunState,executionTime:scala.concurrent.duration.Duration):(com.github.agourlay.cornichon.core.RunState,com.github.agourlay.cornichon.core.FailedStep)", "kind" : "abstract def"}, {"label" : "nestedToRun", "tail" : "(): List[Step]", "member" : "com.github.agourlay.cornichon.core.SimpleWrapperStep.nestedToRun", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#nestedToRun:List[com.github.agourlay.cornichon.core.Step]", "kind" : "abstract def"}, {"label" : "title", "tail" : "(): String", "member" : "com.github.agourlay.cornichon.core.Step.title", "link" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html#title:String", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/github\/agourlay\/cornichon\/core\/SimpleWrapperStep.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.core.Step", "members_trait" : [{"label" : "chain", "tail" : "(others: (Session) â‡’ List[Step]): Step", "member" : "com.github.agourlay.cornichon.core.Step.chain", "link" : "com\/github\/agourlay\/cornichon\/core\/Step.html#chain(others:com.github.agourlay.cornichon.core.Session=>List[com.github.agourlay.cornichon.core.Step]):com.github.agourlay.cornichon.core.Step", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/Step.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/Step.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/Step.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/Step.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/Step.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/Step.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/Step.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/Step.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/Step.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/Step.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/Step.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/Step.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/core\/Step.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/Step.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/core\/Step.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/core\/Step.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/Step.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/Step.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/Step.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "run", "tail" : "(engine: Engine)(initialRunState: RunState): Task[(RunState, Either[FailedStep, Done])]", "member" : "com.github.agourlay.cornichon.core.Step.run", "link" : "com\/github\/agourlay\/cornichon\/core\/Step.html#run(engine:com.github.agourlay.cornichon.core.Engine)(initialRunState:com.github.agourlay.cornichon.core.RunState):monix.eval.Task[(com.github.agourlay.cornichon.core.RunState,Either[com.github.agourlay.cornichon.core.FailedStep,com.github.agourlay.cornichon.core.Done])]", "kind" : "abstract def"}, {"label" : "setTitle", "tail" : "(newTitle: String): Step", "member" : "com.github.agourlay.cornichon.core.Step.setTitle", "link" : "com\/github\/agourlay\/cornichon\/core\/Step.html#setTitle(newTitle:String):com.github.agourlay.cornichon.core.Step", "kind" : "abstract def"}, {"label" : "title", "tail" : "(): String", "member" : "com.github.agourlay.cornichon.core.Step.title", "link" : "com\/github\/agourlay\/cornichon\/core\/Step.html#title:String", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/github\/agourlay\/cornichon\/core\/Step.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.core.StepExecutionError", "shortDescription" : "", "members_case class" : [{"label" : "baseErrorMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.StepExecutionError.baseErrorMessage", "link" : "com\/github\/agourlay\/cornichon\/core\/StepExecutionError.html#baseErrorMessage:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.core.StepExecutionError#<init>", "error" : "unsupported entity"}, {"label" : "e", "tail" : ": Throwable", "member" : "com.github.agourlay.cornichon.core.StepExecutionError.e", "link" : "com\/github\/agourlay\/cornichon\/core\/StepExecutionError.html#e:Throwable", "kind" : "val"}, {"label" : "toException", "tail" : "(): CornichonException", "member" : "com.github.agourlay.cornichon.core.CornichonError.toException", "link" : "com\/github\/agourlay\/cornichon\/core\/StepExecutionError.html#toException:com.github.agourlay.cornichon.core.CornichonException", "kind" : "def"}, {"label" : "renderedMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.CornichonError.renderedMessage", "link" : "com\/github\/agourlay\/cornichon\/core\/StepExecutionError.html#renderedMessage:String", "kind" : "lazy val"}, {"label" : "causedBy", "tail" : ": Option[NonEmptyList[CornichonError]]", "member" : "com.github.agourlay.cornichon.core.CornichonError.causedBy", "link" : "com\/github\/agourlay\/cornichon\/core\/StepExecutionError.html#causedBy:Option[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/StepExecutionError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/StepExecutionError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/StepExecutionError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/StepExecutionError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/StepExecutionError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/StepExecutionError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/StepExecutionError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/StepExecutionError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/StepExecutionError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/StepExecutionError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/StepExecutionError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/StepExecutionError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/StepExecutionError.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/StepExecutionError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/StepExecutionError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/StepExecutionError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/core\/StepExecutionError.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.core.StepPreparer", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "run", "tail" : "(session: Session)(step: Step): Either[CornichonError, Step]", "member" : "com.github.agourlay.cornichon.core.StepPreparer.run", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparer.html#run(session:com.github.agourlay.cornichon.core.Session)(step:com.github.agourlay.cornichon.core.Step):Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Step]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/github\/agourlay\/cornichon\/core\/StepPreparer.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.core.StepPreparerTitleResolver", "shortDescription" : "", "members_case class" : [{"label" : "run", "tail" : "(session: Session)(step: Step): Either[CornichonError, Step]", "member" : "com.github.agourlay.cornichon.core.StepPreparerTitleResolver.run", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparerTitleResolver.html#run(session:com.github.agourlay.cornichon.core.Session)(step:com.github.agourlay.cornichon.core.Step):scala.util.Either[com.github.agourlay.cornichon.core.CornichonError,com.github.agourlay.cornichon.core.Step]", "kind" : "def"}, {"member" : "com.github.agourlay.cornichon.core.StepPreparerTitleResolver#<init>", "error" : "unsupported entity"}, {"label" : "resolver", "tail" : ": PlaceholderResolver", "member" : "com.github.agourlay.cornichon.core.StepPreparerTitleResolver.resolver", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparerTitleResolver.html#resolver:com.github.agourlay.cornichon.resolver.PlaceholderResolver", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparerTitleResolver.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparerTitleResolver.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparerTitleResolver.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparerTitleResolver.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparerTitleResolver.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparerTitleResolver.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparerTitleResolver.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparerTitleResolver.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparerTitleResolver.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparerTitleResolver.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparerTitleResolver.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparerTitleResolver.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparerTitleResolver.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparerTitleResolver.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparerTitleResolver.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/StepPreparerTitleResolver.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/core\/StepPreparerTitleResolver.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.core.SuccessLogInstruction", "shortDescription" : "", "members_case class" : [{"label" : "colorized", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.SuccessLogInstruction.colorized", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessLogInstruction.html#colorized:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.core.SuccessLogInstruction#<init>", "error" : "unsupported entity"}, {"label" : "duration", "tail" : ": Option[Duration]", "member" : "com.github.agourlay.cornichon.core.SuccessLogInstruction.duration", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessLogInstruction.html#duration:Option[scala.concurrent.duration.Duration]", "kind" : "val"}, {"label" : "marginNb", "tail" : ": Int", "member" : "com.github.agourlay.cornichon.core.SuccessLogInstruction.marginNb", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessLogInstruction.html#marginNb:Int", "kind" : "val"}, {"label" : "message", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.SuccessLogInstruction.message", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessLogInstruction.html#message:String", "kind" : "val"}, {"label" : "completeMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.LogInstruction.completeMessage", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessLogInstruction.html#completeMessage:String", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessLogInstruction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessLogInstruction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessLogInstruction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessLogInstruction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessLogInstruction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessLogInstruction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessLogInstruction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessLogInstruction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessLogInstruction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessLogInstruction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessLogInstruction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessLogInstruction.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessLogInstruction.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessLogInstruction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessLogInstruction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessLogInstruction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/core\/SuccessLogInstruction.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.core.SuccessScenarioReport", "shortDescription" : "", "members_case class" : [{"label" : "shouldShowLogs", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.core.SuccessScenarioReport.shouldShowLogs", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessScenarioReport.html#shouldShowLogs:Boolean", "kind" : "val"}, {"label" : "isSuccess", "tail" : ": Boolean", "member" : "com.github.agourlay.cornichon.core.SuccessScenarioReport.isSuccess", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessScenarioReport.html#isSuccess:Boolean", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.core.SuccessScenarioReport#<init>", "error" : "unsupported entity"}, {"label" : "logs", "tail" : ": Vector[LogInstruction]", "member" : "com.github.agourlay.cornichon.core.SuccessScenarioReport.logs", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessScenarioReport.html#logs:Vector[com.github.agourlay.cornichon.core.LogInstruction]", "kind" : "val"}, {"label" : "session", "tail" : ": Session", "member" : "com.github.agourlay.cornichon.core.SuccessScenarioReport.session", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessScenarioReport.html#session:com.github.agourlay.cornichon.core.Session", "kind" : "val"}, {"label" : "scenarioName", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.SuccessScenarioReport.scenarioName", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessScenarioReport.html#scenarioName:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessScenarioReport.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessScenarioReport.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessScenarioReport.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessScenarioReport.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessScenarioReport.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessScenarioReport.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessScenarioReport.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessScenarioReport.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessScenarioReport.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessScenarioReport.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessScenarioReport.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessScenarioReport.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessScenarioReport.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessScenarioReport.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessScenarioReport.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/SuccessScenarioReport.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/core\/SuccessScenarioReport.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.core.ValueStep", "members_trait" : [{"label" : "run", "tail" : "(engine: Engine)(initialRunState: RunState): Task[(RunState, Either[FailedStep, Done])]", "member" : "com.github.agourlay.cornichon.core.ValueStep.run", "link" : "com\/github\/agourlay\/cornichon\/core\/ValueStep.html#run(engine:com.github.agourlay.cornichon.core.Engine)(initialRunState:com.github.agourlay.cornichon.core.RunState):monix.eval.Task[(com.github.agourlay.cornichon.core.RunState,Either[com.github.agourlay.cornichon.core.FailedStep,com.github.agourlay.cornichon.core.Done])]", "kind" : "def"}, {"label" : "chain", "tail" : "(others: (Session) â‡’ List[Step]): Step", "member" : "com.github.agourlay.cornichon.core.Step.chain", "link" : "com\/github\/agourlay\/cornichon\/core\/ValueStep.html#chain(others:com.github.agourlay.cornichon.core.Session=>List[com.github.agourlay.cornichon.core.Step]):com.github.agourlay.cornichon.core.Step", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/ValueStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/ValueStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/ValueStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/ValueStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/ValueStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/ValueStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/ValueStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/ValueStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/ValueStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/ValueStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/ValueStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/ValueStep.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/core\/ValueStep.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/ValueStep.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/core\/ValueStep.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/core\/ValueStep.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/ValueStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/ValueStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/ValueStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "onSuccess", "tail" : "(result: A, initialRunState: RunState, executionTime: Duration): (Option[LogInstruction], Option[Session])", "member" : "com.github.agourlay.cornichon.core.ValueStep.onSuccess", "link" : "com\/github\/agourlay\/cornichon\/core\/ValueStep.html#onSuccess(result:A,initialRunState:com.github.agourlay.cornichon.core.RunState,executionTime:scala.concurrent.duration.Duration):(Option[com.github.agourlay.cornichon.core.LogInstruction],Option[com.github.agourlay.cornichon.core.Session])", "kind" : "abstract def"}, {"label" : "onError", "tail" : "(errors: NonEmptyList[CornichonError], initialRunState: RunState): (Vector[LogInstruction], FailedStep)", "member" : "com.github.agourlay.cornichon.core.ValueStep.onError", "link" : "com\/github\/agourlay\/cornichon\/core\/ValueStep.html#onError(errors:cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError],initialRunState:com.github.agourlay.cornichon.core.RunState):(Vector[com.github.agourlay.cornichon.core.LogInstruction],com.github.agourlay.cornichon.core.FailedStep)", "kind" : "abstract def"}, {"label" : "run", "tail" : "(initialRunState: RunState): Task[Either[NonEmptyList[CornichonError], A]]", "member" : "com.github.agourlay.cornichon.core.ValueStep.run", "link" : "com\/github\/agourlay\/cornichon\/core\/ValueStep.html#run(initialRunState:com.github.agourlay.cornichon.core.RunState):monix.eval.Task[Either[cats.data.NonEmptyList[com.github.agourlay.cornichon.core.CornichonError],A]]", "kind" : "abstract def"}, {"label" : "setTitle", "tail" : "(newTitle: String): Step", "member" : "com.github.agourlay.cornichon.core.Step.setTitle", "link" : "com\/github\/agourlay\/cornichon\/core\/ValueStep.html#setTitle(newTitle:String):com.github.agourlay.cornichon.core.Step", "kind" : "abstract def"}, {"label" : "title", "tail" : "(): String", "member" : "com.github.agourlay.cornichon.core.Step.title", "link" : "com\/github\/agourlay\/cornichon\/core\/ValueStep.html#title:String", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/github\/agourlay\/cornichon\/core\/ValueStep.html", "kind" : "trait"}, {"name" : "com.github.agourlay.cornichon.core.WarningLogInstruction", "shortDescription" : "", "members_case class" : [{"label" : "colorized", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.WarningLogInstruction.colorized", "link" : "com\/github\/agourlay\/cornichon\/core\/WarningLogInstruction.html#colorized:String", "kind" : "lazy val"}, {"member" : "com.github.agourlay.cornichon.core.WarningLogInstruction#<init>", "error" : "unsupported entity"}, {"label" : "duration", "tail" : ": Option[Duration]", "member" : "com.github.agourlay.cornichon.core.WarningLogInstruction.duration", "link" : "com\/github\/agourlay\/cornichon\/core\/WarningLogInstruction.html#duration:Option[scala.concurrent.duration.Duration]", "kind" : "val"}, {"label" : "marginNb", "tail" : ": Int", "member" : "com.github.agourlay.cornichon.core.WarningLogInstruction.marginNb", "link" : "com\/github\/agourlay\/cornichon\/core\/WarningLogInstruction.html#marginNb:Int", "kind" : "val"}, {"label" : "message", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.WarningLogInstruction.message", "link" : "com\/github\/agourlay\/cornichon\/core\/WarningLogInstruction.html#message:String", "kind" : "val"}, {"label" : "completeMessage", "tail" : ": String", "member" : "com.github.agourlay.cornichon.core.LogInstruction.completeMessage", "link" : "com\/github\/agourlay\/cornichon\/core\/WarningLogInstruction.html#completeMessage:String", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/WarningLogInstruction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/WarningLogInstruction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/WarningLogInstruction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/WarningLogInstruction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/WarningLogInstruction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/WarningLogInstruction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/WarningLogInstruction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/WarningLogInstruction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/WarningLogInstruction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/WarningLogInstruction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/WarningLogInstruction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/WarningLogInstruction.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/WarningLogInstruction.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/WarningLogInstruction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/WarningLogInstruction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/WarningLogInstruction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "com\/github\/agourlay\/cornichon\/core\/WarningLogInstruction.html", "kind" : "case class"}, {"name" : "com.github.agourlay.cornichon.core.WrapperStep", "members_trait" : [{"label" : "successTitleLog", "tail" : "(depth: Int): SuccessLogInstruction", "member" : "com.github.agourlay.cornichon.core.WrapperStep.successTitleLog", "link" : "com\/github\/agourlay\/cornichon\/core\/WrapperStep.html#successTitleLog(depth:Int):com.github.agourlay.cornichon.core.SuccessLogInstruction", "kind" : "def"}, {"label" : "failedTitleLog", "tail" : "(depth: Int): FailureLogInstruction", "member" : "com.github.agourlay.cornichon.core.WrapperStep.failedTitleLog", "link" : "com\/github\/agourlay\/cornichon\/core\/WrapperStep.html#failedTitleLog(depth:Int):com.github.agourlay.cornichon.core.FailureLogInstruction", "kind" : "def"}, {"label" : "setTitle", "tail" : "(newTitle: String): WrapperStep", "member" : "com.github.agourlay.cornichon.core.WrapperStep.setTitle", "link" : "com\/github\/agourlay\/cornichon\/core\/WrapperStep.html#setTitle(newTitle:String):com.github.agourlay.cornichon.core.WrapperStep", "kind" : "def"}, {"label" : "chain", "tail" : "(others: (Session) â‡’ List[Step]): Step", "member" : "com.github.agourlay.cornichon.core.Step.chain", "link" : "com\/github\/agourlay\/cornichon\/core\/WrapperStep.html#chain(others:com.github.agourlay.cornichon.core.Session=>List[com.github.agourlay.cornichon.core.Step]):com.github.agourlay.cornichon.core.Step", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/core\/WrapperStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/core\/WrapperStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/core\/WrapperStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/core\/WrapperStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/core\/WrapperStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/core\/WrapperStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/core\/WrapperStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/WrapperStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/WrapperStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/core\/WrapperStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/core\/WrapperStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/core\/WrapperStep.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/core\/WrapperStep.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/core\/WrapperStep.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/core\/WrapperStep.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/core\/WrapperStep.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/core\/WrapperStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/WrapperStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/core\/WrapperStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "run", "tail" : "(engine: Engine)(initialRunState: RunState): Task[(RunState, Either[FailedStep, Done])]", "member" : "com.github.agourlay.cornichon.core.Step.run", "link" : "com\/github\/agourlay\/cornichon\/core\/WrapperStep.html#run(engine:com.github.agourlay.cornichon.core.Engine)(initialRunState:com.github.agourlay.cornichon.core.RunState):monix.eval.Task[(com.github.agourlay.cornichon.core.RunState,Either[com.github.agourlay.cornichon.core.FailedStep,com.github.agourlay.cornichon.core.Done])]", "kind" : "abstract def"}, {"label" : "title", "tail" : "(): String", "member" : "com.github.agourlay.cornichon.core.Step.title", "link" : "com\/github\/agourlay\/cornichon\/core\/WrapperStep.html#title:String", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "com\/github\/agourlay\/cornichon\/core\/WrapperStep.html", "kind" : "trait"}], "com.github" : [], "com.github.agourlay.cornichon.macros" : [{"name" : "com.github.agourlay.cornichon.macros.Macro", "shortDescription" : "", "members_class" : [{"label" : "collectImpl", "tail" : "(body: scala.reflect.macros.Universe.Tree): scala.reflect.macros.Universe.Tree", "member" : "com.github.agourlay.cornichon.macros.Macro.collectImpl", "link" : "com\/github\/agourlay\/cornichon\/macros\/package$$Macro.html#collectImpl(body:Macro.this.c.universe.Tree):Macro.this.c.universe.Tree", "kind" : "def"}, {"label" : "c", "tail" : ": Context", "member" : "com.github.agourlay.cornichon.macros.Macro.c", "link" : "com\/github\/agourlay\/cornichon\/macros\/package$$Macro.html#c:scala.reflect.macros.blackbox.Context", "kind" : "val"}, {"member" : "com.github.agourlay.cornichon.macros.Macro#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: â‡’ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "com\/github\/agourlay\/cornichon\/macros\/package$$Macro.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "com\/github\/agourlay\/cornichon\/macros\/package$$Macro.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "com\/github\/agourlay\/cornichon\/macros\/package$$Macro.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "com\/github\/agourlay\/cornichon\/macros\/package$$Macro.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "com\/github\/agourlay\/cornichon\/macros\/package$$Macro.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "com\/github\/agourlay\/cornichon\/macros\/package$$Macro.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "com\/github\/agourlay\/cornichon\/macros\/package$$Macro.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/macros\/package$$Macro.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/macros\/package$$Macro.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "com\/github\/agourlay\/cornichon\/macros\/package$$Macro.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "com\/github\/agourlay\/cornichon\/macros\/package$$Macro.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "com\/github\/agourlay\/cornichon\/macros\/package$$Macro.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "com\/github\/agourlay\/cornichon\/macros\/package$$Macro.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "com\/github\/agourlay\/cornichon\/macros\/package$$Macro.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "com\/github\/agourlay\/cornichon\/macros\/package$$Macro.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "com\/github\/agourlay\/cornichon\/macros\/package$$Macro.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "com\/github\/agourlay\/cornichon\/macros\/package$$Macro.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/macros\/package$$Macro.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "com\/github\/agourlay\/cornichon\/macros\/package$$Macro.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "com\/github\/agourlay\/cornichon\/macros\/package$$Macro.html", "kind" : "class"}]};